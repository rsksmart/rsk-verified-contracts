{
  "address": "0x2acc95758f8b5f583470ba265eb685a8f45fc9d5",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "RIFToken",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "byzantium"
  },
  "version": "0.4.25+commit.59dbf8f1",
  "source": "pragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\nlibrary AddressHelper {\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\n        returns (address) {\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        uint8 vv = v;\n        if (vv < 27) {\n            vv += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (vv != 27 && vv != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, vv, r, s);\n        }\n\n    }\n\n    function char(byte b) public pure returns (byte c) {\n        if (b < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n    function getHashedPublicKey(\n        bytes32 _xPoint,\n        bytes32 _yPoint)\n        pure public\n        returns(\n            bytes20 hashedPubKey)\n    {\n        byte startingByte = 0x04;\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\n    }\n\n    function fromHexChar(uint c) public pure returns (uint) {\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\n            return c - uint(byte('0'));\n        }\n\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\n            return 10 + c - uint(byte('a'));\n        }\n\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\n            return 10 + c - uint(byte('A'));\n        }\n\n        // Reaching this point means the ordinal is not for a hex char.\n        revert();\n    }\n\n    function fromAsciiString(string s) public pure returns(address) {\n        bytes memory ss = bytes(s);\n\n        // it should have 40 or 42 characters\n        if (ss.length != 40 && ss.length != 42) revert();\n\n        uint r = 0;\n        uint offset = 0;\n\n        if (ss.length == 42) {\n            offset = 2;\n\n            if (ss[0] != byte('0')) revert();\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\n        }\n\n        uint i;\n        uint x;\n        uint v;\n\n        // loads first 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // offset == 0x20\n        assembly { v := mload(add(0x20, ss)) }\n\n        // converts the first 32 bytes, adding to result\n        for (i = offset; i < 32; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        // loads second 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // and first 32 bytes\n        // offset == 0x40\n        assembly { v := mload(add(0x40, ss)) }\n\n        // converts the last 8 bytes, adding to result\n        for (i = 0; i < 8 + offset; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        return address(r);\n    }\n}\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\nlibrary AddressLinker   {\n    using SafeMath for uint256;\n    using SafeMath for uint;\n\n    uint constant BITCOIN  = 0;\n    uint constant ETHEREUM = 1;\n\n    function acceptLinkedRskAddress(\n        address buyerAddress, uint chainId,\n        string redeemAddressAsString, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\n\n        // Verify signatures\n        bytes32 hash;\n\n        if (chainId == BITCOIN) {\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\"\\x18Bitcoin Signed Message:\\n\\x2a\", redeemAddressAsString))));\n        } else {\n            hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n42\", redeemAddressAsString));\n        }\n\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\n\n        return recoveredAddress == address(buyerAddress);\n    }\n\n    function acceptDelegate(\n        address buyerAddress, uint chainId,\n        uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\n\n        // Verify signatures\n        bytes32 hash;\n\n        if (chainId==BITCOIN) {\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\"\\x18Bitcoin Signed Message:\\n\\x0a\",\"DELEGATION\"))));\n        } else {\n            hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n10\",\"DELEGATION\"));\n        }\n\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\n\n        return recoveredAddress == address(buyerAddress);\n    }\n}\n\n\n /*\n * Contract interface for receivers of tokens that\n * comply with ERC-677.\n * See https://github.com/ethereum/EIPs/issues/677 for details.\n */\ncontract ERC677TransferReceiver {\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n\n\n\n\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\n    /**\n     * Transfer event as described in ERC-677\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    mapping(address => uint) public minimumLeftFromSale;\n\n    // is the account of the original contributor\n    mapping(address => bool) public isInitialContributor;\n\n    // redeemed to same account or to another account\n    mapping(address => bool) public isRedeemed;\n\n    // original or redeemed contributor addresses\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\n\n    // redirect:\n    // returns new address old address is now mapped\n    mapping(address => address) public redirect;\n\n    bool public enableManagerContract;\n    address public authorizedManagerContract;\n\n    uint public distributionTime;\n\n    uint256 constant REDEEM_DEADLINE = 365 days;\n    address constant ZERO_ADDRESS = address(0);\n\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\n    // releaseOwnership()\n\n    constructor() DetailedERC20(\"RIF\",\"RIF\",18) public {\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\n        // Total => 10**27 RIFIs.\n        totalSupply_ = 10**27;\n        balances[address(this)] = totalSupply_;\n        enableManagerContract = false;\n        authorizedManagerContract = ZERO_ADDRESS;\n        distributionTime = 0;\n    }\n\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\n        address dest = getRedirectedAddress(a);\n        return minimumLeftFromSale[dest];\n    }\n\n    function disableManagerContract() public onlyAuthorizedManagerContract {\n        enableManagerContract = false;\n    }\n\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\n        require(distributionTime == 0);\n        distributionTime = _distributionTime;\n    }\n\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\n        require(authorizedManagerContract == ZERO_ADDRESS);\n        authorizedManagerContract = authorized;\n        enableManagerContract = true;\n        transferAll(this, authorized);\n    }\n\n    modifier onlyAuthorizedManagerContract() {\n        require(msg.sender==authorizedManagerContract);\n        require(enableManagerContract);\n        _;\n    }\n\n    modifier onlyWhileInDistribution() {\n        require(distributionTime == 0);\n        _;\n    }\n\n    modifier onlyAfterDistribution() {\n        require(distributionTime > 0 && now >= distributionTime);\n        _;\n    }\n\n    modifier onlyIfAddressUsable(address sender) {\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\n        _;\n    }\n\n    // Important: this is an internal function. It doesn't verify transfer rights.\n    function transferAll(address _from, address _to) internal returns (bool) {\n        require(_to != ZERO_ADDRESS);\n\n        uint256 _value;\n\n        _value = balances[_from];\n        balances[_from] = 0;\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\n        bool result = super.transfer(wallet, amount);\n\n        if (!result) revert();\n    }\n\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\n    // also TokenManager is the owner of the bonuses.\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\n        if (!validAddress(contributor)) return;\n\n        super.transfer(contributor, amount);\n\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\n\n        isInitialContributor[contributor] = true;\n        isOriginalOrRedeemedContributor[contributor] = true;\n    }\n\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\n        if (!isInitialContributor[_to]) return false;\n\n        address finalAddress = getRedirectedAddress(_to);\n\n        return super.transfer(finalAddress, _value);\n    }\n\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\n        if (!isInitialContributor[from] || isRedeemed[from]) {\n            return false;\n        }\n\n        if (!transferAll(from, to)) {\n            return false;\n        }\n\n        // mark as redirected and redeemed, for informational purposes\n        redirect[from] = to;\n        isRedeemed[from] = true;\n\n        return true;\n    }\n\n    function redeemIsAllowed() public view returns (bool) {\n        return  distributionTime > 0 &&\n                now >= distributionTime &&\n                now <= distributionTime + REDEEM_DEADLINE;\n    }\n\n    function redeemToSameAddress() public returns (bool) {\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[msg.sender]);\n\n        isRedeemed[msg.sender] = true;\n        \n        return true;\n    }\n\n    // Important: the user should not use the same contributorAddress for two different chains.\n    function redeem(\n        address contributorAddress, uint chainId,\n        string redeemAddressAsString, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\n\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[contributorAddress]);\n\n        // Avoid redeeming an already redeemed address\n        require(!isRedeemed[contributorAddress]);\n\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\n\n        // Avoid reusing a contributor address\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\n\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\n            redeemAddressAsString, sig_v, sig_r, sig_s));\n\n        // Now we must move the funds from the old address to the new address\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\n        minimumLeftFromSale[contributorAddress] = 0;\n\n        // Mark as redirected and redeemed\n        redirect[contributorAddress] = redeemAddress;\n        isRedeemed[contributorAddress] = true;\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\n\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\n        // those RIFs.\n        return transferAll(contributorAddress, redeemAddress);\n    }\n\n    function contingentRedeem(\n        address contributorAddress,\n        uint chainId,\n        address redeemAddress, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\n\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[contributorAddress]);\n\n        // Avoid redeeming an already redeemed address\n        require(!isRedeemed[contributorAddress]);\n\n        // Avoid reusing a contributor address\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\n\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\n\n        // Now we must move the funds from the old address to the new address\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\n        minimumLeftFromSale[contributorAddress] = 0;\n\n        // Mark as redirected and redeemed\n        redirect[contributorAddress] = redeemAddress;\n        isRedeemed[contributorAddress] = true;\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\n\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\n        // those RIFs.\n        return transferAll(contributorAddress, redeemAddress);\n    }\n\n    function getRedirectedAddress(address a) public view returns(address) {\n        address r = redirect[a];\n\n        if (r != ZERO_ADDRESS) {\n            return r;\n        }\n\n        return a;\n    }\n\n    function validAddress(address a) public pure returns(bool) {\n        return (a != ZERO_ADDRESS);\n    }\n\n    function wasRedirected(address a) public view returns(bool) {\n        return (redirect[a] != ZERO_ADDRESS);\n    }\n\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        // cannot transfer to a redirected account\n        if (wasRedirected(_to)) return false;\n\n        bool result = super.transfer(_to, _value);\n\n        if (!result) return false;\n\n        doTrackMinimums(msg.sender);\n\n        return true;\n    }\n\n    /**\n     * ERC-677's only method implementation\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     */\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\n        bool result = transfer(_to, _value);\n        if (!result) return false;\n\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n\n        // IMPORTANT: the ERC-677 specification does not say\n        // anything about the use of the receiver contract's\n        // tokenFallback method return value. Given\n        // its return type matches with this method's return\n        // type, returning it could be a possibility.\n        // We here take the more conservative approach and\n        // ignore the return value, returning true\n        // to signal a succesful transfer despite tokenFallback's\n        // return value -- fact being tokens are transferred\n        // in any case.\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\n        // cannot transfer to a redirected account\n        if (wasRedirected(_to)) return false;\n\n        bool result = super.transferFrom(_from, _to, _value);\n        if (!result) return false;\n\n        doTrackMinimums(_from);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function doTrackMinimums(address addr) private {\n        // We only track minimums while there's a manager\n        // contract that can pay the bonuses for which\n        // these minimums are tracked for in the first place.\n        if (!enableManagerContract) return;\n\n        uint m = minimumLeftFromSale[addr];\n\n        if ((m>0) && (balances[addr] < m)) {\n            minimumLeftFromSale[addr] = balances[addr];\n        }\n    }\n}\n",
  "imports": [
    {
      "name": "riffFlat.sol",
      "contents": "pragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n\nlibrary AddressHelper {\n    function recoverAddress(bytes32 hash, uint8 v, bytes32 r, bytes32 s) public pure\n        returns (address) {\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\n        uint8 vv = v;\n        if (vv < 27) {\n            vv += 27;\n        }\n\n        // If the version is correct return the signer address\n        if (vv != 27 && vv != 28) {\n            return (address(0));\n        } else {\n            return ecrecover(hash, vv, r, s);\n        }\n\n    }\n\n    function char(byte b) public pure returns (byte c) {\n        if (b < 10) return byte(uint8(b) + 0x30);\n        else return byte(uint8(b) + 0x57);\n    }\n\n    function getHashedPublicKey(\n        bytes32 _xPoint,\n        bytes32 _yPoint)\n        pure public\n        returns(\n            bytes20 hashedPubKey)\n    {\n        byte startingByte = 0x04;\n        return ripemd160(abi.encodePacked(sha256(abi.encodePacked(startingByte, _xPoint, _yPoint))));\n    }\n\n    function fromHexChar(uint c) public pure returns (uint) {\n        if (c >= uint(byte('0')) && c <= uint(byte('9'))) {\n            return c - uint(byte('0'));\n        }\n\n        if (c >= uint(byte('a')) && c <= uint(byte('f'))) {\n            return 10 + c - uint(byte('a'));\n        }\n\n        if (c >= uint(byte('A')) && c <= uint(byte('F'))) {\n            return 10 + c - uint(byte('A'));\n        }\n\n        // Reaching this point means the ordinal is not for a hex char.\n        revert();\n    }\n\n    function fromAsciiString(string s) public pure returns(address) {\n        bytes memory ss = bytes(s);\n\n        // it should have 40 or 42 characters\n        if (ss.length != 40 && ss.length != 42) revert();\n\n        uint r = 0;\n        uint offset = 0;\n\n        if (ss.length == 42) {\n            offset = 2;\n\n            if (ss[0] != byte('0')) revert();\n            if (ss[1] != byte('x') && ss[1] != byte('X')) revert();\n        }\n\n        uint i;\n        uint x;\n        uint v;\n\n        // loads first 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // offset == 0x20\n        assembly { v := mload(add(0x20, ss)) }\n\n        // converts the first 32 bytes, adding to result\n        for (i = offset; i < 32; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        // loads second 32 bytes from array,\n        // skipping array length (32 bytes to skip)\n        // and first 32 bytes\n        // offset == 0x40\n        assembly { v := mload(add(0x40, ss)) }\n\n        // converts the last 8 bytes, adding to result\n        for (i = 0; i < 8 + offset; ++i) {\n            assembly { x := byte(i, v) }\n            r = r * 16 + fromHexChar(x);\n        }\n\n        return address(r);\n    }\n}\n\n\n\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n\n\nlibrary AddressLinker   {\n    using SafeMath for uint256;\n    using SafeMath for uint;\n\n    uint constant BITCOIN  = 0;\n    uint constant ETHEREUM = 1;\n\n    function acceptLinkedRskAddress(\n        address buyerAddress, uint chainId,\n        string redeemAddressAsString, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\n\n        // Verify signatures\n        bytes32 hash;\n\n        if (chainId == BITCOIN) {\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\"\\x18Bitcoin Signed Message:\\n\\x2a\", redeemAddressAsString))));\n        } else {\n            hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n42\", redeemAddressAsString));\n        }\n\n        address recoveredAddress = AddressHelper.recoverAddress(hash, sig_v, sig_r, sig_s);\n\n        return recoveredAddress == address(buyerAddress);\n    }\n\n    function acceptDelegate(\n        address buyerAddress, uint chainId,\n        uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public pure returns (bool) {\n\n        // Verify signatures\n        bytes32 hash;\n\n        if (chainId==BITCOIN) {\n            hash = sha256(abi.encodePacked(sha256(abi.encodePacked(\"\\x18Bitcoin Signed Message:\\n\\x0a\",\"DELEGATION\"))));\n        } else {\n            hash = keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n10\",\"DELEGATION\"));\n        }\n\n        address recoveredAddress = AddressHelper.recoverAddress(hash,sig_v,sig_r,sig_s);\n\n        return recoveredAddress == address(buyerAddress);\n    }\n}\n\n\n /*\n * Contract interface for receivers of tokens that\n * comply with ERC-677.\n * See https://github.com/ethereum/EIPs/issues/677 for details.\n */\ncontract ERC677TransferReceiver {\n    function tokenFallback(address from, uint256 amount, bytes data) public returns (bool);\n}\n\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n\n\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n\n\n\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n\n\n\n\n\n\ncontract RIFToken is DetailedERC20, Ownable, StandardToken {\n    /**\n     * Transfer event as described in ERC-677\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n\n    mapping(address => uint) public minimumLeftFromSale;\n\n    // is the account of the original contributor\n    mapping(address => bool) public isInitialContributor;\n\n    // redeemed to same account or to another account\n    mapping(address => bool) public isRedeemed;\n\n    // original or redeemed contributor addresses\n    mapping (address => bool) public isOriginalOrRedeemedContributor;\n\n    // redirect:\n    // returns new address old address is now mapped\n    mapping(address => address) public redirect;\n\n    bool public enableManagerContract;\n    address public authorizedManagerContract;\n\n    uint public distributionTime;\n\n    uint256 constant REDEEM_DEADLINE = 365 days;\n    address constant ZERO_ADDRESS = address(0);\n\n    // The RIF token has minimum ownership permissions until ownership is manually withdrawn by\n    // releaseOwnership()\n\n    constructor() DetailedERC20(\"RIF\",\"RIF\",18) public {\n        // There will only ever be 1 billion tokens. Each tokens has 18 decimal digits.\n        // Therefore, 1 billion = 1,000,000,000 = 10**9 followed by 18 more zeroes = 10**18\n        // Total => 10**27 RIFIs.\n        totalSupply_ = 10**27;\n        balances[address(this)] = totalSupply_;\n        enableManagerContract = false;\n        authorizedManagerContract = ZERO_ADDRESS;\n        distributionTime = 0;\n    }\n\n    function getMinimumLeftFromSale(address a) public view returns(uint) {\n        address dest = getRedirectedAddress(a);\n        return minimumLeftFromSale[dest];\n    }\n\n    function disableManagerContract() public onlyAuthorizedManagerContract {\n        enableManagerContract = false;\n    }\n\n    function closeTokenDistribution(uint _distributionTime) public onlyAuthorizedManagerContract {\n        require(distributionTime == 0);\n        distributionTime = _distributionTime;\n    }\n\n    function setAuthorizedManagerContract(address authorized) public onlyOwner {\n        require(authorizedManagerContract == ZERO_ADDRESS);\n        authorizedManagerContract = authorized;\n        enableManagerContract = true;\n        transferAll(this, authorized);\n    }\n\n    modifier onlyAuthorizedManagerContract() {\n        require(msg.sender==authorizedManagerContract);\n        require(enableManagerContract);\n        _;\n    }\n\n    modifier onlyWhileInDistribution() {\n        require(distributionTime == 0);\n        _;\n    }\n\n    modifier onlyAfterDistribution() {\n        require(distributionTime > 0 && now >= distributionTime);\n        _;\n    }\n\n    modifier onlyIfAddressUsable(address sender) {\n        require(!isInitialContributor[sender] || isRedeemed[sender]);\n        _;\n    }\n\n    // Important: this is an internal function. It doesn't verify transfer rights.\n    function transferAll(address _from, address _to) internal returns (bool) {\n        require(_to != ZERO_ADDRESS);\n\n        uint256 _value;\n\n        _value = balances[_from];\n        balances[_from] = 0;\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function transferToShareholder(address wallet, uint amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\n        bool result = super.transfer(wallet, amount);\n\n        if (!result) revert();\n    }\n\n    // TokenManager is the owner of the tokens to the pre-sale contributors and will distribute them\n    // also TokenManager is the owner of the bonuses.\n    function transferToContributor(address contributor, uint256 amount) public onlyWhileInDistribution onlyAuthorizedManagerContract {\n        if (!validAddress(contributor)) return;\n\n        super.transfer(contributor, amount);\n\n        minimumLeftFromSale[contributor] += amount; //sets the contributor as an ITA special address\n\n        isInitialContributor[contributor] = true;\n        isOriginalOrRedeemedContributor[contributor] = true;\n    }\n\n    // If this transfer fails, there will be a problem because other bonus won't be able to be paid.\n    function transferBonus(address _to, uint256 _value) public onlyAuthorizedManagerContract returns (bool) {\n        if (!isInitialContributor[_to]) return false;\n\n        address finalAddress = getRedirectedAddress(_to);\n\n        return super.transfer(finalAddress, _value);\n    }\n\n    function delegate(address from, address to) public onlyAuthorizedManagerContract returns (bool) {\n        if (!isInitialContributor[from] || isRedeemed[from]) {\n            return false;\n        }\n\n        if (!transferAll(from, to)) {\n            return false;\n        }\n\n        // mark as redirected and redeemed, for informational purposes\n        redirect[from] = to;\n        isRedeemed[from] = true;\n\n        return true;\n    }\n\n    function redeemIsAllowed() public view returns (bool) {\n        return  distributionTime > 0 &&\n                now >= distributionTime &&\n                now <= distributionTime + REDEEM_DEADLINE;\n    }\n\n    function redeemToSameAddress() public returns (bool) {\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[msg.sender]);\n\n        isRedeemed[msg.sender] = true;\n        \n        return true;\n    }\n\n    // Important: the user should not use the same contributorAddress for two different chains.\n    function redeem(\n        address contributorAddress, uint chainId,\n        string redeemAddressAsString, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public returns (bool) {\n\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[contributorAddress]);\n\n        // Avoid redeeming an already redeemed address\n        require(!isRedeemed[contributorAddress]);\n\n        address redeemAddress = AddressHelper.fromAsciiString(redeemAddressAsString);\n\n        // Avoid reusing a contributor address\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\n\n        require(AddressLinker.acceptLinkedRskAddress(contributorAddress, chainId,\n            redeemAddressAsString, sig_v, sig_r, sig_s));\n\n        // Now we must move the funds from the old address to the new address\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\n        minimumLeftFromSale[contributorAddress] = 0;\n\n        // Mark as redirected and redeemed\n        redirect[contributorAddress] = redeemAddress;\n        isRedeemed[contributorAddress] = true;\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\n\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\n        // those RIFs.\n        return transferAll(contributorAddress, redeemAddress);\n    }\n\n    function contingentRedeem(\n        address contributorAddress,\n        uint chainId,\n        address redeemAddress, uint8 sig_v,\n        bytes32 sig_r, bytes32 sig_s) public onlyOwner returns (bool) {\n\n        require(redeemIsAllowed());\n\n        // Only an original contributor can be redeemed\n        require(isInitialContributor[contributorAddress]);\n\n        // Avoid redeeming an already redeemed address\n        require(!isRedeemed[contributorAddress]);\n\n        // Avoid reusing a contributor address\n        require(!isOriginalOrRedeemedContributor[redeemAddress]);\n\n        if (!AddressLinker.acceptDelegate(contributorAddress, chainId, sig_v, sig_r, sig_s)) revert();\n\n        // Now we must move the funds from the old address to the new address\n        minimumLeftFromSale[redeemAddress] = minimumLeftFromSale[contributorAddress];\n        minimumLeftFromSale[contributorAddress] = 0;\n\n        // Mark as redirected and redeemed\n        redirect[contributorAddress] = redeemAddress;\n        isRedeemed[contributorAddress] = true;\n        isOriginalOrRedeemedContributor[redeemAddress] = true;\n\n        // Once the contributorAddress has moved the funds to the new RSK address, what to do with the old address?\n        // Users should not receive RIFs in the old address from other users. If they do, they may not be able to access\n        // those RIFs.\n        return transferAll(contributorAddress, redeemAddress);\n    }\n\n    function getRedirectedAddress(address a) public view returns(address) {\n        address r = redirect[a];\n\n        if (r != ZERO_ADDRESS) {\n            return r;\n        }\n\n        return a;\n    }\n\n    function validAddress(address a) public pure returns(bool) {\n        return (a != ZERO_ADDRESS);\n    }\n\n    function wasRedirected(address a) public view returns(bool) {\n        return (redirect[a] != ZERO_ADDRESS);\n    }\n\n    function transfer(address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        // cannot transfer to a redirected account\n        if (wasRedirected(_to)) return false;\n\n        bool result = super.transfer(_to, _value);\n\n        if (!result) return false;\n\n        doTrackMinimums(msg.sender);\n\n        return true;\n    }\n\n    /**\n     * ERC-677's only method implementation\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     */\n    function transferAndCall(address _to, uint _value, bytes _data) public returns (bool) {\n        bool result = transfer(_to, _value);\n        if (!result) return false;\n\n        emit Transfer(msg.sender, _to, _value, _data);\n\n        ERC677TransferReceiver receiver = ERC677TransferReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n\n        // IMPORTANT: the ERC-677 specification does not say\n        // anything about the use of the receiver contract's\n        // tokenFallback method return value. Given\n        // its return type matches with this method's return\n        // type, returning it could be a possibility.\n        // We here take the more conservative approach and\n        // ignore the return value, returning true\n        // to signal a succesful transfer despite tokenFallback's\n        // return value -- fact being tokens are transferred\n        // in any case.\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(_from) returns (bool) {\n        // cannot transfer to a redirected account\n        if (wasRedirected(_to)) return false;\n\n        bool result = super.transferFrom(_from, _to, _value);\n        if (!result) return false;\n\n        doTrackMinimums(_from);\n\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public onlyAfterDistribution onlyIfAddressUsable(msg.sender) returns (bool) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n\n    function doTrackMinimums(address addr) private {\n        // We only track minimums while there's a manager\n        // contract that can pay the bonuses for which\n        // these minimums are tracked for in the first place.\n        if (!enableManagerContract) return;\n\n        uint m = minimumLeftFromSale[addr];\n\n        if ((m>0) && (balances[addr] < m)) {\n            minimumLeftFromSale[addr] = balances[addr];\n        }\n    }\n}\n",
      "file": "riffFlat.sol"
    }
  ],
  "libraries": {
    "AddressLinker": "0x0d00ebb7b7403bc87a113a6d44aa55882ce31438",
    "AddressHelper": "0xca29fd2e878fc7845e7248ff8f27077c932918f0"
  },
  "creationData": {
    "blockHash": "0xa1df28b0c9632d2cf1732816f377753cd6e2425eac83f6a7f6f685382412de82",
    "blockNumber": 892218,
    "transactionHash": "0xd83839b1479cae8afef0d71bf078cdd1ff355e125a55bc3f4de3a7f0b6f94e48",
    "timestamp": 1541794359
  }
}