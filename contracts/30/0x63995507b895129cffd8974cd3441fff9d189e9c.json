{
  "address": "0x63995507b895129cffd8974cd3441fff9d189e9c",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "LoanTokenSettingsLowerAdmin",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul"
  },
  "version": "0.5.17+commit.d19bba13",
  "source": "/**\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 private constant _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(\n            !(a == -1 && b == _INT256_MIN),\n            \"SignedSafeMath: multiplication overflow\"\n        );\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(\n            !(b == -1 && a == _INT256_MIN),\n            \"SignedSafeMath: division overflow\"\n        );\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require(\n            (b >= 0 && c <= a) || (b < 0 && c > a),\n            \"SignedSafeMath: subtraction overflow\"\n        );\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require(\n            (b >= 0 && c >= a) || (b < 0 && c < a),\n            \"SignedSafeMath: addition overflow\"\n        );\n\n        return c;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n    /// @dev Constant for locked guard state\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * If you mark a function `nonReentrant`, you should also\n     * mark it `external`. Calling one `nonReentrant` function from\n     * another is not supported. Instead, you can implement a\n     * `private` function doing the actual work, and an `external`\n     * wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n        _;\n        reentrancyLock = REENTRANCY_GUARD_FREE;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\ncontract Pausable {\n    // keccak256(\"Pausable_FunctionPause\")\n    bytes32\n        internal constant Pausable_FunctionPause = 0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\n\n    modifier pausable(bytes4 sig) {\n        require(!_isPaused(sig), \"unauthorized\");\n        _;\n    }\n\n    function _isPaused(bytes4 sig) internal view returns (bool isPaused) {\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\n        assembly {\n            isPaused := sload(slot)\n        }\n    }\n}\n\ncontract LoanTokenBase is ReentrancyGuard, Ownable {\n    uint256 internal constant WEI_PRECISION = 10**18;\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\n\n    int256 internal constant sWEI_PRECISION = 10**18;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    address public loanTokenAddress;\n\n    uint256 public baseRate;\n    uint256 public rateMultiplier;\n    uint256 public lowUtilBaseRate;\n    uint256 public lowUtilRateMultiplier;\n\n    uint256 public targetLevel;\n    uint256 public kinkLevel;\n    uint256 public maxScaleRate;\n\n    uint256 internal _flTotalAssetSupply;\n    uint256 public checkpointSupply;\n    uint256 public initialPrice;\n\n    // uint88 for tight packing -> 8 + 88 + 160 = 256\n    uint88 internal lastSettleTime_;\n\n    mapping(uint256 => bytes32) public loanParamsIds; // mapping of keccak256(collateralToken, isTorqueLoan) to loanParamsId\n    mapping(address => uint256) internal checkpointPrices_; // price of token at last user checkpoint\n\n    mapping(address => uint256) public transactionLimit; // the maximum trading/borrowing/lending limit per token address\n    // 0 -> no limit\n}\n\ncontract AdvancedTokenStorage is LoanTokenBase {\n    using SafeMathSovryn for uint256;\n\n    // topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // topic: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    // topic: 0xb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb\n    event Mint(\n        address indexed minter,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n\n    // topic: 0x743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b4644\n    event Burn(\n        address indexed burner,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    uint256 internal totalSupply_;\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract LoanParamsStruct {\n    struct LoanParams {\n        bytes32 id; // id of loan params object\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\n        address owner; // owner of this object\n        address loanToken; // the token being loaned\n        address collateralToken; // the required collateral token\n        uint256 minInitialMargin; // the minimum allowed initial margin\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\n    }\n}\n\ninterface ProtocolSettingsLike {\n    function setupLoanParams(\n        LoanParamsStruct.LoanParams[] calldata loanParamsList\n    ) external returns (bytes32[] memory loanParamsIdList);\n\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\n}\n\ncontract LoanTokenSettingsLowerAdmin is AdvancedTokenStorage {\n    using SafeMathSovryn for uint256;\n\n    // It is important to maintain the variables order so the delegate calls can access sovrynContractAddress\n    address public sovrynContractAddress;\n\n    event SetTransactionLimits(address[] addresses, uint256[] limits);\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == address(this) || msg.sender == owner(),\n            \"unauthorized\"\n        );\n        _;\n    }\n\n    function() external {\n        revert(\"LoanTokenSettingsLowerAdmin - fallback not allowed\");\n    }\n\n    function setupLoanParams(\n        LoanParamsStruct.LoanParams[] memory loanParamsList,\n        bool areTorqueLoans\n    ) public onlyAdmin {\n        bytes32[] memory loanParamsIdList;\n        address _loanTokenAddress = loanTokenAddress;\n\n        for (uint256 i = 0; i < loanParamsList.length; i++) {\n            loanParamsList[i].loanToken = _loanTokenAddress;\n            loanParamsList[i].maxLoanTerm = areTorqueLoans ? 0 : 28 days;\n        }\n\n        loanParamsIdList = ProtocolSettingsLike(sovrynContractAddress)\n            .setupLoanParams(loanParamsList);\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n            loanParamsIds[uint256(\n                keccak256(\n                    abi.encodePacked(\n                        loanParamsList[i].collateralToken,\n                        areTorqueLoans // isTorqueLoan\n                    )\n                )\n            )] = loanParamsIdList[i];\n        }\n    }\n\n    function disableLoanParams(\n        address[] calldata collateralTokens,\n        bool[] calldata isTorqueLoans\n    ) external onlyAdmin {\n        require(\n            collateralTokens.length == isTorqueLoans.length,\n            \"count mismatch\"\n        );\n\n        bytes32[] memory loanParamsIdList = new bytes32[](\n            collateralTokens.length\n        );\n        for (uint256 i = 0; i < collateralTokens.length; i++) {\n            uint256 id = uint256(\n                keccak256(\n                    abi.encodePacked(collateralTokens[i], isTorqueLoans[i])\n                )\n            );\n            loanParamsIdList[i] = loanParamsIds[id];\n            delete loanParamsIds[id];\n        }\n\n        ProtocolSettingsLike(sovrynContractAddress).disableLoanParams(\n            loanParamsIdList\n        );\n    }\n\n    // These params should be percentages represented like so: 5% = 5000000000000000000\n    // rateMultiplier + baseRate can't exceed 100%\n    function setDemandCurve(\n        uint256 _baseRate,\n        uint256 _rateMultiplier,\n        uint256 _lowUtilBaseRate,\n        uint256 _lowUtilRateMultiplier,\n        uint256 _targetLevel,\n        uint256 _kinkLevel,\n        uint256 _maxScaleRate\n    ) public onlyAdmin {\n        require(\n            _rateMultiplier.add(_baseRate) <= WEI_PERCENT_PRECISION,\n            \"curve params too high\"\n        );\n        require(\n            _lowUtilRateMultiplier.add(_lowUtilBaseRate) <=\n                WEI_PERCENT_PRECISION,\n            \"curve params too high\"\n        );\n\n        require(\n            _targetLevel <= WEI_PERCENT_PRECISION &&\n                _kinkLevel <= WEI_PERCENT_PRECISION,\n            \"levels too high\"\n        );\n\n        baseRate = _baseRate;\n        rateMultiplier = _rateMultiplier;\n        lowUtilBaseRate = _lowUtilBaseRate;\n        lowUtilRateMultiplier = _lowUtilRateMultiplier;\n\n        targetLevel = _targetLevel; // 80 ether\n        kinkLevel = _kinkLevel; // 90 ether\n        maxScaleRate = _maxScaleRate; // 100 ether\n    }\n\n    function toggleFunctionPause(\n        string memory funcId, // example: \"mint(uint256,uint256)\"\n        bool isPaused\n    ) public onlyAdmin {\n        // keccak256(\"iToken_FunctionPause\")\n        bytes32 slot = keccak256(\n            abi.encodePacked(\n                bytes4(keccak256(abi.encodePacked(funcId))),\n                uint256(\n                    0xd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2\n                )\n            )\n        );\n        assembly {\n            sstore(slot, isPaused)\n        }\n    }\n\n    /**\n     * sets the transaction limit per token address\n     * @param addresses the token addresses\n     * @param limits the limit denominated in the currency of the token address\n     * */\n    function setTransactionLimits(\n        address[] memory addresses,\n        uint256[] memory limits\n    ) public onlyOwner {\n        require(addresses.length == limits.length, \"mismatched array lengths\");\n        for (uint256 i = 0; i < addresses.length; i++) {\n            transactionLimit[addresses[i]] = limits[i];\n        }\n        emit SetTransactionLimits(addresses, limits);\n    }\n}\n",
  "imports": [
    {
      "name": "LoanTokenSettingsLowerAdmin_Deployable.sol",
      "contents": "/**\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\n/**\n * @title SignedSafeMath\n * @dev Signed math operations with safety checks that revert on error.\n */\nlibrary SignedSafeMath {\n    int256 private constant _INT256_MIN = -2**255;\n\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(\n            !(a == -1 && b == _INT256_MIN),\n            \"SignedSafeMath: multiplication overflow\"\n        );\n\n        int256 c = a * b;\n        require(c / a == b, \"SignedSafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0, \"SignedSafeMath: division by zero\");\n        require(\n            !(b == -1 && a == _INT256_MIN),\n            \"SignedSafeMath: division overflow\"\n        );\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require(\n            (b >= 0 && c <= a) || (b < 0 && c > a),\n            \"SignedSafeMath: subtraction overflow\"\n        );\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require(\n            (b >= 0 && c >= a) || (b < 0 && c < a),\n            \"SignedSafeMath: addition overflow\"\n        );\n\n        return c;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n    /// @dev Constant for locked guard state\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * If you mark a function `nonReentrant`, you should also\n     * mark it `external`. Calling one `nonReentrant` function from\n     * another is not supported. Instead, you can implement a\n     * `private` function doing the actual work, and an `external`\n     * wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n        _;\n        reentrancyLock = REENTRANCY_GUARD_FREE;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\ncontract Pausable {\n    // keccak256(\"Pausable_FunctionPause\")\n    bytes32\n        internal constant Pausable_FunctionPause = 0xa7143c84d793a15503da6f19bf9119a2dac94448ca45d77c8bf08f57b2e91047;\n\n    modifier pausable(bytes4 sig) {\n        require(!_isPaused(sig), \"unauthorized\");\n        _;\n    }\n\n    function _isPaused(bytes4 sig) internal view returns (bool isPaused) {\n        bytes32 slot = keccak256(abi.encodePacked(sig, Pausable_FunctionPause));\n        assembly {\n            isPaused := sload(slot)\n        }\n    }\n}\n\ncontract LoanTokenBase is ReentrancyGuard, Ownable {\n    uint256 internal constant WEI_PRECISION = 10**18;\n    uint256 internal constant WEI_PERCENT_PRECISION = 10**20;\n\n    int256 internal constant sWEI_PRECISION = 10**18;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    address public loanTokenAddress;\n\n    uint256 public baseRate;\n    uint256 public rateMultiplier;\n    uint256 public lowUtilBaseRate;\n    uint256 public lowUtilRateMultiplier;\n\n    uint256 public targetLevel;\n    uint256 public kinkLevel;\n    uint256 public maxScaleRate;\n\n    uint256 internal _flTotalAssetSupply;\n    uint256 public checkpointSupply;\n    uint256 public initialPrice;\n\n    // uint88 for tight packing -> 8 + 88 + 160 = 256\n    uint88 internal lastSettleTime_;\n\n    mapping(uint256 => bytes32) public loanParamsIds; // mapping of keccak256(collateralToken, isTorqueLoan) to loanParamsId\n    mapping(address => uint256) internal checkpointPrices_; // price of token at last user checkpoint\n\n    mapping(address => uint256) public transactionLimit; // the maximum trading/borrowing/lending limit per token address\n    // 0 -> no limit\n}\n\ncontract AdvancedTokenStorage is LoanTokenBase {\n    using SafeMathSovryn for uint256;\n\n    // topic: 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // topic: 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    // topic: 0xb4c03061fb5b7fed76389d5af8f2e0ddb09f8c70d1333abbb62582835e10accb\n    event Mint(\n        address indexed minter,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n\n    // topic: 0x743033787f4738ff4d6a7225ce2bd0977ee5f86b91a902a58f5e4d0b297b4644\n    event Burn(\n        address indexed burner,\n        uint256 tokenAmount,\n        uint256 assetAmount,\n        uint256 price\n    );\n\n    mapping(address => uint256) internal balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n    uint256 internal totalSupply_;\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract LoanParamsStruct {\n    struct LoanParams {\n        bytes32 id; // id of loan params object\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\n        address owner; // owner of this object\n        address loanToken; // the token being loaned\n        address collateralToken; // the required collateral token\n        uint256 minInitialMargin; // the minimum allowed initial margin\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\n    }\n}\n\ninterface ProtocolSettingsLike {\n    function setupLoanParams(\n        LoanParamsStruct.LoanParams[] calldata loanParamsList\n    ) external returns (bytes32[] memory loanParamsIdList);\n\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external;\n}\n\ncontract LoanTokenSettingsLowerAdmin is AdvancedTokenStorage {\n    using SafeMathSovryn for uint256;\n\n    // It is important to maintain the variables order so the delegate calls can access sovrynContractAddress\n    address public sovrynContractAddress;\n\n    event SetTransactionLimits(address[] addresses, uint256[] limits);\n\n    modifier onlyAdmin() {\n        require(\n            msg.sender == address(this) || msg.sender == owner(),\n            \"unauthorized\"\n        );\n        _;\n    }\n\n    function() external {\n        revert(\"LoanTokenSettingsLowerAdmin - fallback not allowed\");\n    }\n\n    function setupLoanParams(\n        LoanParamsStruct.LoanParams[] memory loanParamsList,\n        bool areTorqueLoans\n    ) public onlyAdmin {\n        bytes32[] memory loanParamsIdList;\n        address _loanTokenAddress = loanTokenAddress;\n\n        for (uint256 i = 0; i < loanParamsList.length; i++) {\n            loanParamsList[i].loanToken = _loanTokenAddress;\n            loanParamsList[i].maxLoanTerm = areTorqueLoans ? 0 : 28 days;\n        }\n\n        loanParamsIdList = ProtocolSettingsLike(sovrynContractAddress)\n            .setupLoanParams(loanParamsList);\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n            loanParamsIds[uint256(\n                keccak256(\n                    abi.encodePacked(\n                        loanParamsList[i].collateralToken,\n                        areTorqueLoans // isTorqueLoan\n                    )\n                )\n            )] = loanParamsIdList[i];\n        }\n    }\n\n    function disableLoanParams(\n        address[] calldata collateralTokens,\n        bool[] calldata isTorqueLoans\n    ) external onlyAdmin {\n        require(\n            collateralTokens.length == isTorqueLoans.length,\n            \"count mismatch\"\n        );\n\n        bytes32[] memory loanParamsIdList = new bytes32[](\n            collateralTokens.length\n        );\n        for (uint256 i = 0; i < collateralTokens.length; i++) {\n            uint256 id = uint256(\n                keccak256(\n                    abi.encodePacked(collateralTokens[i], isTorqueLoans[i])\n                )\n            );\n            loanParamsIdList[i] = loanParamsIds[id];\n            delete loanParamsIds[id];\n        }\n\n        ProtocolSettingsLike(sovrynContractAddress).disableLoanParams(\n            loanParamsIdList\n        );\n    }\n\n    // These params should be percentages represented like so: 5% = 5000000000000000000\n    // rateMultiplier + baseRate can't exceed 100%\n    function setDemandCurve(\n        uint256 _baseRate,\n        uint256 _rateMultiplier,\n        uint256 _lowUtilBaseRate,\n        uint256 _lowUtilRateMultiplier,\n        uint256 _targetLevel,\n        uint256 _kinkLevel,\n        uint256 _maxScaleRate\n    ) public onlyAdmin {\n        require(\n            _rateMultiplier.add(_baseRate) <= WEI_PERCENT_PRECISION,\n            \"curve params too high\"\n        );\n        require(\n            _lowUtilRateMultiplier.add(_lowUtilBaseRate) <=\n                WEI_PERCENT_PRECISION,\n            \"curve params too high\"\n        );\n\n        require(\n            _targetLevel <= WEI_PERCENT_PRECISION &&\n                _kinkLevel <= WEI_PERCENT_PRECISION,\n            \"levels too high\"\n        );\n\n        baseRate = _baseRate;\n        rateMultiplier = _rateMultiplier;\n        lowUtilBaseRate = _lowUtilBaseRate;\n        lowUtilRateMultiplier = _lowUtilRateMultiplier;\n\n        targetLevel = _targetLevel; // 80 ether\n        kinkLevel = _kinkLevel; // 90 ether\n        maxScaleRate = _maxScaleRate; // 100 ether\n    }\n\n    function toggleFunctionPause(\n        string memory funcId, // example: \"mint(uint256,uint256)\"\n        bool isPaused\n    ) public onlyAdmin {\n        // keccak256(\"iToken_FunctionPause\")\n        bytes32 slot = keccak256(\n            abi.encodePacked(\n                bytes4(keccak256(abi.encodePacked(funcId))),\n                uint256(\n                    0xd46a704bc285dbd6ff5ad3863506260b1df02812f4f857c8cc852317a6ac64f2\n                )\n            )\n        );\n        assembly {\n            sstore(slot, isPaused)\n        }\n    }\n\n    /**\n     * sets the transaction limit per token address\n     * @param addresses the token addresses\n     * @param limits the limit denominated in the currency of the token address\n     * */\n    function setTransactionLimits(\n        address[] memory addresses,\n        uint256[] memory limits\n    ) public onlyOwner {\n        require(addresses.length == limits.length, \"mismatched array lengths\");\n        for (uint256 i = 0; i < addresses.length; i++) {\n            transactionLimit[addresses[i]] = limits[i];\n        }\n        emit SetTransactionLimits(addresses, limits);\n    }\n}\n",
      "file": "LoanTokenSettingsLowerAdmin_Deployable.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x984e5dea0fd5f3021d5b73fa3f168e415b1cbcfd87e214f4e401ada19e6eaa7c",
    "blockNumber": 2742473,
    "transactionHash": "0x6034a134539795fcf32a9715024fbcc897a18a34083eeba5d9a6c757ebdb62a3",
    "timestamp": 1601478666
  }
}