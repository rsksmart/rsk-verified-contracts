{
    "address": "0xf730af26e87d9f55e46a6c447ed2235c385e55e0",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "LiquidityMiningProxy",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        }
    },
    "version": "0.5.17+commit.d19bba13",
    "source": "pragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n\t/**\n\t * @dev Returns the addition of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `+` operator.\n\t *\n\t * Requirements:\n\t * - Addition cannot overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t * - Subtraction cannot overflow.\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t * - Subtraction cannot overflow.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction sub(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `*` operator.\n\t *\n\t * Requirements:\n\t * - Multiplication cannot overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction div(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b != 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, rounding up and truncating the quotient\n\t */\n\tfunction divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn divCeil(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, rounding up and truncating the quotient\n\t */\n\tfunction divCeil(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b != 0, errorMessage);\n\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = ((a - 1) / b) + 1;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t */\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts with custom message when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction mod(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\trequire(b != 0, errorMessage);\n\t\treturn a % b;\n\t}\n\n\tfunction min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\t\treturn _a < _b ? _a : _b;\n\t}\n}\n/**\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\n\n\ncontract IERC20 {\n\tstring public name;\n\tuint8 public decimals;\n\tstring public symbol;\n\n\tfunction totalSupply() public view returns (uint256);\n\n\tfunction balanceOf(address _who) public view returns (uint256);\n\n\tfunction allowance(address _owner, address _spender) public view returns (uint256);\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool);\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\n\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _value\n\t) public returns (bool);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n\t// Empty internal constructor, to prevent people from mistakenly deploying\n\t// an instance of this contract, which should be used via inheritance.\n\tconstructor() internal {}\n\n\t// solhint-disable-previous-line no-empty-blocks\n\n\tfunction _msgSender() internal view returns (address payable) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view returns (bytes memory) {\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\t\treturn msg.data;\n\t}\n}\n\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20_ {\n\t/**\n\t * @dev Returns the amount of tokens in existence.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the amount of tokens owned by `account`.\n\t */\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Returns the remaining number of tokens that `spender` will be\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\t * zero by default.\n\t *\n\t * This value changes when {approve} or {transferFrom} are called.\n\t */\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t * that someone may use both the old and the new allowance by unfortunate\n\t * transaction ordering. One possible solution to mitigate this race\n\t * condition is to first reduce the spender's allowance to 0 and set the\n\t * desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\t * allowance mechanism. `amount` is then deducted from the caller's\n\t * allowance.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\t/**\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\t * another (`to`).\n\t *\n\t * Note that `value` may be zero.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\t * a call to {approve}. `value` is the new allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20_ {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) private _balances;\n\n\tmapping(address => mapping(address => uint256)) private _allowances;\n\n\tuint256 private _totalSupply;\n\n\t/**\n\t * @dev See {IERC20-totalSupply}.\n\t */\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n\t * @dev See {IERC20-balanceOf}.\n\t */\n\tfunction balanceOf(address account) public view returns (uint256) {\n\t\treturn _balances[account];\n\t}\n\n\t/**\n\t * @dev See {IERC20-transfer}.\n\t *\n\t * Requirements:\n\t *\n\t * - `recipient` cannot be the zero address.\n\t * - the caller must have a balance of at least `amount`.\n\t */\n\tfunction transfer(address recipient, uint256 amount) public returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev See {IERC20-allowance}.\n\t */\n\tfunction allowance(address owner, address spender) public view returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n\n\t/**\n\t * @dev See {IERC20-approve}.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction approve(address spender, uint256 amount) public returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev See {IERC20-transferFrom}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance. This is not\n\t * required by the EIP. See the note at the beginning of {ERC20};\n\t *\n\t * Requirements:\n\t * - `sender` and `recipient` cannot be the zero address.\n\t * - `sender` must have a balance of at least `amount`.\n\t * - the caller must have allowance for `sender`'s tokens of at least\n\t * `amount`.\n\t */\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) public returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\n\t *\n\t * This is an alternative to {approve} that can be used as a mitigation for\n\t * problems described in {IERC20-approve}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\n\t *\n\t * This is an alternative to {approve} that can be used as a mitigation for\n\t * problems described in {IERC20-approve}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t * - `spender` must have allowance for the caller of at least\n\t * `subtractedValue`.\n\t */\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n\t *\n\t * This is internal function is equivalent to {transfer}, and can be used to\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n\t *\n\t * Emits a {Transfer} event.\n\t *\n\t * Requirements:\n\t *\n\t * - `sender` cannot be the zero address.\n\t * - `recipient` cannot be the zero address.\n\t * - `sender` must have a balance of at least `amount`.\n\t */\n\tfunction _transfer(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) internal {\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\t\t_balances[recipient] = _balances[recipient].add(amount);\n\t\temit Transfer(sender, recipient, amount);\n\t}\n\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n\t * the total supply.\n\t *\n\t * Emits a {Transfer} event with `from` set to the zero address.\n\t *\n\t * Requirements\n\t *\n\t * - `to` cannot be the zero address.\n\t */\n\tfunction _mint(address account, uint256 amount) internal {\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\n\n\t\t_totalSupply = _totalSupply.add(amount);\n\t\t_balances[account] = _balances[account].add(amount);\n\t\temit Transfer(address(0), account, amount);\n\t}\n\n\t/**\n\t * @dev Destroys `amount` tokens from `account`, reducing the\n\t * total supply.\n\t *\n\t * Emits a {Transfer} event with `to` set to the zero address.\n\t *\n\t * Requirements\n\t *\n\t * - `account` cannot be the zero address.\n\t * - `account` must have at least `amount` tokens.\n\t */\n\tfunction _burn(address account, uint256 amount) internal {\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\n\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\temit Transfer(account, address(0), amount);\n\t}\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n\t *\n\t * This is internal function is equivalent to `approve`, and can be used to\n\t * e.g. set automatic allowances for certain subsystems, etc.\n\t *\n\t * Emits an {Approval} event.\n\t *\n\t * Requirements:\n\t *\n\t * - `owner` cannot be the zero address.\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction _approve(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 amount\n\t) internal {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\t/**\n\t * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n\t * from the caller's allowance.\n\t *\n\t * See {_burn} and {_approve}.\n\t */\n\tfunction _burnFrom(address account, uint256 amount) internal {\n\t\t_burn(account, amount);\n\t\t_approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n\t}\n}\n\n\n\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n\t/**\n\t * @dev Returns true if `account` is a contract.\n\t *\n\t * [IMPORTANT]\n\t * ====\n\t * It is unsafe to assume that an address for which this function returns\n\t * false is an externally-owned account (EOA) and not a contract.\n\t *\n\t * Among others, `isContract` will return false for the following\n\t * types of addresses:\n\t *\n\t *  - an externally-owned account\n\t *  - a contract in construction\n\t *  - an address where a contract will be created\n\t *  - an address where a contract lived, but was destroyed\n\t * ====\n\t */\n\tfunction isContract(address account) internal view returns (bool) {\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\t\t// for accounts without code, i.e. `keccak256('')`\n\t\tbytes32 codehash;\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\t\t// solhint-disable-next-line no-inline-assembly\n\t\tassembly {\n\t\t\tcodehash := extcodehash(account)\n\t\t}\n\t\treturn (codehash != accountHash && codehash != 0x0);\n\t}\n\n\t/**\n\t * @dev Converts an `address` into `address payable`. Note that this is\n\t * simply a type cast: the actual underlying value is not changed.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction toPayable(address account) internal pure returns (address payable) {\n\t\treturn address(uint160(account));\n\t}\n\n\t/**\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n\t * `recipient`, forwarding all available gas and reverting on errors.\n\t *\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n\t * imposed by `transfer`, making them unable to receive funds via\n\t * `transfer`. {sendValue} removes this limitation.\n\t *\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n\t *\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\n\t * taken to not create reentrancy vulnerabilities. Consider using\n\t * {ReentrancyGuard} or the\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\n\t *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction sendValue(address recipient, uint256 amount) internal {\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\t\t// solhint-disable-next-line avoid-call-value\n\t\t(bool success, ) = recipient.call.value(amount)(\"\");\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\n\t}\n}\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tfunction safeTransfer(\n\t\tIERC20 token,\n\t\taddress to,\n\t\tuint256 value\n\t) internal {\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n\t}\n\n\tfunction safeTransferFrom(\n\t\tIERC20 token,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t) internal {\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n\t}\n\n\tfunction safeApprove(\n\t\tIERC20 token,\n\t\taddress spender,\n\t\tuint256 value\n\t) internal {\n\t\t// safeApprove should only be called when setting an initial allowance,\n\t\t// or when resetting it to zero. To increase and decrease it, use\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n\t}\n\n\tfunction safeIncreaseAllowance(\n\t\tIERC20 token,\n\t\taddress spender,\n\t\tuint256 value\n\t) internal {\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n\t}\n\n\tfunction safeDecreaseAllowance(\n\t\tIERC20 token,\n\t\taddress spender,\n\t\tuint256 value\n\t) internal {\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n\t}\n\n\t/**\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\n\t * @param token The token targeted by the call.\n\t * @param data The call data (encoded using abi.encode or one of its variants).\n\t */\n\tfunction callOptionalReturn(IERC20 token, bytes memory data) private {\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\t\t// we're implementing it ourselves.\n\n\t\t// A Solidity high level call has three parts:\n\t\t//  1. The target address is checked to verify it contains contract code\n\t\t//  2. The call itself is made, and success asserted\n\t\t//  3. The return value is decoded, which in turn checks the size of the returned data.\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\t\t// solhint-disable-next-line avoid-low-level-calls\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\n\t\trequire(success, \"SafeERC20: low-level call failed\");\n\n\t\tif (returndata.length > 0) {\n\t\t\t// Return data is optional\n\t\t\t// solhint-disable-next-line max-line-length\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\t\t}\n\t}\n}\n\n\n\n\n/**\n *  @title The Locked SOV Interface.\n *  @author Franklin Richards - powerhousefrank@protonmail.com\n *  @notice This interface is an incomplete yet useful for future migration of LockedSOV Contract.\n *  @dev Only use it if you know what you are doing.\n */\ninterface ILockedSOV {\n\t/**\n\t * @notice Adds SOV to the user balance (Locked and Unlocked Balance based on `_basisPoint`).\n\t * @param _userAddress The user whose locked balance has to be updated with `_sovAmount`.\n\t * @param _sovAmount The amount of SOV to be added to the locked and/or unlocked balance.\n\t * @param _basisPoint The % (in Basis Point)which determines how much will be unlocked immediately.\n\t */\n\tfunction deposit(\n\t\taddress _userAddress,\n\t\tuint256 _sovAmount,\n\t\tuint256 _basisPoint\n\t) external;\n\n\t/**\n\t * @notice Adds SOV to the locked balance of a user.\n\t * @param _userAddress The user whose locked balance has to be updated with _sovAmount.\n\t * @param _sovAmount The amount of SOV to be added to the locked balance.\n\t */\n\tfunction depositSOV(address _userAddress, uint256 _sovAmount) external;\n\n\t/**\n\t * @notice Withdraws unlocked tokens and Stakes Locked tokens for a user who already have a vesting created.\n\t * @param _userAddress The address of user tokens will be withdrawn.\n\t */\n\tfunction withdrawAndStakeTokensFrom(address _userAddress) external;\n}\n\n\n\n\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @dev Initializes the contract setting the deployer as the initial owner.\n\t */\n\tconstructor() internal {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\t/**\n\t * @dev Returns the address of the current owner.\n\t */\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(isOwner(), \"unauthorized\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Returns true if the caller is the current owner.\n\t */\n\tfunction isOwner() public view returns (bool) {\n\t\treturn _msgSender() == _owner;\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t * Can only be called by the current owner.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\t_transferOwnership(newOwner);\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t */\n\tfunction _transferOwnership(address newOwner) internal {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\temit OwnershipTransferred(_owner, newOwner);\n\t\t_owner = newOwner;\n\t}\n}\n\n\ncontract AdminRole is Ownable {\n\n    /// @dev user => flag whether user has admin role.\n    mapping(address => bool) public admins;\n\n    event AdminAdded(address admin);\n    event AdminRemoved(address admin);\n\n    /**\n     * @dev Throws if called by any account other than the owner or admin.\n     * or on our own overriding sovrynOwnable.\n     */\n    modifier onlyAuthorized() {\n        require(isOwner() || admins[msg.sender], \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @notice Add account to ACL.\n     * @param _admin The addresses of the account to grant permissions.\n     * */\n    function addAdmin(address _admin) public onlyOwner {\n        admins[_admin] = true;\n        emit AdminAdded(_admin);\n    }\n\n    /**\n     * @notice Remove account from ACL.\n     * @param _admin The addresses of the account to revoke permissions.\n     * */\n    function removeAdmin(address _admin) public onlyOwner {\n        admins[_admin] = false;\n        emit AdminRemoved(_admin);\n    }\n\n}\n\ncontract LiquidityMiningStorage is AdminRole {\n\t// Info of each user.\n\tstruct UserInfo {\n\t\tuint256 amount; // How many pool tokens the user has provided.\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\n\t\tuint256 accumulatedReward; //Reward that's ready to be transferred\n\t\t//\n\t\t// We do some fancy math here. Basically, any point in time, the amount of reward tokens\n\t\t// entitled to a user but is accumulated to be distributed is:\n\t\t//\n\t\t//   accumulated reward = (user.amount * pool.accumulatedRewardPerShare) - user.rewardDebt\n\t\t//\n\t\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n\t\t//   1. The pool's `accumulatedRewardPerShare` (and `lastRewardBlock`) gets updated.\n\t\t//   2. User receives the accumulated reward sent to his/her address.\n\t\t//   3. User's `amount` gets updated.\n\t\t//   4. User's `rewardDebt` gets updated.\n\t}\n\n\t// Info of each pool.\n\tstruct PoolInfo {\n\t\tIERC20 poolToken; // Address of LP token contract.\n\t\tuint96 allocationPoint; // How many allocation points assigned to this pool. Amount of reward tokens to distribute per block.\n\t\tuint256 lastRewardBlock; // Last block number that reward tokens distribution occurs.\n\t\tuint256 accumulatedRewardPerShare; // Accumulated amount of reward tokens per share, times 1e12. See below.\n\t}\n\n\t// SVR tokens created per block.\n\tuint256 public rewardTokensPerBlock;\n\t// The block number when reward token mining starts.\n\tuint256 public startBlock;\n\t// Block number when bonus reward token period ends.\n\tuint256 public bonusEndBlock;\n\t// Block number when eward token period ends.\n\tuint256 public endBlock;\n\n\t//Wrapper contract which will be a proxy between user and LM\n\taddress public wrapper;\n\n\t// Info of each pool.\n\tPoolInfo[] public poolInfoList;\n\t// Mapping pool token address => pool id\n\tmapping(address => uint256) poolIdList;\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\n\tuint256 public totalAllocationPoint;\n\n\t// Info of each user that stakes LP tokens.\n\tmapping(uint256 => mapping(address => UserInfo)) public userInfoMap;\n\t// Total balance this contract should have to handle withdrawal for all users\n\tuint256 public totalUsersBalance;\n\n\t/// @dev The SOV token\n\tIERC20 public SOV;\n\n\t/// @dev The locked vault contract to deposit LP's rewards into.\n\tILockedSOV public lockedSOV;\n\n\t// The % which determines how much will be unlocked immediately.\n\t/// @dev 10000 is 100%\n\tuint256 public unlockedImmediatelyPercent;\n}\n\n\n\n\n\n/**\n * @title Base Proxy contract.\n * @notice The proxy performs delegated calls to the contract implementation\n * it is pointing to. This way upgradable contracts are possible on blockchain.\n *\n * Delegating proxy contracts are widely used for both upgradeability and gas\n * savings. These proxies rely on a logic contract (also known as implementation\n * contract or master copy) that is called using delegatecall. This allows\n * proxies to keep a persistent state (storage and balance) while the code is\n * delegated to the logic contract.\n *\n * Proxy contract is meant to be inherited and its internal functions\n * _setImplementation and _setProxyOwner to be called when upgrades become\n * neccessary.\n *\n * The loan token (iToken) contract as well as the protocol contract act as\n * proxies, delegating all calls to underlying contracts. Therefore, if you\n * want to interact with them using web3, you need to use the ABIs from the\n * contracts containing the actual logic or the interface contract.\n *   ABI for LoanToken contracts: LoanTokenLogicStandard\n *   ABI for Protocol contract: ISovryn\n *\n * @dev UpgradableProxy is the contract that inherits Proxy and wraps these\n * functions.\n * */\ncontract Proxy {\n\tbytes32 private constant KEY_IMPLEMENTATION = keccak256(\"key.implementation\");\n\tbytes32 private constant KEY_OWNER = keccak256(\"key.proxy.owner\");\n\n\tevent OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);\n\tevent ImplementationChanged(address indexed _oldImplementation, address indexed _newImplementation);\n\n\t/**\n\t * @notice Set sender as an owner.\n\t * */\n\tconstructor() public {\n\t\t_setProxyOwner(msg.sender);\n\t}\n\n\t/**\n\t * @notice Throw error if called not by an owner.\n\t * */\n\tmodifier onlyProxyOwner() {\n\t\trequire(msg.sender == getProxyOwner(), \"Proxy:: access denied\");\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Set address of the implementation.\n\t * @param _implementation Address of the implementation.\n\t * */\n\tfunction _setImplementation(address _implementation) internal {\n\t\trequire(_implementation != address(0), \"Proxy::setImplementation: invalid address\");\n\t\temit ImplementationChanged(getImplementation(), _implementation);\n\n\t\tbytes32 key = KEY_IMPLEMENTATION;\n\t\tassembly {\n\t\t\tsstore(key, _implementation)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Return address of the implementation.\n\t * @return Address of the implementation.\n\t * */\n\tfunction getImplementation() public view returns (address _implementation) {\n\t\tbytes32 key = KEY_IMPLEMENTATION;\n\t\tassembly {\n\t\t\t_implementation := sload(key)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Set address of the owner.\n\t * @param _owner Address of the owner.\n\t * */\n\tfunction _setProxyOwner(address _owner) internal {\n\t\trequire(_owner != address(0), \"Proxy::setProxyOwner: invalid address\");\n\t\temit OwnershipTransferred(getProxyOwner(), _owner);\n\n\t\tbytes32 key = KEY_OWNER;\n\t\tassembly {\n\t\t\tsstore(key, _owner)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Return address of the owner.\n\t * @return Address of the owner.\n\t * */\n\tfunction getProxyOwner() public view returns (address _owner) {\n\t\tbytes32 key = KEY_OWNER;\n\t\tassembly {\n\t\t\t_owner := sload(key)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Fallback function performs a delegate call\n\t * to the actual implementation address is pointing this proxy.\n\t * Returns whatever the implementation call returns.\n\t * */\n\tfunction() external payable {\n\t\taddress implementation = getImplementation();\n\t\trequire(implementation != address(0), \"Proxy::(): implementation not found\");\n\n\t\tassembly {\n\t\t\tlet pointer := mload(0x40)\n\t\t\tcalldatacopy(pointer, 0, calldatasize)\n\t\t\tlet result := delegatecall(gas, implementation, pointer, calldatasize, 0, 0)\n\t\t\tlet size := returndatasize\n\t\t\treturndatacopy(pointer, 0, size)\n\n\t\t\tswitch result\n\t\t\t\tcase 0 {\n\t\t\t\t\trevert(pointer, size)\n\t\t\t\t}\n\t\t\t\tdefault {\n\t\t\t\t\treturn(pointer, size)\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @title Upgradable Proxy contract.\n * @notice A disadvantage of the immutable ledger is that nobody can change the\n * source code of a smart contract after it’s been deployed. In order to fix\n * bugs or introduce new features, smart contracts need to be upgradable somehow.\n *\n * Although it is not possible to upgrade the code of an already deployed smart\n * contract, it is possible to set-up a proxy contract architecture that will\n * allow to use new deployed contracts as if the main logic had been upgraded.\n *\n * A proxy architecture pattern is such that all message calls go through a\n * Proxy contract that will redirect them to the latest deployed contract logic.\n * To upgrade, a new version of the contract is deployed, and the Proxy is\n * updated to reference the new contract address.\n * */\ncontract UpgradableProxy is Proxy {\n\t/**\n\t * @notice Set address of the implementation.\n\t * @dev Wrapper for _setImplementation that exposes the function\n\t * as public for owner to be able to set a new version of the\n\t * contract as current pointing implementation.\n\t * @param _implementation Address of the implementation.\n\t * */\n\tfunction setImplementation(address _implementation) public onlyProxyOwner {\n\t\t_setImplementation(_implementation);\n\t}\n\n\t/**\n\t * @notice Set address of the owner.\n\t * @param _owner Address of the owner.\n\t * */\n\tfunction setProxyOwner(address _owner) public onlyProxyOwner {\n\t\t_setProxyOwner(_owner);\n\t}\n}\n\n\n/**\n * @dev LiquidityMining contract should be upgradable, use UpgradableProxy\n */\ncontract LiquidityMiningProxy is LiquidityMiningStorage, UpgradableProxy {\n\n}\n\n\n\n",
    "imports": [
        {
            "name": "LiquidityMiningProxy.sol",
            "contents": "pragma solidity >=0.5.0 <0.6.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n\t/**\n\t * @dev Returns the addition of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `+` operator.\n\t *\n\t * Requirements:\n\t * - Addition cannot overflow.\n\t */\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\trequire(c >= a, \"SafeMath: addition overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t * - Subtraction cannot overflow.\n\t */\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn sub(a, b, \"SafeMath: subtraction overflow\");\n\t}\n\n\t/**\n\t * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n\t * overflow (when the result is negative).\n\t *\n\t * Counterpart to Solidity's `-` operator.\n\t *\n\t * Requirements:\n\t * - Subtraction cannot overflow.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction sub(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\trequire(b <= a, errorMessage);\n\t\tuint256 c = a - b;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the multiplication of two unsigned integers, reverting on\n\t * overflow.\n\t *\n\t * Counterpart to Solidity's `*` operator.\n\t *\n\t * Requirements:\n\t * - Multiplication cannot overflow.\n\t */\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t\t// benefit is lost if 'b' is also tested.\n\t\t// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tuint256 c = a * b;\n\t\trequire(c / a == b, \"SafeMath: multiplication overflow\");\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t */\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn div(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n\t * division by zero. The result is rounded towards zero.\n\t *\n\t * Counterpart to Solidity's `/` operator. Note: this function uses a\n\t * `revert` opcode (which leaves remaining gas untouched) while Solidity\n\t * uses an invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction div(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b != 0, errorMessage);\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, rounding up and truncating the quotient\n\t */\n\tfunction divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn divCeil(a, b, \"SafeMath: division by zero\");\n\t}\n\n\t/**\n\t * @dev Integer division of two numbers, rounding up and truncating the quotient\n\t */\n\tfunction divCeil(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\t// Solidity only automatically asserts when dividing by 0\n\t\trequire(b != 0, errorMessage);\n\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = ((a - 1) / b) + 1;\n\n\t\treturn c;\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t */\n\tfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn mod(a, b, \"SafeMath: modulo by zero\");\n\t}\n\n\t/**\n\t * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n\t * Reverts with custom message when dividing by zero.\n\t *\n\t * Counterpart to Solidity's `%` operator. This function uses a `revert`\n\t * opcode (which leaves remaining gas untouched) while Solidity uses an\n\t * invalid opcode to revert (consuming all remaining gas).\n\t *\n\t * Requirements:\n\t * - The divisor cannot be zero.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction mod(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tstring memory errorMessage\n\t) internal pure returns (uint256) {\n\t\trequire(b != 0, errorMessage);\n\t\treturn a % b;\n\t}\n\n\tfunction min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\t\treturn _a < _b ? _a : _b;\n\t}\n}\n/**\n * Copyright 2017-2021, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\n\n\ncontract IERC20 {\n\tstring public name;\n\tuint8 public decimals;\n\tstring public symbol;\n\n\tfunction totalSupply() public view returns (uint256);\n\n\tfunction balanceOf(address _who) public view returns (uint256);\n\n\tfunction allowance(address _owner, address _spender) public view returns (uint256);\n\n\tfunction approve(address _spender, uint256 _value) public returns (bool);\n\n\tfunction transfer(address _to, uint256 _value) public returns (bool);\n\n\tfunction transferFrom(\n\t\taddress _from,\n\t\taddress _to,\n\t\tuint256 _value\n\t) public returns (bool);\n\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n\n\n\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n\t// Empty internal constructor, to prevent people from mistakenly deploying\n\t// an instance of this contract, which should be used via inheritance.\n\tconstructor() internal {}\n\n\t// solhint-disable-previous-line no-empty-blocks\n\n\tfunction _msgSender() internal view returns (address payable) {\n\t\treturn msg.sender;\n\t}\n\n\tfunction _msgData() internal view returns (bytes memory) {\n\t\tthis; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n\t\treturn msg.data;\n\t}\n}\n\n\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20_ {\n\t/**\n\t * @dev Returns the amount of tokens in existence.\n\t */\n\tfunction totalSupply() external view returns (uint256);\n\n\t/**\n\t * @dev Returns the amount of tokens owned by `account`.\n\t */\n\tfunction balanceOf(address account) external view returns (uint256);\n\n\t/**\n\t * @dev Moves `amount` tokens from the caller's account to `recipient`.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transfer(address recipient, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Returns the remaining number of tokens that `spender` will be\n\t * allowed to spend on behalf of `owner` through {transferFrom}. This is\n\t * zero by default.\n\t *\n\t * This value changes when {approve} or {transferFrom} are called.\n\t */\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * IMPORTANT: Beware that changing an allowance with this method brings the risk\n\t * that someone may use both the old and the new allowance by unfortunate\n\t * transaction ordering. One possible solution to mitigate this race\n\t * condition is to first reduce the spender's allowance to 0 and set the\n\t * desired value afterwards:\n\t * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t *\n\t * Emits an {Approval} event.\n\t */\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\t/**\n\t * @dev Moves `amount` tokens from `sender` to `recipient` using the\n\t * allowance mechanism. `amount` is then deducted from the caller's\n\t * allowance.\n\t *\n\t * Returns a boolean value indicating whether the operation succeeded.\n\t *\n\t * Emits a {Transfer} event.\n\t */\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\t/**\n\t * @dev Emitted when `value` tokens are moved from one account (`from`) to\n\t * another (`to`).\n\t *\n\t * Note that `value` may be zero.\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\t/**\n\t * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n\t * a call to {approve}. `value` is the new allowance.\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20_ {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) private _balances;\n\n\tmapping(address => mapping(address => uint256)) private _allowances;\n\n\tuint256 private _totalSupply;\n\n\t/**\n\t * @dev See {IERC20-totalSupply}.\n\t */\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _totalSupply;\n\t}\n\n\t/**\n\t * @dev See {IERC20-balanceOf}.\n\t */\n\tfunction balanceOf(address account) public view returns (uint256) {\n\t\treturn _balances[account];\n\t}\n\n\t/**\n\t * @dev See {IERC20-transfer}.\n\t *\n\t * Requirements:\n\t *\n\t * - `recipient` cannot be the zero address.\n\t * - the caller must have a balance of at least `amount`.\n\t */\n\tfunction transfer(address recipient, uint256 amount) public returns (bool) {\n\t\t_transfer(_msgSender(), recipient, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev See {IERC20-allowance}.\n\t */\n\tfunction allowance(address owner, address spender) public view returns (uint256) {\n\t\treturn _allowances[owner][spender];\n\t}\n\n\t/**\n\t * @dev See {IERC20-approve}.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction approve(address spender, uint256 amount) public returns (bool) {\n\t\t_approve(_msgSender(), spender, amount);\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev See {IERC20-transferFrom}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance. This is not\n\t * required by the EIP. See the note at the beginning of {ERC20};\n\t *\n\t * Requirements:\n\t * - `sender` and `recipient` cannot be the zero address.\n\t * - `sender` must have a balance of at least `amount`.\n\t * - the caller must have allowance for `sender`'s tokens of at least\n\t * `amount`.\n\t */\n\tfunction transferFrom(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) public returns (bool) {\n\t\t_transfer(sender, recipient, amount);\n\t\t_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Atomically increases the allowance granted to `spender` by the caller.\n\t *\n\t * This is an alternative to {approve} that can be used as a mitigation for\n\t * problems described in {IERC20-approve}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Atomically decreases the allowance granted to `spender` by the caller.\n\t *\n\t * This is an alternative to {approve} that can be used as a mitigation for\n\t * problems described in {IERC20-approve}.\n\t *\n\t * Emits an {Approval} event indicating the updated allowance.\n\t *\n\t * Requirements:\n\t *\n\t * - `spender` cannot be the zero address.\n\t * - `spender` must have allowance for the caller of at least\n\t * `subtractedValue`.\n\t */\n\tfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n\t\t_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n\t\treturn true;\n\t}\n\n\t/**\n\t * @dev Moves tokens `amount` from `sender` to `recipient`.\n\t *\n\t * This is internal function is equivalent to {transfer}, and can be used to\n\t * e.g. implement automatic token fees, slashing mechanisms, etc.\n\t *\n\t * Emits a {Transfer} event.\n\t *\n\t * Requirements:\n\t *\n\t * - `sender` cannot be the zero address.\n\t * - `recipient` cannot be the zero address.\n\t * - `sender` must have a balance of at least `amount`.\n\t */\n\tfunction _transfer(\n\t\taddress sender,\n\t\taddress recipient,\n\t\tuint256 amount\n\t) internal {\n\t\trequire(sender != address(0), \"ERC20: transfer from the zero address\");\n\t\trequire(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n\t\t_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n\t\t_balances[recipient] = _balances[recipient].add(amount);\n\t\temit Transfer(sender, recipient, amount);\n\t}\n\n\t/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n\t * the total supply.\n\t *\n\t * Emits a {Transfer} event with `from` set to the zero address.\n\t *\n\t * Requirements\n\t *\n\t * - `to` cannot be the zero address.\n\t */\n\tfunction _mint(address account, uint256 amount) internal {\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\n\n\t\t_totalSupply = _totalSupply.add(amount);\n\t\t_balances[account] = _balances[account].add(amount);\n\t\temit Transfer(address(0), account, amount);\n\t}\n\n\t/**\n\t * @dev Destroys `amount` tokens from `account`, reducing the\n\t * total supply.\n\t *\n\t * Emits a {Transfer} event with `to` set to the zero address.\n\t *\n\t * Requirements\n\t *\n\t * - `account` cannot be the zero address.\n\t * - `account` must have at least `amount` tokens.\n\t */\n\tfunction _burn(address account, uint256 amount) internal {\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\n\n\t\t_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n\t\t_totalSupply = _totalSupply.sub(amount);\n\t\temit Transfer(account, address(0), amount);\n\t}\n\n\t/**\n\t * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n\t *\n\t * This is internal function is equivalent to `approve`, and can be used to\n\t * e.g. set automatic allowances for certain subsystems, etc.\n\t *\n\t * Emits an {Approval} event.\n\t *\n\t * Requirements:\n\t *\n\t * - `owner` cannot be the zero address.\n\t * - `spender` cannot be the zero address.\n\t */\n\tfunction _approve(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 amount\n\t) internal {\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\n\n\t\t_allowances[owner][spender] = amount;\n\t\temit Approval(owner, spender, amount);\n\t}\n\n\t/**\n\t * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n\t * from the caller's allowance.\n\t *\n\t * See {_burn} and {_approve}.\n\t */\n\tfunction _burnFrom(address account, uint256 amount) internal {\n\t\t_burn(account, amount);\n\t\t_approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n\t}\n}\n\n\n\n\n\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n\t/**\n\t * @dev Returns true if `account` is a contract.\n\t *\n\t * [IMPORTANT]\n\t * ====\n\t * It is unsafe to assume that an address for which this function returns\n\t * false is an externally-owned account (EOA) and not a contract.\n\t *\n\t * Among others, `isContract` will return false for the following\n\t * types of addresses:\n\t *\n\t *  - an externally-owned account\n\t *  - a contract in construction\n\t *  - an address where a contract will be created\n\t *  - an address where a contract lived, but was destroyed\n\t * ====\n\t */\n\tfunction isContract(address account) internal view returns (bool) {\n\t\t// According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n\t\t// and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n\t\t// for accounts without code, i.e. `keccak256('')`\n\t\tbytes32 codehash;\n\t\tbytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n\t\t// solhint-disable-next-line no-inline-assembly\n\t\tassembly {\n\t\t\tcodehash := extcodehash(account)\n\t\t}\n\t\treturn (codehash != accountHash && codehash != 0x0);\n\t}\n\n\t/**\n\t * @dev Converts an `address` into `address payable`. Note that this is\n\t * simply a type cast: the actual underlying value is not changed.\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction toPayable(address account) internal pure returns (address payable) {\n\t\treturn address(uint160(account));\n\t}\n\n\t/**\n\t * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n\t * `recipient`, forwarding all available gas and reverting on errors.\n\t *\n\t * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n\t * of certain opcodes, possibly making contracts go over the 2300 gas limit\n\t * imposed by `transfer`, making them unable to receive funds via\n\t * `transfer`. {sendValue} removes this limitation.\n\t *\n\t * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n\t *\n\t * IMPORTANT: because control is transferred to `recipient`, care must be\n\t * taken to not create reentrancy vulnerabilities. Consider using\n\t * {ReentrancyGuard} or the\n\t * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html\n\t *   #use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n\t *\n\t * _Available since v2.4.0._\n\t */\n\tfunction sendValue(address recipient, uint256 amount) internal {\n\t\trequire(address(this).balance >= amount, \"Address: insufficient balance\");\n\n\t\t// solhint-disable-next-line avoid-call-value\n\t\t(bool success, ) = recipient.call.value(amount)(\"\");\n\t\trequire(success, \"Address: unable to send value, recipient may have reverted\");\n\t}\n}\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n\tusing SafeMath for uint256;\n\tusing Address for address;\n\n\tfunction safeTransfer(\n\t\tIERC20 token,\n\t\taddress to,\n\t\tuint256 value\n\t) internal {\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n\t}\n\n\tfunction safeTransferFrom(\n\t\tIERC20 token,\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t) internal {\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n\t}\n\n\tfunction safeApprove(\n\t\tIERC20 token,\n\t\taddress spender,\n\t\tuint256 value\n\t) internal {\n\t\t// safeApprove should only be called when setting an initial allowance,\n\t\t// or when resetting it to zero. To increase and decrease it, use\n\t\t// 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire((value == 0) || (token.allowance(address(this), spender) == 0), \"SafeERC20: approve from non-zero to non-zero allowance\");\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n\t}\n\n\tfunction safeIncreaseAllowance(\n\t\tIERC20 token,\n\t\taddress spender,\n\t\tuint256 value\n\t) internal {\n\t\tuint256 newAllowance = token.allowance(address(this), spender).add(value);\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n\t}\n\n\tfunction safeDecreaseAllowance(\n\t\tIERC20 token,\n\t\taddress spender,\n\t\tuint256 value\n\t) internal {\n\t\tuint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n\t\tcallOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n\t}\n\n\t/**\n\t * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n\t * on the return value: the return value is optional (but if data is returned, it must not be false).\n\t * @param token The token targeted by the call.\n\t * @param data The call data (encoded using abi.encode or one of its variants).\n\t */\n\tfunction callOptionalReturn(IERC20 token, bytes memory data) private {\n\t\t// We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n\t\t// we're implementing it ourselves.\n\n\t\t// A Solidity high level call has three parts:\n\t\t//  1. The target address is checked to verify it contains contract code\n\t\t//  2. The call itself is made, and success asserted\n\t\t//  3. The return value is decoded, which in turn checks the size of the returned data.\n\t\t// solhint-disable-next-line max-line-length\n\t\trequire(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n\t\t// solhint-disable-next-line avoid-low-level-calls\n\t\t(bool success, bytes memory returndata) = address(token).call(data);\n\t\trequire(success, \"SafeERC20: low-level call failed\");\n\n\t\tif (returndata.length > 0) {\n\t\t\t// Return data is optional\n\t\t\t// solhint-disable-next-line max-line-length\n\t\t\trequire(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n\t\t}\n\t}\n}\n\n\n\n\n/**\n *  @title The Locked SOV Interface.\n *  @author Franklin Richards - powerhousefrank@protonmail.com\n *  @notice This interface is an incomplete yet useful for future migration of LockedSOV Contract.\n *  @dev Only use it if you know what you are doing.\n */\ninterface ILockedSOV {\n\t/**\n\t * @notice Adds SOV to the user balance (Locked and Unlocked Balance based on `_basisPoint`).\n\t * @param _userAddress The user whose locked balance has to be updated with `_sovAmount`.\n\t * @param _sovAmount The amount of SOV to be added to the locked and/or unlocked balance.\n\t * @param _basisPoint The % (in Basis Point)which determines how much will be unlocked immediately.\n\t */\n\tfunction deposit(\n\t\taddress _userAddress,\n\t\tuint256 _sovAmount,\n\t\tuint256 _basisPoint\n\t) external;\n\n\t/**\n\t * @notice Adds SOV to the locked balance of a user.\n\t * @param _userAddress The user whose locked balance has to be updated with _sovAmount.\n\t * @param _sovAmount The amount of SOV to be added to the locked balance.\n\t */\n\tfunction depositSOV(address _userAddress, uint256 _sovAmount) external;\n\n\t/**\n\t * @notice Withdraws unlocked tokens and Stakes Locked tokens for a user who already have a vesting created.\n\t * @param _userAddress The address of user tokens will be withdrawn.\n\t */\n\tfunction withdrawAndStakeTokensFrom(address _userAddress) external;\n}\n\n\n\n\n\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n\taddress private _owner;\n\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\t/**\n\t * @dev Initializes the contract setting the deployer as the initial owner.\n\t */\n\tconstructor() internal {\n\t\taddress msgSender = _msgSender();\n\t\t_owner = msgSender;\n\t\temit OwnershipTransferred(address(0), msgSender);\n\t}\n\n\t/**\n\t * @dev Returns the address of the current owner.\n\t */\n\tfunction owner() public view returns (address) {\n\t\treturn _owner;\n\t}\n\n\t/**\n\t * @dev Throws if called by any account other than the owner.\n\t */\n\tmodifier onlyOwner() {\n\t\trequire(isOwner(), \"unauthorized\");\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Returns true if the caller is the current owner.\n\t */\n\tfunction isOwner() public view returns (bool) {\n\t\treturn _msgSender() == _owner;\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t * Can only be called by the current owner.\n\t */\n\tfunction transferOwnership(address newOwner) public onlyOwner {\n\t\t_transferOwnership(newOwner);\n\t}\n\n\t/**\n\t * @dev Transfers ownership of the contract to a new account (`newOwner`).\n\t */\n\tfunction _transferOwnership(address newOwner) internal {\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\n\t\temit OwnershipTransferred(_owner, newOwner);\n\t\t_owner = newOwner;\n\t}\n}\n\n\ncontract AdminRole is Ownable {\n\n    /// @dev user => flag whether user has admin role.\n    mapping(address => bool) public admins;\n\n    event AdminAdded(address admin);\n    event AdminRemoved(address admin);\n\n    /**\n     * @dev Throws if called by any account other than the owner or admin.\n     * or on our own overriding sovrynOwnable.\n     */\n    modifier onlyAuthorized() {\n        require(isOwner() || admins[msg.sender], \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @notice Add account to ACL.\n     * @param _admin The addresses of the account to grant permissions.\n     * */\n    function addAdmin(address _admin) public onlyOwner {\n        admins[_admin] = true;\n        emit AdminAdded(_admin);\n    }\n\n    /**\n     * @notice Remove account from ACL.\n     * @param _admin The addresses of the account to revoke permissions.\n     * */\n    function removeAdmin(address _admin) public onlyOwner {\n        admins[_admin] = false;\n        emit AdminRemoved(_admin);\n    }\n\n}\n\ncontract LiquidityMiningStorage is AdminRole {\n\t// Info of each user.\n\tstruct UserInfo {\n\t\tuint256 amount; // How many pool tokens the user has provided.\n\t\tuint256 rewardDebt; // Reward debt. See explanation below.\n\t\tuint256 accumulatedReward; //Reward that's ready to be transferred\n\t\t//\n\t\t// We do some fancy math here. Basically, any point in time, the amount of reward tokens\n\t\t// entitled to a user but is accumulated to be distributed is:\n\t\t//\n\t\t//   accumulated reward = (user.amount * pool.accumulatedRewardPerShare) - user.rewardDebt\n\t\t//\n\t\t// Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n\t\t//   1. The pool's `accumulatedRewardPerShare` (and `lastRewardBlock`) gets updated.\n\t\t//   2. User receives the accumulated reward sent to his/her address.\n\t\t//   3. User's `amount` gets updated.\n\t\t//   4. User's `rewardDebt` gets updated.\n\t}\n\n\t// Info of each pool.\n\tstruct PoolInfo {\n\t\tIERC20 poolToken; // Address of LP token contract.\n\t\tuint96 allocationPoint; // How many allocation points assigned to this pool. Amount of reward tokens to distribute per block.\n\t\tuint256 lastRewardBlock; // Last block number that reward tokens distribution occurs.\n\t\tuint256 accumulatedRewardPerShare; // Accumulated amount of reward tokens per share, times 1e12. See below.\n\t}\n\n\t// SVR tokens created per block.\n\tuint256 public rewardTokensPerBlock;\n\t// The block number when reward token mining starts.\n\tuint256 public startBlock;\n\t// Block number when bonus reward token period ends.\n\tuint256 public bonusEndBlock;\n\t// Block number when eward token period ends.\n\tuint256 public endBlock;\n\n\t//Wrapper contract which will be a proxy between user and LM\n\taddress public wrapper;\n\n\t// Info of each pool.\n\tPoolInfo[] public poolInfoList;\n\t// Mapping pool token address => pool id\n\tmapping(address => uint256) poolIdList;\n\t// Total allocation points. Must be the sum of all allocation points in all pools.\n\tuint256 public totalAllocationPoint;\n\n\t// Info of each user that stakes LP tokens.\n\tmapping(uint256 => mapping(address => UserInfo)) public userInfoMap;\n\t// Total balance this contract should have to handle withdrawal for all users\n\tuint256 public totalUsersBalance;\n\n\t/// @dev The SOV token\n\tIERC20 public SOV;\n\n\t/// @dev The locked vault contract to deposit LP's rewards into.\n\tILockedSOV public lockedSOV;\n\n\t// The % which determines how much will be unlocked immediately.\n\t/// @dev 10000 is 100%\n\tuint256 public unlockedImmediatelyPercent;\n}\n\n\n\n\n\n/**\n * @title Base Proxy contract.\n * @notice The proxy performs delegated calls to the contract implementation\n * it is pointing to. This way upgradable contracts are possible on blockchain.\n *\n * Delegating proxy contracts are widely used for both upgradeability and gas\n * savings. These proxies rely on a logic contract (also known as implementation\n * contract or master copy) that is called using delegatecall. This allows\n * proxies to keep a persistent state (storage and balance) while the code is\n * delegated to the logic contract.\n *\n * Proxy contract is meant to be inherited and its internal functions\n * _setImplementation and _setProxyOwner to be called when upgrades become\n * neccessary.\n *\n * The loan token (iToken) contract as well as the protocol contract act as\n * proxies, delegating all calls to underlying contracts. Therefore, if you\n * want to interact with them using web3, you need to use the ABIs from the\n * contracts containing the actual logic or the interface contract.\n *   ABI for LoanToken contracts: LoanTokenLogicStandard\n *   ABI for Protocol contract: ISovryn\n *\n * @dev UpgradableProxy is the contract that inherits Proxy and wraps these\n * functions.\n * */\ncontract Proxy {\n\tbytes32 private constant KEY_IMPLEMENTATION = keccak256(\"key.implementation\");\n\tbytes32 private constant KEY_OWNER = keccak256(\"key.proxy.owner\");\n\n\tevent OwnershipTransferred(address indexed _oldOwner, address indexed _newOwner);\n\tevent ImplementationChanged(address indexed _oldImplementation, address indexed _newImplementation);\n\n\t/**\n\t * @notice Set sender as an owner.\n\t * */\n\tconstructor() public {\n\t\t_setProxyOwner(msg.sender);\n\t}\n\n\t/**\n\t * @notice Throw error if called not by an owner.\n\t * */\n\tmodifier onlyProxyOwner() {\n\t\trequire(msg.sender == getProxyOwner(), \"Proxy:: access denied\");\n\t\t_;\n\t}\n\n\t/**\n\t * @notice Set address of the implementation.\n\t * @param _implementation Address of the implementation.\n\t * */\n\tfunction _setImplementation(address _implementation) internal {\n\t\trequire(_implementation != address(0), \"Proxy::setImplementation: invalid address\");\n\t\temit ImplementationChanged(getImplementation(), _implementation);\n\n\t\tbytes32 key = KEY_IMPLEMENTATION;\n\t\tassembly {\n\t\t\tsstore(key, _implementation)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Return address of the implementation.\n\t * @return Address of the implementation.\n\t * */\n\tfunction getImplementation() public view returns (address _implementation) {\n\t\tbytes32 key = KEY_IMPLEMENTATION;\n\t\tassembly {\n\t\t\t_implementation := sload(key)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Set address of the owner.\n\t * @param _owner Address of the owner.\n\t * */\n\tfunction _setProxyOwner(address _owner) internal {\n\t\trequire(_owner != address(0), \"Proxy::setProxyOwner: invalid address\");\n\t\temit OwnershipTransferred(getProxyOwner(), _owner);\n\n\t\tbytes32 key = KEY_OWNER;\n\t\tassembly {\n\t\t\tsstore(key, _owner)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Return address of the owner.\n\t * @return Address of the owner.\n\t * */\n\tfunction getProxyOwner() public view returns (address _owner) {\n\t\tbytes32 key = KEY_OWNER;\n\t\tassembly {\n\t\t\t_owner := sload(key)\n\t\t}\n\t}\n\n\t/**\n\t * @notice Fallback function performs a delegate call\n\t * to the actual implementation address is pointing this proxy.\n\t * Returns whatever the implementation call returns.\n\t * */\n\tfunction() external payable {\n\t\taddress implementation = getImplementation();\n\t\trequire(implementation != address(0), \"Proxy::(): implementation not found\");\n\n\t\tassembly {\n\t\t\tlet pointer := mload(0x40)\n\t\t\tcalldatacopy(pointer, 0, calldatasize)\n\t\t\tlet result := delegatecall(gas, implementation, pointer, calldatasize, 0, 0)\n\t\t\tlet size := returndatasize\n\t\t\treturndatacopy(pointer, 0, size)\n\n\t\t\tswitch result\n\t\t\t\tcase 0 {\n\t\t\t\t\trevert(pointer, size)\n\t\t\t\t}\n\t\t\t\tdefault {\n\t\t\t\t\treturn(pointer, size)\n\t\t\t\t}\n\t\t}\n\t}\n}\n\n\n/**\n * @title Upgradable Proxy contract.\n * @notice A disadvantage of the immutable ledger is that nobody can change the\n * source code of a smart contract after it’s been deployed. In order to fix\n * bugs or introduce new features, smart contracts need to be upgradable somehow.\n *\n * Although it is not possible to upgrade the code of an already deployed smart\n * contract, it is possible to set-up a proxy contract architecture that will\n * allow to use new deployed contracts as if the main logic had been upgraded.\n *\n * A proxy architecture pattern is such that all message calls go through a\n * Proxy contract that will redirect them to the latest deployed contract logic.\n * To upgrade, a new version of the contract is deployed, and the Proxy is\n * updated to reference the new contract address.\n * */\ncontract UpgradableProxy is Proxy {\n\t/**\n\t * @notice Set address of the implementation.\n\t * @dev Wrapper for _setImplementation that exposes the function\n\t * as public for owner to be able to set a new version of the\n\t * contract as current pointing implementation.\n\t * @param _implementation Address of the implementation.\n\t * */\n\tfunction setImplementation(address _implementation) public onlyProxyOwner {\n\t\t_setImplementation(_implementation);\n\t}\n\n\t/**\n\t * @notice Set address of the owner.\n\t * @param _owner Address of the owner.\n\t * */\n\tfunction setProxyOwner(address _owner) public onlyProxyOwner {\n\t\t_setProxyOwner(_owner);\n\t}\n}\n\n\n/**\n * @dev LiquidityMining contract should be upgradable, use UpgradableProxy\n */\ncontract LiquidityMiningProxy is LiquidityMiningStorage, UpgradableProxy {\n\n}\n\n\n\n",
            "file": "LiquidityMiningProxy.sol"
        }
    ],
    "libraries": {},
    "creationData": {
        "blockHash": "0x373eb3521b3984b8aee364fa632872f15eb6eb2e99f83adc8f80abc53bdaded6",
        "blockNumber": 3368554,
        "transactionHash": "0xecb127903af096e5ee1cafa025dd41b71b5a71a73556a8b8111d659da78ecd33",
        "timestamp": 1621598017
    }
}