{
  "address": "0xd10776ba541fce3387e3df26391bedae2e6d94c3",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "Multiplexer",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    }
  },
  "version": "0.4.16+commit.d7661dd9",
  "source": "pragma solidity ^0.4.16;\n\nimport './ERC20.sol';\n\n/// @title Multiplexer\n/// @author Chris Hitchcott\n/// :repository https://github.com/DigixGlobal/multiplexer\n\ncontract Multiplexer {\n\n\tfunction sendEth(address[] _to, uint256[] _value) payable public returns (bool _success) {\n\t\t// input validation\n\t\tassert(_to.length == _value.length);\n\t\tassert(_to.length <= 255);\n\t\t// count values for refunding sender\n\t\tuint256 beforeValue = msg.value;\n\t\tuint256 afterValue = 0;\n\t\t// loop through to addresses and send value\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\n\t\t\tafterValue = afterValue + _value[i];\n\t\t\tassert(_to[i].send(_value[i]));\n\t\t}\n\t\t// send back remaining value to sender\n\t\tuint256 remainingValue = beforeValue - afterValue;\n\t\tif (remainingValue > 0) {\n\t\t\tassert(msg.sender.send(remainingValue));\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction sendErc20(address _tokenAddress, address[] _to, uint256[] _value) public returns (bool _success) {\n\t\t// input validation\n\t\tassert(_to.length == _value.length);\n\t\tassert(_to.length <= 255);\n\t\t// use the erc20 abi\n\t\tERC20 token = ERC20(_tokenAddress);\n\t\t// loop through to addresses and send value\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\n\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\n\t\t}\n\t\treturn true;\n\t}\n\n}\n",
  "imports": [
    {
      "name": "Multiplexer.sol",
      "contents": "pragma solidity ^0.4.16;\n\nimport './ERC20.sol';\n\n/// @title Multiplexer\n/// @author Chris Hitchcott\n/// :repository https://github.com/DigixGlobal/multiplexer\n\ncontract Multiplexer {\n\n\tfunction sendEth(address[] _to, uint256[] _value) payable public returns (bool _success) {\n\t\t// input validation\n\t\tassert(_to.length == _value.length);\n\t\tassert(_to.length <= 255);\n\t\t// count values for refunding sender\n\t\tuint256 beforeValue = msg.value;\n\t\tuint256 afterValue = 0;\n\t\t// loop through to addresses and send value\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\n\t\t\tafterValue = afterValue + _value[i];\n\t\t\tassert(_to[i].send(_value[i]));\n\t\t}\n\t\t// send back remaining value to sender\n\t\tuint256 remainingValue = beforeValue - afterValue;\n\t\tif (remainingValue > 0) {\n\t\t\tassert(msg.sender.send(remainingValue));\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction sendErc20(address _tokenAddress, address[] _to, uint256[] _value) public returns (bool _success) {\n\t\t// input validation\n\t\tassert(_to.length == _value.length);\n\t\tassert(_to.length <= 255);\n\t\t// use the erc20 abi\n\t\tERC20 token = ERC20(_tokenAddress);\n\t\t// loop through to addresses and send value\n\t\tfor (uint8 i = 0; i < _to.length; i++) {\n\t\t\tassert(token.transferFrom(msg.sender, _to[i], _value[i]) == true);\n\t\t}\n\t\treturn true;\n\t}\n\n}\n",
      "file": "Multiplexer.sol"
    },
    {
      "name": "ERC20.sol",
      "contents": "pragma solidity ^0.4.16;\n\ncontract ERC20 {\n  function transferFrom( address from, address to, uint value) returns (bool ok);\n}\n"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0xda2bc56e479cb5a7efadc17a9dedcf2ba52820ff1524bc6beed7bf24f5ac5a19",
    "blockNumber": 2747769,
    "transactionHash": "0x114fb5632334cc4f7651deabcf05a1656c2466299e4e0b35572c988c2c6f3d60",
    "timestamp": 1601653916
  }
}