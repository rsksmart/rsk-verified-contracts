{
    "address": "0xbc4a94b0e07a8a453d382747741d4652a0d0bcbf",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "PriceOracleAdapterMoc",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        }
    },
    "version": "0.5.17+commit.d19bba13",
    "source": "// Dependency file: contracts/PriceOracleAdapter.sol\n\n// pragma solidity ^0.5.16;\n\ncontract PriceOracleAdapter {\n    /// @notice Event adapter interface updated\n    event PriceOracleAdapterUpdated(address oldAddress, address newAddress);\n\n    /**\n     * @notice Get the price\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable.\n     */\n    function assetPrices(address cTokenAddress) external view returns (uint256);\n}\n\n\n// Root file: contracts/PriceOracleAdapterMoc.sol\n\npragma solidity ^0.5.16;\n\n// import \"contracts/PriceOracleAdapter.sol\";\n\ninterface PriceProviderMoC {\n    function peek() external view returns (bytes32, bool);\n}\n\ncontract PriceOracleAdapterMoc is PriceOracleAdapter {\n    /// @notice Address of the guardian\n    address public guardian;\n    /// @notice The MoC price oracle, which will continue to serve prices\n    PriceProviderMoC public priceProviderMoC;\n\n    /// @notice Guardian updated\n    event NewGuardian(address oldGuardian,address newGuardian);\n\n    /**\n     * @notice Construct a PriceOracleAdapter for a MoC oracle\n     * @param guardian_ address of guardian that is allowed to manage this contract\n     * @param priceProvider address of asset's MoC price provider\n     */\n    constructor(address guardian_,address priceProvider) public {\n        require(\n            guardian_ != address(0),\n            \"PriceOracleAdapterMoc: guardian could not be 0\"\n        );\n        require(\n            priceProvider != address(0),\n            \"PriceOracleAdapterMoc: priceProvider could not be 0\"\n        );\n        guardian = guardian_;\n        priceProviderMoC = PriceProviderMoC(priceProvider);\n    }\n\n    /**\n     * @notice Get the price from MoC and divide it by the rBTC price\n     * @return The price\n     */\n    function assetPrices(address) public view returns (uint256) {\n        (bytes32 price, bool has) = priceProviderMoC.peek();\n        require(has, \"PriceOracleAdapterMoc: Oracle have no Price\");\n        return uint256(price);\n    }\n\n    /**\n     * @notice Set the address of price provider\n     * @param priceProviderAddress address of price provider\n     */\n    function setPriceProvider(address priceProviderAddress) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterMoc: only guardian may set the address\"\n        );\n        require(\n            priceProviderAddress != address(0),\n            \"PriceOracleAdapterMoc: address could not be 0\"\n        );\n        //set old address\n        address oldPriceProviderAddress = address(priceProviderMoC);\n        //update interface address\n        priceProviderMoC = PriceProviderMoC(priceProviderAddress);\n        //emit event\n        emit PriceOracleAdapterUpdated(\n            oldPriceProviderAddress,\n            priceProviderAddress\n        );\n    }\n\n    /**\n     * @notice Set the address of the guardian\n     * @param newGuardian address of the guardian\n     */\n    function setGuardian(address newGuardian) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterMoc: only guardian\"\n        );\n        require(\n            guardian != address(0),\n            \"PriceOracleAdapterMoc: guardin address can not be 0\"\n        );\n        //set old address\n        address oldGuardian = guardian;\n        //update\n        guardian = newGuardian;\n        //emit event\n        emit NewGuardian(\n            oldGuardian,\n            newGuardian\n        );\n    }\n}\n",
    "imports": [
        {
            "name": "PriceOracleAdapterMoc.sol",
            "contents": "// Dependency file: contracts/PriceOracleAdapter.sol\n\n// pragma solidity ^0.5.16;\n\ncontract PriceOracleAdapter {\n    /// @notice Event adapter interface updated\n    event PriceOracleAdapterUpdated(address oldAddress, address newAddress);\n\n    /**\n     * @notice Get the price\n     * @return The underlying asset price mantissa (scaled by 1e18).\n     *  Zero means the price is unavailable.\n     */\n    function assetPrices(address cTokenAddress) external view returns (uint256);\n}\n\n\n// Root file: contracts/PriceOracleAdapterMoc.sol\n\npragma solidity ^0.5.16;\n\n// import \"contracts/PriceOracleAdapter.sol\";\n\ninterface PriceProviderMoC {\n    function peek() external view returns (bytes32, bool);\n}\n\ncontract PriceOracleAdapterMoc is PriceOracleAdapter {\n    /// @notice Address of the guardian\n    address public guardian;\n    /// @notice The MoC price oracle, which will continue to serve prices\n    PriceProviderMoC public priceProviderMoC;\n\n    /// @notice Guardian updated\n    event NewGuardian(address oldGuardian,address newGuardian);\n\n    /**\n     * @notice Construct a PriceOracleAdapter for a MoC oracle\n     * @param guardian_ address of guardian that is allowed to manage this contract\n     * @param priceProvider address of asset's MoC price provider\n     */\n    constructor(address guardian_,address priceProvider) public {\n        require(\n            guardian_ != address(0),\n            \"PriceOracleAdapterMoc: guardian could not be 0\"\n        );\n        require(\n            priceProvider != address(0),\n            \"PriceOracleAdapterMoc: priceProvider could not be 0\"\n        );\n        guardian = guardian_;\n        priceProviderMoC = PriceProviderMoC(priceProvider);\n    }\n\n    /**\n     * @notice Get the price from MoC and divide it by the rBTC price\n     * @return The price\n     */\n    function assetPrices(address) public view returns (uint256) {\n        (bytes32 price, bool has) = priceProviderMoC.peek();\n        require(has, \"PriceOracleAdapterMoc: Oracle have no Price\");\n        return uint256(price);\n    }\n\n    /**\n     * @notice Set the address of price provider\n     * @param priceProviderAddress address of price provider\n     */\n    function setPriceProvider(address priceProviderAddress) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterMoc: only guardian may set the address\"\n        );\n        require(\n            priceProviderAddress != address(0),\n            \"PriceOracleAdapterMoc: address could not be 0\"\n        );\n        //set old address\n        address oldPriceProviderAddress = address(priceProviderMoC);\n        //update interface address\n        priceProviderMoC = PriceProviderMoC(priceProviderAddress);\n        //emit event\n        emit PriceOracleAdapterUpdated(\n            oldPriceProviderAddress,\n            priceProviderAddress\n        );\n    }\n\n    /**\n     * @notice Set the address of the guardian\n     * @param newGuardian address of the guardian\n     */\n    function setGuardian(address newGuardian) public {\n        require(\n            msg.sender == guardian,\n            \"PriceOracleAdapterMoc: only guardian\"\n        );\n        require(\n            guardian != address(0),\n            \"PriceOracleAdapterMoc: guardin address can not be 0\"\n        );\n        //set old address\n        address oldGuardian = guardian;\n        //update\n        guardian = newGuardian;\n        //emit event\n        emit NewGuardian(\n            oldGuardian,\n            newGuardian\n        );\n    }\n}\n",
            "file": "PriceOracleAdapterMoc.sol"
        }
    ],
    "libraries": {},
    "constructorArguments": [
        "0x2992181d390c5f35a70c8012a8a6a4a6b7603a37",
        "0x7b19bb8e6c5188ec483b784d6fb5d807a77b21bf"
    ],
    "creationData": {
        "blockHash": "0x98e49a00ee4b96e3f1fcf7aad5c6aca51b4afabe96bcb5fb0cd9f58b599a6596",
        "blockNumber": 3154523,
        "transactionHash": "0xb12398c911c8ac5ad5b0e999f9b5bbc500d0b1a018c7ec8648f49f4a69e718b3",
        "timestamp": 1614820604
    }
}