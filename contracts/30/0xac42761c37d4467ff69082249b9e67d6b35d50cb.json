{
  "address": "0xac42761c37d4467ff69082249b9e67d6b35d50cb",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "Federation",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "evmVersion": "petersburg",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.5.15+commit.6a57276f",
  "source": "\n// File: contracts/zeppelin/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/zeppelin/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/IBridge.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IBridge {\n    function version() external pure returns (string memory);\n\n    function getCrossingPayment() external view returns(uint);\n\n    function calcMaxWithdraw() external view returns (uint);\n\n    /**\n     * ERC-20 tokens approve and transferFrom pattern\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n     */\n    function receiveTokens(address tokenToUse, uint256 amount) external payable returns(bool);\n\n    /**\n     * ERC-677 and ERC-223 implementation for Receiving Tokens Contracts\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     * See https://github.com/ethereum/EIPs/issues/223 for details\n     */\n    function tokenFallback(address from, uint amount, bytes calldata userData) external returns(bool);\n\n    /**\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\n     */\n    function tokensReceived (\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n\n    function acceptTransfer(\n        address originalTokenAddress,\n        address receiver, uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex\n    ) external returns(bool);\n\n    function transactionWasProcessed(\n        bytes32 _blockHash,\n        bytes32 _transactionHash,\n        address _receiver,\n        uint256 _amount,\n        uint32 _logIndex\n    ) external view returns(bool);\n\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes userData);\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol);\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount);\n    event CrossingPaymentChanged(uint256 _amount);\n}\n\n// File: contracts/zeppelin/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/zeppelin/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/Federation.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract Federation is Ownable {\n    uint constant public MAX_MEMBER_COUNT = 50;\n    address constant private NULL_ADDRESS = address(0);\n\n    IBridge public bridge;\n    address[] public members;\n    uint public required;\n\n    mapping (address => bool) public isMember;\n    mapping (bytes32 => mapping (address => bool)) public votes;\n    mapping(bytes32 => bool) public processed;\n\n    event Voted(address indexed sender, bytes32 indexed transactionId);\n    event Executed(bytes32 indexed transactionId);\n    event MemberAddition(address indexed member);\n    event MemberRemoval(address indexed member);\n    event RequirementChange(uint required);\n\n    modifier onlyMember() {\n        require(isMember[_msgSender()], \"Federation: Caller is not a member of the federation\");\n        _;\n    }\n\n    modifier validRequirement(uint membersCount, uint _required) {\n        // solium-disable-next-line max-len\n        require(_required <= membersCount && _required != 0 && membersCount != 0, \"Federation: Required value is invalid for the current members count\");\n        _;\n    }\n\n    constructor(address[] memory _members, uint _required) public validRequirement(_members.length, _required) {\n        members = _members;\n        for (uint i = 0; i < _members.length; i++) {\n            require(!isMember[_members[i]] && _members[i] != NULL_ADDRESS, \"Federation: Members addresses are invalid\");\n            isMember[_members[i]] = true;\n            emit MemberAddition(_members[i]);\n        }\n        required = _required;\n        emit RequirementChange(required);\n    }\n\n    function setBridge(address _bridge) external onlyOwner {\n        bridge = IBridge(_bridge);\n    }\n\n    function voteTransaction(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex)\n    external onlyMember returns(bool)\n    {\n        bytes32 transactionId = getTransactionId(originalTokenAddress, receiver, amount, symbol, blockHash, transactionHash, logIndex);\n        if (processed[transactionId])\n            return true;\n\n        if (votes[transactionId][_msgSender()])\n            return true;\n\n        votes[transactionId][_msgSender()] = true;\n        emit Voted(_msgSender(), transactionId);\n\n        uint8 transactionCount = getTransactionCount(transactionId);\n        if (transactionCount >= required && transactionCount >= members.length / 2 + 1) {\n            processed[transactionId] = true;\n            bool acceptTransfer = bridge.acceptTransfer(originalTokenAddress, receiver, amount, symbol, blockHash, transactionHash, logIndex);\n            require(acceptTransfer, \"Federation: Bridge Accept Transfer was not successful\");\n            emit Executed(transactionId);\n            return true;\n        }\n\n        return true;\n    }\n\n    function getTransactionCount(bytes32 transactionId) public view returns(uint8) {\n        uint8 count = 0;\n        for (uint8 i = 0; i < members.length; i++) {\n            if (votes[transactionId][members[i]])\n                count += 1;\n        }\n        return count;\n    }\n\n    function hasVoted(bytes32 transactionId) external view returns(bool)\n    {\n        return votes[transactionId][_msgSender()];\n    }\n\n    function transactionWasProcessed(bytes32 transactionId) external view returns(bool)\n    {\n        return processed[transactionId];\n    }\n\n    function getTransactionId(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string memory symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex)\n    public pure returns(bytes32)\n    {\n        return keccak256(abi.encodePacked(originalTokenAddress, receiver, amount, symbol, blockHash, transactionHash, logIndex));\n    }\n\n    function addMember(address _newMember) external onlyOwner\n    {\n        require(_newMember != NULL_ADDRESS, \"Federation: Address cannot be empty\");\n        require(!isMember[_newMember], \"Federation: Member already exists\");\n        require(members.length < MAX_MEMBER_COUNT, \"Federation: Already at full capacity\");\n\n        isMember[_newMember] = true;\n        members.push(_newMember);\n        emit MemberAddition(_newMember);\n    }\n\n    function removeMember(address _oldMember) external onlyOwner\n    {\n        require(_oldMember != NULL_ADDRESS, \"Federation: Address cannot be empty\");\n        require(isMember[_oldMember], \"Federation: Member does not exists\");\n        require(members.length > 1, \"Federation: Can't remove all the members\");\n\n        isMember[_oldMember] = false;\n        for (uint i = 0; i < members.length - 1; i++) {\n            if (members[i] == _oldMember) {\n                members[i] = members[members.length - 1];\n                break;\n            }\n        }\n        members.length -= 1;\n        emit MemberRemoval(_oldMember);\n    }\n\n    function getMembers() external view returns (address[] memory)\n    {\n        return members;\n    }\n\n    function changeRequirement(uint _required) external onlyOwner validRequirement(members.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n}\n",
  "imports": [
    {
      "name": "Federation-flatten.sol",
      "contents": "\n// File: contracts/zeppelin/token/ERC20/IERC20.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/zeppelin/token/ERC20/ERC20Detailed.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/IBridge.sol\n\npragma solidity ^0.5.0;\n\n\ninterface IBridge {\n    function version() external pure returns (string memory);\n\n    function getCrossingPayment() external view returns(uint);\n\n    function calcMaxWithdraw() external view returns (uint);\n\n    /**\n     * ERC-20 tokens approve and transferFrom pattern\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n     */\n    function receiveTokens(address tokenToUse, uint256 amount) external payable returns(bool);\n\n    /**\n     * ERC-677 and ERC-223 implementation for Receiving Tokens Contracts\n     * See https://github.com/ethereum/EIPs/issues/677 for details\n     * See https://github.com/ethereum/EIPs/issues/223 for details\n     */\n    function tokenFallback(address from, uint amount, bytes calldata userData) external returns(bool);\n\n    /**\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\n     */\n    function tokensReceived (\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n\n    function acceptTransfer(\n        address originalTokenAddress,\n        address receiver, uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex\n    ) external returns(bool);\n\n    function transactionWasProcessed(\n        bytes32 _blockHash,\n        bytes32 _transactionHash,\n        address _receiver,\n        uint256 _amount,\n        uint32 _logIndex\n    ) external view returns(bool);\n\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes userData);\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol);\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount);\n    event CrossingPaymentChanged(uint256 _amount);\n}\n\n// File: contracts/zeppelin/GSN/Context.sol\n\npragma solidity ^0.5.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: contracts/zeppelin/ownership/Ownable.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: contracts/Federation.sol\n\npragma solidity ^0.5.0;\n\n\n\ncontract Federation is Ownable {\n    uint constant public MAX_MEMBER_COUNT = 50;\n    address constant private NULL_ADDRESS = address(0);\n\n    IBridge public bridge;\n    address[] public members;\n    uint public required;\n\n    mapping (address => bool) public isMember;\n    mapping (bytes32 => mapping (address => bool)) public votes;\n    mapping(bytes32 => bool) public processed;\n\n    event Voted(address indexed sender, bytes32 indexed transactionId);\n    event Executed(bytes32 indexed transactionId);\n    event MemberAddition(address indexed member);\n    event MemberRemoval(address indexed member);\n    event RequirementChange(uint required);\n\n    modifier onlyMember() {\n        require(isMember[_msgSender()], \"Federation: Caller is not a member of the federation\");\n        _;\n    }\n\n    modifier validRequirement(uint membersCount, uint _required) {\n        // solium-disable-next-line max-len\n        require(_required <= membersCount && _required != 0 && membersCount != 0, \"Federation: Required value is invalid for the current members count\");\n        _;\n    }\n\n    constructor(address[] memory _members, uint _required) public validRequirement(_members.length, _required) {\n        members = _members;\n        for (uint i = 0; i < _members.length; i++) {\n            require(!isMember[_members[i]] && _members[i] != NULL_ADDRESS, \"Federation: Members addresses are invalid\");\n            isMember[_members[i]] = true;\n            emit MemberAddition(_members[i]);\n        }\n        required = _required;\n        emit RequirementChange(required);\n    }\n\n    function setBridge(address _bridge) external onlyOwner {\n        bridge = IBridge(_bridge);\n    }\n\n    function voteTransaction(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex)\n    external onlyMember returns(bool)\n    {\n        bytes32 transactionId = getTransactionId(originalTokenAddress, receiver, amount, symbol, blockHash, transactionHash, logIndex);\n        if (processed[transactionId])\n            return true;\n\n        if (votes[transactionId][_msgSender()])\n            return true;\n\n        votes[transactionId][_msgSender()] = true;\n        emit Voted(_msgSender(), transactionId);\n\n        uint8 transactionCount = getTransactionCount(transactionId);\n        if (transactionCount >= required && transactionCount >= members.length / 2 + 1) {\n            processed[transactionId] = true;\n            bool acceptTransfer = bridge.acceptTransfer(originalTokenAddress, receiver, amount, symbol, blockHash, transactionHash, logIndex);\n            require(acceptTransfer, \"Federation: Bridge Accept Transfer was not successful\");\n            emit Executed(transactionId);\n            return true;\n        }\n\n        return true;\n    }\n\n    function getTransactionCount(bytes32 transactionId) public view returns(uint8) {\n        uint8 count = 0;\n        for (uint8 i = 0; i < members.length; i++) {\n            if (votes[transactionId][members[i]])\n                count += 1;\n        }\n        return count;\n    }\n\n    function hasVoted(bytes32 transactionId) external view returns(bool)\n    {\n        return votes[transactionId][_msgSender()];\n    }\n\n    function transactionWasProcessed(bytes32 transactionId) external view returns(bool)\n    {\n        return processed[transactionId];\n    }\n\n    function getTransactionId(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string memory symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex)\n    public pure returns(bytes32)\n    {\n        return keccak256(abi.encodePacked(originalTokenAddress, receiver, amount, symbol, blockHash, transactionHash, logIndex));\n    }\n\n    function addMember(address _newMember) external onlyOwner\n    {\n        require(_newMember != NULL_ADDRESS, \"Federation: Address cannot be empty\");\n        require(!isMember[_newMember], \"Federation: Member already exists\");\n        require(members.length < MAX_MEMBER_COUNT, \"Federation: Already at full capacity\");\n\n        isMember[_newMember] = true;\n        members.push(_newMember);\n        emit MemberAddition(_newMember);\n    }\n\n    function removeMember(address _oldMember) external onlyOwner\n    {\n        require(_oldMember != NULL_ADDRESS, \"Federation: Address cannot be empty\");\n        require(isMember[_oldMember], \"Federation: Member does not exists\");\n        require(members.length > 1, \"Federation: Can't remove all the members\");\n\n        isMember[_oldMember] = false;\n        for (uint i = 0; i < members.length - 1; i++) {\n            if (members[i] == _oldMember) {\n                members[i] = members[members.length - 1];\n                break;\n            }\n        }\n        members.length -= 1;\n        emit MemberRemoval(_oldMember);\n    }\n\n    function getMembers() external view returns (address[] memory)\n    {\n        return members;\n    }\n\n    function changeRequirement(uint _required) external onlyOwner validRequirement(members.length, _required)\n    {\n        required = _required;\n        emit RequirementChange(_required);\n    }\n\n}\n",
      "file": "Federation-flatten.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0xb79896ecf397477878e7246b7706ffa96ad61327243eb9a91ed2f755d8550cfe",
    "blockNumber": 1988161,
    "transactionHash": "0x05bbcd3acb7ef451cc32b594f0e54c0c81292145d34e9cfec3f792e110a7da9d",
    "timestamp": 1577477721
  },
  "constructorArguments": [
    [
      "0x9c95b0ef2d3e1d9ca479524ba738c87be28c1585"
    ],
    "0x1"
  ]
}