{
  "address": "0x09bef7b7df8ce8cf21406130e37522915fa06c9b",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "PriceFeedsMoC",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.5.17+commit.d19bba13",
  "source": "pragma solidity 0.5.17;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\ncontract Constants {\n    IWrbtcERC20 public wrbtcToken;\n    IWrbtcERC20 public baseToken;\n    address internal protocolTokenAddress;\n\n    function _setWrbtcToken(address _wrbtcTokenAddress) internal {\n        require(\n            Address.isContract(_wrbtcTokenAddress),\n            \"_wrbtcTokenAddress not a contract\"\n        );\n        wrbtcToken = IWrbtcERC20(_wrbtcTokenAddress);\n    }\n\n    function _setProtocolTokenAddress(address _protocolTokenAddress) internal {\n        require(\n            Address.isContract(_protocolTokenAddress),\n            \"_protocolTokenAddress not a contract\"\n        );\n        protocolTokenAddress = _protocolTokenAddress;\n    }\n\n    function _setBaseToken(address _baseTokenAddress) internal {\n        require(\n            Address.isContract(_baseTokenAddress),\n            \"_baseTokenAddress not a contract\"\n        );\n        baseToken = IWrbtcERC20(_baseTokenAddress);\n    }\n}\n\ninterface IPriceFeedsExt {\n    function latestAnswer() external view returns (uint256);\n}\n\ncontract PriceFeeds is Constants, Ownable {\n    using SafeMathSovryn for uint256;\n\n    event GlobalPricingPaused(address indexed sender, bool indexed isPaused);\n\n    mapping(address => IPriceFeedsExt) public pricesFeeds; // token => pricefeed\n    mapping(address => uint256) public decimals; // decimals of supported tokens\n\n    uint256 public protocolTokenEthPrice = 0.0002 ether;\n\n    bool public globalPricingPaused = false;\n\n    constructor(\n        address _wrbtcTokenAddress,\n        address _protocolTokenAddress,\n        address _baseTokenAddress\n    ) public {\n        // set decimals for ether\n        decimals[address(0)] = 18;\n        decimals[_wrbtcTokenAddress] = 18;\n        _setWrbtcToken(_wrbtcTokenAddress);\n        _setProtocolTokenAddress(_protocolTokenAddress);\n        _setBaseToken(_baseTokenAddress);\n    }\n\n    function queryRate(address sourceToken, address destToken)\n        public\n        view\n        returns (uint256 rate, uint256 precision)\n    {\n        return _queryRate(sourceToken, destToken);\n    }\n\n    function queryPrecision(address sourceToken, address destToken)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            sourceToken != destToken\n                ? _getDecimalPrecision(sourceToken, destToken)\n                : 10**18;\n    }\n\n    //// NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly. ///\n    function queryReturn(\n        address sourceToken,\n        address destToken,\n        uint256 sourceAmount\n    ) public view returns (uint256 destAmount) {\n        (uint256 rate, uint256 precision) = _queryRate(sourceToken, destToken);\n\n        destAmount = sourceAmount.mul(rate).div(precision);\n    }\n\n    function checkPriceDisagreement(\n        address sourceToken,\n        address destToken,\n        uint256 sourceAmount,\n        uint256 destAmount,\n        uint256 maxSlippage\n    ) public view returns (uint256 sourceToDestSwapRate) {\n        (uint256 rate, uint256 precision) = _queryRate(sourceToken, destToken);\n\n        sourceToDestSwapRate = destAmount.mul(precision).div(sourceAmount);\n\n        uint256 spreadValue = sourceToDestSwapRate > rate\n            ? sourceToDestSwapRate - rate\n            : rate - sourceToDestSwapRate;\n\n        if (spreadValue != 0) {\n            spreadValue = spreadValue.mul(10**20).div(sourceToDestSwapRate);\n\n            require(spreadValue <= maxSlippage, \"price disagreement\");\n        }\n    }\n\n    function amountInEth(address tokenAddress, uint256 amount)\n        public\n        view\n        returns (uint256 ethAmount)\n    {\n        if (tokenAddress == address(wrbtcToken)) {\n            ethAmount = amount;\n        } else {\n            (uint256 toEthRate, uint256 toEthPrecision) = queryRate(\n                tokenAddress,\n                address(wrbtcToken)\n            );\n            ethAmount = amount.mul(toEthRate).div(toEthPrecision);\n        }\n    }\n\n    function getMaxDrawdown(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount,\n        uint256 margin\n    ) public view returns (uint256 maxDrawdown) {\n        uint256 loanToCollateralAmount;\n        if (collateralToken == loanToken) {\n            loanToCollateralAmount = loanAmount;\n        } else {\n            (uint256 rate, uint256 precision) = queryRate(\n                loanToken,\n                collateralToken\n            );\n            loanToCollateralAmount = loanAmount.mul(rate).div(precision);\n        }\n\n        uint256 combined = loanToCollateralAmount.add(\n            loanToCollateralAmount.mul(margin).div(10**20)\n        );\n\n        maxDrawdown = collateralAmount > combined\n            ? collateralAmount - combined\n            : 0;\n    }\n\n    function getCurrentMarginAndCollateralSize(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount\n    )\n        public\n        view\n        returns (uint256 currentMargin, uint256 collateralInEthAmount)\n    {\n        (currentMargin, ) = getCurrentMargin(\n            loanToken,\n            collateralToken,\n            loanAmount,\n            collateralAmount\n        );\n\n        collateralInEthAmount = amountInEth(collateralToken, collateralAmount);\n    }\n\n    /**\n     * current margin = (total position size - loan)/ loan\n     * the collateral amount passed as parameter equals the total position size.\n     * */\n    function getCurrentMargin(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount\n    )\n        public\n        view\n        returns (uint256 currentMargin, uint256 collateralToLoanRate)\n    {\n        uint256 collateralToLoanAmount;\n        if (collateralToken == loanToken) {\n            collateralToLoanAmount = collateralAmount;\n            collateralToLoanRate = 10**18;\n        } else {\n            uint256 collateralToLoanPrecision;\n            (collateralToLoanRate, collateralToLoanPrecision) = queryRate(\n                collateralToken,\n                loanToken\n            );\n\n            collateralToLoanRate = collateralToLoanRate.mul(10**18).div(\n                collateralToLoanPrecision\n            );\n\n            collateralToLoanAmount = collateralAmount\n                .mul(collateralToLoanRate)\n                .div(10**18);\n        }\n\n        if (loanAmount != 0 && collateralToLoanAmount >= loanAmount) {\n            return (\n                collateralToLoanAmount.sub(loanAmount).mul(10**20).div(\n                    loanAmount\n                ),\n                collateralToLoanRate\n            );\n        } else {\n            return (0, collateralToLoanRate);\n        }\n    }\n\n    function shouldLiquidate(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount,\n        uint256 maintenanceMargin\n    ) public view returns (bool) {\n        (uint256 currentMargin, ) = getCurrentMargin(\n            loanToken,\n            collateralToken,\n            loanAmount,\n            collateralAmount\n        );\n\n        return currentMargin <= maintenanceMargin;\n    }\n\n    /*\n     * Owner functions\n     */\n\n    function setProtocolTokenEthPrice(uint256 newPrice) external onlyOwner {\n        require(newPrice != 0, \"invalid price\");\n        protocolTokenEthPrice = newPrice;\n    }\n\n    function setPriceFeed(\n        address[] calldata tokens,\n        IPriceFeedsExt[] calldata feeds\n    ) external onlyOwner {\n        require(tokens.length == feeds.length, \"count mismatch\");\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            pricesFeeds[tokens[i]] = feeds[i];\n        }\n    }\n\n    function setDecimals(IERC20Sovryn[] calldata tokens) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            decimals[address(tokens[i])] = tokens[i].decimals();\n        }\n    }\n\n    function setGlobalPricingPaused(bool isPaused) external onlyOwner {\n        if (globalPricingPaused != isPaused) {\n            globalPricingPaused = isPaused;\n\n            emit GlobalPricingPaused(msg.sender, isPaused);\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n\n    function _queryRate(address sourceToken, address destToken)\n        internal\n        view\n        returns (uint256 rate, uint256 precision)\n    {\n        require(!globalPricingPaused, \"pricing is paused\");\n\n        if (sourceToken != destToken) {\n            uint256 sourceRate;\n            if (\n                sourceToken != address(baseToken) &&\n                sourceToken != protocolTokenAddress\n            ) {\n                IPriceFeedsExt _sourceFeed = pricesFeeds[sourceToken];\n                require(\n                    address(_sourceFeed) != address(0),\n                    \"unsupported src feed\"\n                );\n                sourceRate = _sourceFeed.latestAnswer();\n                require(\n                    sourceRate != 0 && (sourceRate >> 128) == 0,\n                    \"price error\"\n                );\n            } else {\n                sourceRate = sourceToken == protocolTokenAddress\n                    ? protocolTokenEthPrice\n                    : 10**18;\n            }\n\n            uint256 destRate;\n            if (\n                destToken != address(baseToken) &&\n                destToken != protocolTokenAddress\n            ) {\n                IPriceFeedsExt _destFeed = pricesFeeds[destToken];\n                require(\n                    address(_destFeed) != address(0),\n                    \"unsupported dst feed\"\n                );\n                destRate = _destFeed.latestAnswer();\n                require(destRate != 0 && (destRate >> 128) == 0, \"price error\");\n            } else {\n                destRate = destToken == protocolTokenAddress\n                    ? protocolTokenEthPrice\n                    : 10**18;\n            }\n\n            rate = sourceRate.mul(10**18).div(destRate);\n\n            precision = _getDecimalPrecision(sourceToken, destToken);\n        } else {\n            rate = 10**18;\n            precision = 10**18;\n        }\n    }\n\n    function _getDecimalPrecision(address sourceToken, address destToken)\n        internal\n        view\n        returns (uint256)\n    {\n        if (sourceToken == destToken) {\n            return 10**18;\n        } else {\n            uint256 sourceTokenDecimals = decimals[sourceToken];\n            if (sourceTokenDecimals == 0)\n                sourceTokenDecimals = IERC20Sovryn(sourceToken).decimals();\n\n            uint256 destTokenDecimals = decimals[destToken];\n            if (destTokenDecimals == 0)\n                destTokenDecimals = IERC20Sovryn(destToken).decimals();\n\n            if (destTokenDecimals >= sourceTokenDecimals)\n                return\n                    10 **\n                        (\n                            SafeMathSovryn.sub(\n                                18,\n                                destTokenDecimals - sourceTokenDecimals\n                            )\n                        );\n            else\n                return\n                    10 **\n                        (\n                            SafeMathSovryn.add(\n                                18,\n                                sourceTokenDecimals - destTokenDecimals\n                            )\n                        );\n        }\n    }\n}\n\ninterface Medianizer {\n    function peek() external view returns (bytes32, bool);\n}\n\ncontract PriceFeedsMoC is IPriceFeedsExt, Ownable {\n    address public mocOracleAddress;\n\n    event SetMoCOracleAddress(\n        address indexed mocOracleAddress,\n        address changerAddress\n    );\n\n    constructor(address _mocOracleAddress) public {\n        setMoCOracleAddress(_mocOracleAddress);\n    }\n\n    function latestAnswer() external view returns (uint256) {\n        (bytes32 value, bool hasValue) = Medianizer(mocOracleAddress).peek();\n        require(hasValue, \"Doesn't have a value\");\n        return uint256(value);\n    }\n\n    function setMoCOracleAddress(address _mocOracleAddress) public onlyOwner {\n        require(\n            Address.isContract(_mocOracleAddress),\n            \"_mocOracleAddress not a contract\"\n        );\n        mocOracleAddress = _mocOracleAddress;\n        emit SetMoCOracleAddress(mocOracleAddress, msg.sender);\n    }\n}\n",
  "imports": [
    {
      "name": "PriceFeedsMoC_Deployable.sol",
      "contents": "pragma solidity 0.5.17;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\ncontract Constants {\n    IWrbtcERC20 public wrbtcToken;\n    IWrbtcERC20 public baseToken;\n    address internal protocolTokenAddress;\n\n    function _setWrbtcToken(address _wrbtcTokenAddress) internal {\n        require(\n            Address.isContract(_wrbtcTokenAddress),\n            \"_wrbtcTokenAddress not a contract\"\n        );\n        wrbtcToken = IWrbtcERC20(_wrbtcTokenAddress);\n    }\n\n    function _setProtocolTokenAddress(address _protocolTokenAddress) internal {\n        require(\n            Address.isContract(_protocolTokenAddress),\n            \"_protocolTokenAddress not a contract\"\n        );\n        protocolTokenAddress = _protocolTokenAddress;\n    }\n\n    function _setBaseToken(address _baseTokenAddress) internal {\n        require(\n            Address.isContract(_baseTokenAddress),\n            \"_baseTokenAddress not a contract\"\n        );\n        baseToken = IWrbtcERC20(_baseTokenAddress);\n    }\n}\n\ninterface IPriceFeedsExt {\n    function latestAnswer() external view returns (uint256);\n}\n\ncontract PriceFeeds is Constants, Ownable {\n    using SafeMathSovryn for uint256;\n\n    event GlobalPricingPaused(address indexed sender, bool indexed isPaused);\n\n    mapping(address => IPriceFeedsExt) public pricesFeeds; // token => pricefeed\n    mapping(address => uint256) public decimals; // decimals of supported tokens\n\n    uint256 public protocolTokenEthPrice = 0.0002 ether;\n\n    bool public globalPricingPaused = false;\n\n    constructor(\n        address _wrbtcTokenAddress,\n        address _protocolTokenAddress,\n        address _baseTokenAddress\n    ) public {\n        // set decimals for ether\n        decimals[address(0)] = 18;\n        decimals[_wrbtcTokenAddress] = 18;\n        _setWrbtcToken(_wrbtcTokenAddress);\n        _setProtocolTokenAddress(_protocolTokenAddress);\n        _setBaseToken(_baseTokenAddress);\n    }\n\n    function queryRate(address sourceToken, address destToken)\n        public\n        view\n        returns (uint256 rate, uint256 precision)\n    {\n        return _queryRate(sourceToken, destToken);\n    }\n\n    function queryPrecision(address sourceToken, address destToken)\n        public\n        view\n        returns (uint256)\n    {\n        return\n            sourceToken != destToken\n                ? _getDecimalPrecision(sourceToken, destToken)\n                : 10**18;\n    }\n\n    //// NOTE: This function returns 0 during a pause, rather than a revert. Ensure calling contracts handle correctly. ///\n    function queryReturn(\n        address sourceToken,\n        address destToken,\n        uint256 sourceAmount\n    ) public view returns (uint256 destAmount) {\n        (uint256 rate, uint256 precision) = _queryRate(sourceToken, destToken);\n\n        destAmount = sourceAmount.mul(rate).div(precision);\n    }\n\n    function checkPriceDisagreement(\n        address sourceToken,\n        address destToken,\n        uint256 sourceAmount,\n        uint256 destAmount,\n        uint256 maxSlippage\n    ) public view returns (uint256 sourceToDestSwapRate) {\n        (uint256 rate, uint256 precision) = _queryRate(sourceToken, destToken);\n\n        sourceToDestSwapRate = destAmount.mul(precision).div(sourceAmount);\n\n        uint256 spreadValue = sourceToDestSwapRate > rate\n            ? sourceToDestSwapRate - rate\n            : rate - sourceToDestSwapRate;\n\n        if (spreadValue != 0) {\n            spreadValue = spreadValue.mul(10**20).div(sourceToDestSwapRate);\n\n            require(spreadValue <= maxSlippage, \"price disagreement\");\n        }\n    }\n\n    function amountInEth(address tokenAddress, uint256 amount)\n        public\n        view\n        returns (uint256 ethAmount)\n    {\n        if (tokenAddress == address(wrbtcToken)) {\n            ethAmount = amount;\n        } else {\n            (uint256 toEthRate, uint256 toEthPrecision) = queryRate(\n                tokenAddress,\n                address(wrbtcToken)\n            );\n            ethAmount = amount.mul(toEthRate).div(toEthPrecision);\n        }\n    }\n\n    function getMaxDrawdown(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount,\n        uint256 margin\n    ) public view returns (uint256 maxDrawdown) {\n        uint256 loanToCollateralAmount;\n        if (collateralToken == loanToken) {\n            loanToCollateralAmount = loanAmount;\n        } else {\n            (uint256 rate, uint256 precision) = queryRate(\n                loanToken,\n                collateralToken\n            );\n            loanToCollateralAmount = loanAmount.mul(rate).div(precision);\n        }\n\n        uint256 combined = loanToCollateralAmount.add(\n            loanToCollateralAmount.mul(margin).div(10**20)\n        );\n\n        maxDrawdown = collateralAmount > combined\n            ? collateralAmount - combined\n            : 0;\n    }\n\n    function getCurrentMarginAndCollateralSize(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount\n    )\n        public\n        view\n        returns (uint256 currentMargin, uint256 collateralInEthAmount)\n    {\n        (currentMargin, ) = getCurrentMargin(\n            loanToken,\n            collateralToken,\n            loanAmount,\n            collateralAmount\n        );\n\n        collateralInEthAmount = amountInEth(collateralToken, collateralAmount);\n    }\n\n    /**\n     * current margin = (total position size - loan)/ loan\n     * the collateral amount passed as parameter equals the total position size.\n     * */\n    function getCurrentMargin(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount\n    )\n        public\n        view\n        returns (uint256 currentMargin, uint256 collateralToLoanRate)\n    {\n        uint256 collateralToLoanAmount;\n        if (collateralToken == loanToken) {\n            collateralToLoanAmount = collateralAmount;\n            collateralToLoanRate = 10**18;\n        } else {\n            uint256 collateralToLoanPrecision;\n            (collateralToLoanRate, collateralToLoanPrecision) = queryRate(\n                collateralToken,\n                loanToken\n            );\n\n            collateralToLoanRate = collateralToLoanRate.mul(10**18).div(\n                collateralToLoanPrecision\n            );\n\n            collateralToLoanAmount = collateralAmount\n                .mul(collateralToLoanRate)\n                .div(10**18);\n        }\n\n        if (loanAmount != 0 && collateralToLoanAmount >= loanAmount) {\n            return (\n                collateralToLoanAmount.sub(loanAmount).mul(10**20).div(\n                    loanAmount\n                ),\n                collateralToLoanRate\n            );\n        } else {\n            return (0, collateralToLoanRate);\n        }\n    }\n\n    function shouldLiquidate(\n        address loanToken,\n        address collateralToken,\n        uint256 loanAmount,\n        uint256 collateralAmount,\n        uint256 maintenanceMargin\n    ) public view returns (bool) {\n        (uint256 currentMargin, ) = getCurrentMargin(\n            loanToken,\n            collateralToken,\n            loanAmount,\n            collateralAmount\n        );\n\n        return currentMargin <= maintenanceMargin;\n    }\n\n    /*\n     * Owner functions\n     */\n\n    function setProtocolTokenEthPrice(uint256 newPrice) external onlyOwner {\n        require(newPrice != 0, \"invalid price\");\n        protocolTokenEthPrice = newPrice;\n    }\n\n    function setPriceFeed(\n        address[] calldata tokens,\n        IPriceFeedsExt[] calldata feeds\n    ) external onlyOwner {\n        require(tokens.length == feeds.length, \"count mismatch\");\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            pricesFeeds[tokens[i]] = feeds[i];\n        }\n    }\n\n    function setDecimals(IERC20Sovryn[] calldata tokens) external onlyOwner {\n        for (uint256 i = 0; i < tokens.length; i++) {\n            decimals[address(tokens[i])] = tokens[i].decimals();\n        }\n    }\n\n    function setGlobalPricingPaused(bool isPaused) external onlyOwner {\n        if (globalPricingPaused != isPaused) {\n            globalPricingPaused = isPaused;\n\n            emit GlobalPricingPaused(msg.sender, isPaused);\n        }\n    }\n\n    /*\n     * Internal functions\n     */\n\n    function _queryRate(address sourceToken, address destToken)\n        internal\n        view\n        returns (uint256 rate, uint256 precision)\n    {\n        require(!globalPricingPaused, \"pricing is paused\");\n\n        if (sourceToken != destToken) {\n            uint256 sourceRate;\n            if (\n                sourceToken != address(baseToken) &&\n                sourceToken != protocolTokenAddress\n            ) {\n                IPriceFeedsExt _sourceFeed = pricesFeeds[sourceToken];\n                require(\n                    address(_sourceFeed) != address(0),\n                    \"unsupported src feed\"\n                );\n                sourceRate = _sourceFeed.latestAnswer();\n                require(\n                    sourceRate != 0 && (sourceRate >> 128) == 0,\n                    \"price error\"\n                );\n            } else {\n                sourceRate = sourceToken == protocolTokenAddress\n                    ? protocolTokenEthPrice\n                    : 10**18;\n            }\n\n            uint256 destRate;\n            if (\n                destToken != address(baseToken) &&\n                destToken != protocolTokenAddress\n            ) {\n                IPriceFeedsExt _destFeed = pricesFeeds[destToken];\n                require(\n                    address(_destFeed) != address(0),\n                    \"unsupported dst feed\"\n                );\n                destRate = _destFeed.latestAnswer();\n                require(destRate != 0 && (destRate >> 128) == 0, \"price error\");\n            } else {\n                destRate = destToken == protocolTokenAddress\n                    ? protocolTokenEthPrice\n                    : 10**18;\n            }\n\n            rate = sourceRate.mul(10**18).div(destRate);\n\n            precision = _getDecimalPrecision(sourceToken, destToken);\n        } else {\n            rate = 10**18;\n            precision = 10**18;\n        }\n    }\n\n    function _getDecimalPrecision(address sourceToken, address destToken)\n        internal\n        view\n        returns (uint256)\n    {\n        if (sourceToken == destToken) {\n            return 10**18;\n        } else {\n            uint256 sourceTokenDecimals = decimals[sourceToken];\n            if (sourceTokenDecimals == 0)\n                sourceTokenDecimals = IERC20Sovryn(sourceToken).decimals();\n\n            uint256 destTokenDecimals = decimals[destToken];\n            if (destTokenDecimals == 0)\n                destTokenDecimals = IERC20Sovryn(destToken).decimals();\n\n            if (destTokenDecimals >= sourceTokenDecimals)\n                return\n                    10 **\n                        (\n                            SafeMathSovryn.sub(\n                                18,\n                                destTokenDecimals - sourceTokenDecimals\n                            )\n                        );\n            else\n                return\n                    10 **\n                        (\n                            SafeMathSovryn.add(\n                                18,\n                                sourceTokenDecimals - destTokenDecimals\n                            )\n                        );\n        }\n    }\n}\n\ninterface Medianizer {\n    function peek() external view returns (bytes32, bool);\n}\n\ncontract PriceFeedsMoC is IPriceFeedsExt, Ownable {\n    address public mocOracleAddress;\n\n    event SetMoCOracleAddress(\n        address indexed mocOracleAddress,\n        address changerAddress\n    );\n\n    constructor(address _mocOracleAddress) public {\n        setMoCOracleAddress(_mocOracleAddress);\n    }\n\n    function latestAnswer() external view returns (uint256) {\n        (bytes32 value, bool hasValue) = Medianizer(mocOracleAddress).peek();\n        require(hasValue, \"Doesn't have a value\");\n        return uint256(value);\n    }\n\n    function setMoCOracleAddress(address _mocOracleAddress) public onlyOwner {\n        require(\n            Address.isContract(_mocOracleAddress),\n            \"_mocOracleAddress not a contract\"\n        );\n        mocOracleAddress = _mocOracleAddress;\n        emit SetMoCOracleAddress(mocOracleAddress, msg.sender);\n    }\n}\n",
      "file": "PriceFeedsMoC_Deployable.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x3a0c940e1eb9362f3895102a7aeaffd0853b366612d8a8c241a1eecac0a7dd08",
    "blockNumber": 2742431,
    "transactionHash": "0x77556563dd5d3a726bfd6330505ac197cb143904d8d95e46ebe057dfcea3d93e",
    "timestamp": 1601477486
  },
  "constructorArguments": [
    "0x7b19bb8e6c5188ec483b784d6fb5d807a77b21bf"
  ]
}