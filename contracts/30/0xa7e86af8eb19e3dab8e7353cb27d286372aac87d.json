{
    "address": "0xa7e86af8eb19e3dab8e7353cb27d286372aac87d",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "CoinPairPriceFree",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        }
    },
    "version": "0.6.12+commit.27d51765",
    "source": "/*\nCopyright MOC Investments Corp. 2020. All rights reserved.\n \nYou acknowledge and agree that MOC Investments Corp. (“MOC”) (or MOC’s licensors) own all legal right, title and\ninterest in and to the work, software, application, source code, documentation and any other documents in this\nrepository (collectively, the “Program”), including any intellectual property rights which subsist in the\nProgram (whether those rights happen to be registered or not, and wherever in the world those rights may exist),\nwhether in source code or any other form.\n \nSubject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy,\nmodify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise\nattempt to extract the source code of, the Program or any part thereof, except that you may contribute to\nthis repository.\n \nYou are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify,\nmerge, combine with another program or create derivative works of the Program (such resulting program, collectively,\nthe “Resulting Program”) solely for Non-Commercial Use as long as you:\n 1. give prominent notice (“Notice”) with each copy of the Resulting Program that the Program is used in the Resulting\n  Program and that the Program is the copyright of MOC Investments Corp.; and\n 2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith,\n  combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial\n  Use restriction set forth herein.\n \n“Non-Commercial Use” means each use as described in clauses (1)-(3) below, as reasonably determined by MOC Investments\nCorp. in its sole discretion:\n 1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each\n case without any anticipated commercial application;\n 2. use by any charitable organization, educational institution, public research organization, public safety or health\n organization, environmental protection organization or government institution; or\n 3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally\n do not exceed 10,000 at any time.\n \nYou will not use any trade mark, service mark, trade name, logo of MOC Investments Corp. or any other company or\norganization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks,\nnames or logos.\n \nIf you have any questions, comments or interest in pursuing any other use cases, please reach out to us\nat moc.license@moneyonchain.com.\n\n*/\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev Interface of the old MOC Oracle\n */\ninterface IPriceProvider {\n    // Legacy function compatible with old MOC Oracle.\n    // returns a tuple (uint256, bool) that corresponds\n    // to the price and if it is not expired.\n    function peek() external view returns (bytes32, bool);\n\n    // Return the current price.\n    function getPrice() external view returns (uint256);\n\n    // Return if the price is not expired.\n    function getIsValid() external view returns (bool);\n\n    // Returns the block number of the last publication.\n    function getLastPublicationBlock() external view returns (uint256);\n\n    // Return the result of getPrice, getIsValid and getLastPublicationBlock at once.\n    function getPriceInfo()\n        external\n        view\n        returns (\n            uint256 price,\n            bool isValid,\n            uint256 lastPubBlock\n        );\n}\n\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n/// @title This contract provides an interface for feeding prices from oracles, and\n///        get the current price. One contract must be instanced per supported coin pair,\n///        and registered through OracleManager global contract.\ncontract CoinPairPriceFree is Initializable, IPriceProvider {\n    IPriceProvider public coinPairPrice;\n\n    function initialize(IPriceProvider _coinPairPrice) public initializer {\n        coinPairPrice = _coinPairPrice;\n    }\n\n    /// @notice Return the current price, compatible with old MOC Oracle\n    function peek() external override view returns (bytes32, bool) {\n        return coinPairPrice.peek();\n    }\n\n    // Return the current price.\n    function getPrice() external override view returns (uint256) {\n        (bytes32 price, ) = coinPairPrice.peek();\n        return uint256(price);\n    }\n\n    // Return if the price is not expired.\n    function getIsValid() external override view returns (bool) {\n        (, bool valid) = coinPairPrice.peek();\n        return valid;\n    }\n\n    // Returns the block number of the last publication.\n    function getLastPublicationBlock() external override view returns (uint256) {\n        return coinPairPrice.getLastPublicationBlock();\n    }\n\n    // Return the result of getPrice, getIsValid and getLastPublicationBlock at once.\n    function getPriceInfo()\n        external\n        override\n        view\n        returns (\n            uint256 price,\n            bool isValid,\n            uint256 lastPubBlock\n        )\n    {\n        // This is compatible with the old implementation of a coinPairPrice\n        lastPubBlock = coinPairPrice.getLastPublicationBlock();\n        bytes32 price32;\n        (price32, isValid) = coinPairPrice.peek();\n        return (uint256(price32), isValid, lastPubBlock);\n    }\n}\n\n",
    "imports": [
        {
            "name": "CoinPairPriceFreeFlat.sol",
            "contents": "/*\nCopyright MOC Investments Corp. 2020. All rights reserved.\n \nYou acknowledge and agree that MOC Investments Corp. (“MOC”) (or MOC’s licensors) own all legal right, title and\ninterest in and to the work, software, application, source code, documentation and any other documents in this\nrepository (collectively, the “Program”), including any intellectual property rights which subsist in the\nProgram (whether those rights happen to be registered or not, and wherever in the world those rights may exist),\nwhether in source code or any other form.\n \nSubject to the limited license below, you may not (and you may not permit anyone else to) distribute, publish, copy,\nmodify, merge, combine with another program, create derivative works of, reverse engineer, decompile or otherwise\nattempt to extract the source code of, the Program or any part thereof, except that you may contribute to\nthis repository.\n \nYou are granted a non-exclusive, non-transferable, non-sublicensable license to distribute, publish, copy, modify,\nmerge, combine with another program or create derivative works of the Program (such resulting program, collectively,\nthe “Resulting Program”) solely for Non-Commercial Use as long as you:\n 1. give prominent notice (“Notice”) with each copy of the Resulting Program that the Program is used in the Resulting\n  Program and that the Program is the copyright of MOC Investments Corp.; and\n 2. subject the Resulting Program and any distribution, publication, copy, modification, merger therewith,\n  combination with another program or derivative works thereof to the same Notice requirement and Non-Commercial\n  Use restriction set forth herein.\n \n“Non-Commercial Use” means each use as described in clauses (1)-(3) below, as reasonably determined by MOC Investments\nCorp. in its sole discretion:\n 1. personal use for research, personal study, private entertainment, hobby projects or amateur pursuits, in each\n case without any anticipated commercial application;\n 2. use by any charitable organization, educational institution, public research organization, public safety or health\n organization, environmental protection organization or government institution; or\n 3. the number of monthly active users of the Resulting Program across all versions thereof and platforms globally\n do not exceed 10,000 at any time.\n \nYou will not use any trade mark, service mark, trade name, logo of MOC Investments Corp. or any other company or\norganization in a way that is likely or intended to cause confusion about the owner or authorized user of such marks,\nnames or logos.\n \nIf you have any questions, comments or interest in pursuing any other use cases, please reach out to us\nat moc.license@moneyonchain.com.\n\n*/\n\npragma solidity 0.6.12;\n\n\n/**\n * @dev Interface of the old MOC Oracle\n */\ninterface IPriceProvider {\n    // Legacy function compatible with old MOC Oracle.\n    // returns a tuple (uint256, bool) that corresponds\n    // to the price and if it is not expired.\n    function peek() external view returns (bytes32, bool);\n\n    // Return the current price.\n    function getPrice() external view returns (uint256);\n\n    // Return if the price is not expired.\n    function getIsValid() external view returns (bool);\n\n    // Returns the block number of the last publication.\n    function getLastPublicationBlock() external view returns (uint256);\n\n    // Return the result of getPrice, getIsValid and getLastPublicationBlock at once.\n    function getPriceInfo()\n        external\n        view\n        returns (\n            uint256 price,\n            bool isValid,\n            uint256 lastPubBlock\n        );\n}\n\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n/// @title This contract provides an interface for feeding prices from oracles, and\n///        get the current price. One contract must be instanced per supported coin pair,\n///        and registered through OracleManager global contract.\ncontract CoinPairPriceFree is Initializable, IPriceProvider {\n    IPriceProvider public coinPairPrice;\n\n    function initialize(IPriceProvider _coinPairPrice) public initializer {\n        coinPairPrice = _coinPairPrice;\n    }\n\n    /// @notice Return the current price, compatible with old MOC Oracle\n    function peek() external override view returns (bytes32, bool) {\n        return coinPairPrice.peek();\n    }\n\n    // Return the current price.\n    function getPrice() external override view returns (uint256) {\n        (bytes32 price, ) = coinPairPrice.peek();\n        return uint256(price);\n    }\n\n    // Return if the price is not expired.\n    function getIsValid() external override view returns (bool) {\n        (, bool valid) = coinPairPrice.peek();\n        return valid;\n    }\n\n    // Returns the block number of the last publication.\n    function getLastPublicationBlock() external override view returns (uint256) {\n        return coinPairPrice.getLastPublicationBlock();\n    }\n\n    // Return the result of getPrice, getIsValid and getLastPublicationBlock at once.\n    function getPriceInfo()\n        external\n        override\n        view\n        returns (\n            uint256 price,\n            bool isValid,\n            uint256 lastPubBlock\n        )\n    {\n        // This is compatible with the old implementation of a coinPairPrice\n        lastPubBlock = coinPairPrice.getLastPublicationBlock();\n        bytes32 price32;\n        (price32, isValid) = coinPairPrice.peek();\n        return (uint256(price32), isValid, lastPubBlock);\n    }\n}\n\n",
            "file": "CoinPairPriceFreeFlat.sol"
        }
    ],
    "libraries": {},
    "creationData": {
        "blockHash": "0xee6394fc2eacdb2766a2d8283c7797c44314b6b02245e15c0ff7ac0775db746a",
        "blockNumber": 3061945,
        "transactionHash": "0x563992af4ca2bfef43057da61e6ee2749b6468450ff593c6fb220f99112fb551",
        "timestamp": 1611866326
    }
}