{
  "address": "0x4106e4bb0c339cf7e8adc64cf889f261fef1e789",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "MocBTCToUSDOracle",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.4.26+commit.4563c3fc",
  "source": "pragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    Chainlink Price Oracle interface\r\n*/\r\ninterface IConsumerPriceOracle {\r\n    function latestAnswer() external view returns (int256);\r\n    function latestTimestamp() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface Medianizer {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ncontract MocBTCToUSDOracle is IConsumerPriceOracle, Owned {\r\n\r\n    address public mocOracleAddress;\r\n\r\n    event SetMoCOracleAddress(address indexed mocOracleAddress, address changerAddress);\r\n\r\n    /**\r\n      * @dev initializes a ne MoC oracle\r\n      *\r\n      * @param _mocOracleAddress MoC oracle address\r\n    */\r\n    constructor(address _mocOracleAddress) public {\r\n        setMoCOracleAddress(_mocOracleAddress);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the USD/BTC rate.\r\n      *\r\n      * @return MoC medianizer rate\r\n    */\r\n    function latestAnswer() external view returns (int256) {\r\n        (bytes32 value, bool hasValue) = Medianizer(mocOracleAddress).peek();\r\n        require(hasValue, \"Doesn't has value\");\r\n        return int256(value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the USD/BTC update time.\r\n      *\r\n      * @return always returns current block's timestamp\r\n    */\r\n    function latestTimestamp() external view returns (uint256) {\r\n        return now; // MoC oracle doesn't return update timestamp\r\n    }\r\n\r\n    /**\r\n      * @dev set MoC oracle address\r\n      *\r\n      * @param _mocOracleAddress MoC oracle address\r\n    */\r\n    function setMoCOracleAddress(address _mocOracleAddress) public ownerOnly {\r\n        require(_mocOracleAddress != address(0), \"_mocOracleAddress shall not be zero address\");\r\n        mocOracleAddress = _mocOracleAddress;\r\n        emit SetMoCOracleAddress(mocOracleAddress, msg.sender);\r\n    }\r\n}\r\n\r\n\r\n\r\n",
  "imports": [
    {
      "name": "15_MocBTCToUSDOracle_flat.sol",
      "contents": "pragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    Chainlink Price Oracle interface\r\n*/\r\ninterface IConsumerPriceOracle {\r\n    function latestAnswer() external view returns (int256);\r\n    function latestTimestamp() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\ninterface Medianizer {\r\n    function peek() external view returns (bytes32, bool);\r\n}\r\n\r\ncontract MocBTCToUSDOracle is IConsumerPriceOracle, Owned {\r\n\r\n    address public mocOracleAddress;\r\n\r\n    event SetMoCOracleAddress(address indexed mocOracleAddress, address changerAddress);\r\n\r\n    /**\r\n      * @dev initializes a ne MoC oracle\r\n      *\r\n      * @param _mocOracleAddress MoC oracle address\r\n    */\r\n    constructor(address _mocOracleAddress) public {\r\n        setMoCOracleAddress(_mocOracleAddress);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the USD/BTC rate.\r\n      *\r\n      * @return MoC medianizer rate\r\n    */\r\n    function latestAnswer() external view returns (int256) {\r\n        (bytes32 value, bool hasValue) = Medianizer(mocOracleAddress).peek();\r\n        require(hasValue, \"Doesn't has value\");\r\n        return int256(value);\r\n    }\r\n\r\n    /**\r\n      * @dev returns the USD/BTC update time.\r\n      *\r\n      * @return always returns current block's timestamp\r\n    */\r\n    function latestTimestamp() external view returns (uint256) {\r\n        return now; // MoC oracle doesn't return update timestamp\r\n    }\r\n\r\n    /**\r\n      * @dev set MoC oracle address\r\n      *\r\n      * @param _mocOracleAddress MoC oracle address\r\n    */\r\n    function setMoCOracleAddress(address _mocOracleAddress) public ownerOnly {\r\n        require(_mocOracleAddress != address(0), \"_mocOracleAddress shall not be zero address\");\r\n        mocOracleAddress = _mocOracleAddress;\r\n        emit SetMoCOracleAddress(mocOracleAddress, msg.sender);\r\n    }\r\n}\r\n\r\n\r\n\r\n",
      "file": "15_MocBTCToUSDOracle_flat.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0xb70b3f7334dc8c6d981843fccb65d25fd0f6462c6f02784c4250de97b823dfa6",
    "blockNumber": 2742640,
    "transactionHash": "0xceffdb4051d66d6ba372c6ffea02fbd406e3cf3bfa1ab888416ab6cc5505c7ab",
    "timestamp": 1601484080
  },
  "constructorArguments": [
    "0x7b19bb8e6c5188ec483b784d6fb5d807a77b21bf"
  ]
}