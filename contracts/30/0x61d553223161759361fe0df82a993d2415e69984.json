{
  "address": "0x61d553223161759361fe0df82a993d2415e69984",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "ProtocolSettings",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    }
  },
  "version": "0.5.17+commit.d19bba13",
  "source": "/**\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\ncontract LoanStruct {\n    struct Loan {\n        bytes32 id; // id of the loan\n        bytes32 loanParamsId; // the linked loan params id\n        bytes32 pendingTradesId; // the linked pending trades id\n        bool active; // if false, the loan has been fully closed\n        uint256 principal; // total borrowed amount outstanding\n        uint256 collateral; // total collateral escrowed for the loan\n        uint256 startTimestamp; // loan start time\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n        uint256 startMargin; // initial margin when the loan opened\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\n        address borrower; // borrower of this loan\n        address lender; // lender of this loan\n    }\n}\n\ncontract LoanParamsStruct {\n    struct LoanParams {\n        bytes32 id; // id of loan params object\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\n        address owner; // owner of this object\n        address loanToken; // the token being loaned\n        address collateralToken; // the required collateral token\n        uint256 minInitialMargin; // the minimum allowed initial margin\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\n    }\n}\n\ncontract OrderStruct {\n    struct Order {\n        uint256 lockedAmount; // escrowed amount waiting for a counterparty\n        uint256 interestRate; // interest rate defined by the creator of this order\n        uint256 minLoanTerm; // minimum loan term allowed\n        uint256 maxLoanTerm; // maximum loan term allowed\n        uint256 createdTimestamp; // timestamp when this order was created\n        uint256 expirationTimestamp; // timestamp when this order expires\n    }\n}\n\ncontract LenderInterestStruct {\n    struct LenderInterest {\n        uint256 principalTotal; // total borrowed amount outstanding of asset\n        uint256 owedPerDay; // interest owed per day for all loans of asset\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\n        uint256 paidTotal; // total interest paid so far for asset\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract LoanInterestStruct {\n    struct LoanInterest {\n        uint256 owedPerDay; // interest owed per day for loan\n        uint256 depositTotal; // total escrowed interest for loan\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract Objects is\n    LoanStruct,\n    LoanParamsStruct,\n    OrderStruct,\n    LenderInterestStruct,\n    LoanInterestStruct\n{}\n\n/**\n * @dev Library for managing loan sets\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n *\n */\nlibrary EnumerableBytes32Set {\n    struct Bytes32Set {\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) index;\n        bytes32[] values;\n    }\n\n    /**\n     * @dev Add an address value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return addBytes32(set, value);\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (!contains(set, value)) {\n            set.index[value] = set.values.push(value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes an address value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return removeBytes32(set, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (contains(set, value)) {\n            uint256 toDeleteIndex = set.index[value] - 1;\n            uint256 lastIndex = set.values.length - 1;\n\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set.values[lastIndex];\n\n                // Move the last value to the index where the deleted value is\n                set.values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the index entry for the deleted value\n            delete set.index[value];\n\n            // Delete the old entry for the moved value\n            set.values.pop();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return set.index[value] != 0;\n    }\n\n    /**\n     * @dev Returns an array with all values in the set. O(N).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n\n     * WARNING: This function may run out of gas on large sets: use {length} and\n     * {get} instead in these cases.\n     */\n    function enumerate(\n        Bytes32Set storage set,\n        uint256 start,\n        uint256 count\n    ) internal view returns (bytes32[] memory output) {\n        uint256 end = start + count;\n        require(end >= start, \"addition overflow\");\n        end = set.values.length < end ? set.values.length : end;\n        if (end == 0 || start >= end) {\n            return output;\n        }\n\n        output = new bytes32[](end - start);\n        for (uint256 i; i < end - start; i++) {\n            output[i] = set.values[i + start];\n        }\n        return output;\n    }\n\n    /**\n     * @dev Returns the number of elements on the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return set.values.length;\n    }\n\n    /** @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function get(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return set.values[index];\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n    /// @dev Constant for locked guard state\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * If you mark a function `nonReentrant`, you should also\n     * mark it `external`. Calling one `nonReentrant` function from\n     * another is not supported. Instead, you can implement a\n     * `private` function doing the actual work, and an `external`\n     * wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n        _;\n        reentrancyLock = REENTRANCY_GUARD_FREE;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\ncontract State is Objects, ReentrancyGuard, Ownable {\n    using SafeMathSovryn for uint256;\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n\n    address public priceFeeds; // handles asset reference price lookups\n    address public swapsImpl; // handles asset swaps using dex liquidity\n    address public sovrynSwapContractRegistryAddress; // contract registry address of the sovryn swap network\n\n    mapping(bytes4 => address) public logicTargets; // implementations of protocol functions\n\n    mapping(bytes32 => Loan) public loans; // loanId => Loan\n    mapping(bytes32 => LoanParams) public loanParams; // loanParamsId => LoanParams\n\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders; // lender => orderParamsId => Order\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders; // borrower => orderParamsId => Order\n\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers; // loanId => delegated => approved\n\n    // Interest\n    mapping(address => mapping(address => LenderInterest))\n        public lenderInterest; // lender => loanToken => LenderInterest object\n    mapping(bytes32 => LoanInterest) public loanInterest; // loanId => LoanInterest object\n\n    // Internals\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet; // implementations set\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet; // active loans set\n\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets; // lender loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal borrowerLoanSets; // borrow loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal userLoanParamSets; // user loan params set\n\n    address public feesController; // address controlling fee withdrawals\n\n    uint256 public lendingFeePercent = 10**19; // 10% fee                               // fee taken from lender interest payments\n    mapping(address => uint256) public lendingFeeTokensHeld; // total interest fees received and not withdrawn per asset\n    mapping(address => uint256) public lendingFeeTokensPaid; // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\n\n    uint256 public tradingFeePercent = 15 * 10**16; // 0.15% fee                        // fee paid for each trade\n    mapping(address => uint256) public tradingFeeTokensHeld; // total trading fees received and not withdrawn per asset\n    mapping(address => uint256) public tradingFeeTokensPaid; // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\n\n    uint256 public borrowingFeePercent = 9 * 10**16; // 0.09% fee                       // origination fee paid for each loan\n    mapping(address => uint256) public borrowingFeeTokensHeld; // total borrowing fees received and not withdrawn per asset\n    mapping(address => uint256) public borrowingFeeTokensPaid; // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\n\n    uint256 public protocolTokenHeld; // current protocol token deposit balance\n    uint256 public protocolTokenPaid; // lifetime total payout of protocol token\n\n    uint256 public affiliateFeePercent = 30 * 10**18; // 30% fee share                  // fee share for affiliate program\n\n    uint256 public liquidationIncentivePercent = 5 * 10**18; // 5% collateral discount  // discount on collateral for liquidators\n\n    mapping(address => address) public loanPoolToUnderlying; // loanPool => underlying\n    mapping(address => address) public underlyingToLoanPool; // underlying => loanPool\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet; // loan pools set\n\n    mapping(address => bool) public supportedTokens; // supported tokens for swaps\n\n    uint256 public maxDisagreement = 5 * 10**18; // % disagreement between swap rate and reference rate\n\n    uint256 public sourceBuffer = 10000; // used as buffer for swap source amount estimations\n\n    uint256 public maxSwapSize = 50 ether; // maximum support swap size in BTC\n\n    mapping(address => uint256) public borrowerNonce; // nonce per borrower. used for loan id creation.\n\n    uint256 public rolloverBaseReward = 16800000000000; // Rollover transaction costs around 0.0000168 rBTC, it is denominated in wRBTC\n    uint256 public rolloverFlexFeePercent = 0.1 ether; // 0.1%\n\n    IWrbtcERC20 public wrbtcToken;\n    address public protocolTokenAddress;\n\n    function _setTarget(bytes4 sig, address target) internal {\n        logicTargets[sig] = target;\n\n        if (target != address(0)) {\n            logicTargetsSet.addBytes32(bytes32(sig));\n        } else {\n            logicTargetsSet.removeBytes32(bytes32(sig));\n        }\n    }\n}\n\ncontract ProtocolSettingsEvents {\n    event SetPriceFeedContract(\n        address indexed sender,\n        address oldValue,\n        address newValue\n    );\n\n    event SetSwapsImplContract(\n        address indexed sender,\n        address oldValue,\n        address newValue\n    );\n\n    event SetLoanPool(\n        address indexed sender,\n        address indexed loanPool,\n        address indexed underlying\n    );\n\n    event SetSupportedTokens(\n        address indexed sender,\n        address indexed token,\n        bool isActive\n    );\n\n    event SetLendingFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetTradingFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetBorrowingFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetAffiliateFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetLiquidationIncentivePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetMaxSwapSize(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetFeesController(\n        address indexed sender,\n        address indexed oldController,\n        address indexed newController\n    );\n\n    event SetWrbtcToken(\n        address indexed sender,\n        address indexed oldWethToken,\n        address indexed newWethToken\n    );\n\n    event SetSovrynSwapContractRegistryAddress(\n        address indexed sender,\n        address indexed oldSovrynSwapContractRegistryAddress,\n        address indexed newSovrynSwapContractRegistryAddress\n    );\n\n    event SetProtocolTokenAddress(\n        address indexed sender,\n        address indexed oldProtocolToken,\n        address indexed newProtocolToken\n    );\n\n    event WithdrawLendingFees(\n        address indexed sender,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event WithdrawTradingFees(\n        address indexed sender,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event WithdrawBorrowingFees(\n        address indexed sender,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event SetRolloverBaseReward(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMathSovryn for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20Sovryn token,\n        address to,\n        uint256 value\n    ) internal {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20Sovryn token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function safeApprove(\n        IERC20Sovryn token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Sovryn token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(\n            value\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Sovryn token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20Sovryn token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\ncontract ProtocolTokenUser is State {\n    using SafeERC20 for IERC20Sovryn;\n\n    function _withdrawProtocolToken(address receiver, uint256 amount)\n        internal\n        returns (address, bool)\n    {\n        uint256 withdrawAmount = amount;\n\n        uint256 tokenBalance = protocolTokenHeld;\n        if (withdrawAmount > tokenBalance) {\n            withdrawAmount = tokenBalance;\n        }\n        if (withdrawAmount == 0) {\n            return (protocolTokenAddress, false);\n        }\n\n        protocolTokenHeld = tokenBalance.sub(withdrawAmount);\n\n        IERC20Sovryn(protocolTokenAddress).safeTransfer(\n            receiver,\n            withdrawAmount\n        );\n\n        return (protocolTokenAddress, true);\n    }\n}\n\ncontract ProtocolSettings is State, ProtocolTokenUser, ProtocolSettingsEvents {\n    using SafeERC20 for IERC20Sovryn;\n\n    constructor() public {}\n\n    function() external {\n        revert(\"fallback not allowed\");\n    }\n\n    function initialize(address target) external onlyOwner {\n        _setTarget(this.setPriceFeedContract.selector, target);\n        _setTarget(this.setSwapsImplContract.selector, target);\n        _setTarget(this.setLoanPool.selector, target);\n        _setTarget(this.setSupportedTokens.selector, target);\n        _setTarget(this.setLendingFeePercent.selector, target);\n        _setTarget(this.setTradingFeePercent.selector, target);\n        _setTarget(this.setBorrowingFeePercent.selector, target);\n        _setTarget(this.setAffiliateFeePercent.selector, target);\n        _setTarget(this.setLiquidationIncentivePercent.selector, target);\n        _setTarget(this.setMaxDisagreement.selector, target);\n        _setTarget(this.setSourceBuffer.selector, target);\n        _setTarget(this.setMaxSwapSize.selector, target);\n        _setTarget(this.setFeesController.selector, target);\n        _setTarget(this.withdrawLendingFees.selector, target);\n        _setTarget(this.withdrawTradingFees.selector, target);\n        _setTarget(this.withdrawBorrowingFees.selector, target);\n        _setTarget(this.withdrawProtocolToken.selector, target);\n        _setTarget(this.depositProtocolToken.selector, target);\n        _setTarget(this.getLoanPoolsList.selector, target);\n        _setTarget(this.isLoanPool.selector, target);\n        _setTarget(this.setSovrynSwapContractRegistryAddress.selector, target);\n        _setTarget(this.setWrbtcToken.selector, target);\n        _setTarget(this.setProtocolTokenAddress.selector, target);\n        _setTarget(this.setRolloverBaseReward.selector, target);\n    }\n\n    function setPriceFeedContract(address newContract) external onlyOwner {\n        address oldContract = priceFeeds;\n        priceFeeds = newContract;\n\n        emit SetPriceFeedContract(msg.sender, oldContract, newContract);\n    }\n\n    function setSwapsImplContract(address newContract) external onlyOwner {\n        address oldContract = swapsImpl;\n        swapsImpl = newContract;\n\n        emit SetSwapsImplContract(msg.sender, oldContract, newContract);\n    }\n\n    function setLoanPool(address[] calldata pools, address[] calldata assets)\n        external\n        onlyOwner\n    {\n        require(pools.length == assets.length, \"count mismatch\");\n\n        for (uint256 i = 0; i < pools.length; i++) {\n            require(pools[i] != assets[i], \"pool == asset\");\n            require(pools[i] != address(0), \"pool == 0\");\n            require(\n                assets[i] != address(0) ||\n                    loanPoolToUnderlying[pools[i]] != address(0),\n                \"pool not exists\"\n            );\n            if (assets[i] == address(0)) {\n                underlyingToLoanPool[loanPoolToUnderlying[pools[i]]] = address(\n                    0\n                );\n                loanPoolToUnderlying[pools[i]] = address(0);\n                loanPoolsSet.removeAddress(pools[i]);\n            } else {\n                loanPoolToUnderlying[pools[i]] = assets[i];\n                underlyingToLoanPool[assets[i]] = pools[i];\n                loanPoolsSet.addAddress(pools[i]);\n            }\n\n            emit SetLoanPool(msg.sender, pools[i], assets[i]);\n        }\n    }\n\n    function setSupportedTokens(\n        address[] calldata addrs,\n        bool[] calldata toggles\n    ) external onlyOwner {\n        require(addrs.length == toggles.length, \"count mismatch\");\n\n        for (uint256 i = 0; i < addrs.length; i++) {\n            supportedTokens[addrs[i]] = toggles[i];\n\n            emit SetSupportedTokens(msg.sender, addrs[i], toggles[i]);\n        }\n    }\n\n    function setLendingFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = lendingFeePercent;\n        lendingFeePercent = newValue;\n\n        emit SetLendingFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setTradingFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = tradingFeePercent;\n        tradingFeePercent = newValue;\n\n        emit SetTradingFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setBorrowingFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = borrowingFeePercent;\n        borrowingFeePercent = newValue;\n\n        emit SetBorrowingFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setAffiliateFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = affiliateFeePercent;\n        affiliateFeePercent = newValue;\n\n        emit SetAffiliateFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setLiquidationIncentivePercent(uint256 newValue)\n        external\n        onlyOwner\n    {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = liquidationIncentivePercent;\n        liquidationIncentivePercent = newValue;\n\n        emit SetLiquidationIncentivePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setMaxDisagreement(uint256 newValue) external onlyOwner {\n        maxDisagreement = newValue;\n    }\n\n    function setSourceBuffer(uint256 newValue) external onlyOwner {\n        sourceBuffer = newValue;\n    }\n\n    function setMaxSwapSize(uint256 newValue) external onlyOwner {\n        uint256 oldValue = maxSwapSize;\n        maxSwapSize = newValue;\n\n        emit SetMaxSwapSize(msg.sender, oldValue, newValue);\n    }\n\n    function setFeesController(address newController) external onlyOwner {\n        address oldController = feesController;\n        feesController = newController;\n\n        emit SetFeesController(msg.sender, oldController, newController);\n    }\n\n    function withdrawLendingFees(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external returns (bool) {\n        require(msg.sender == feesController, \"unauthorized\");\n\n        uint256 withdrawAmount = amount;\n\n        uint256 balance = lendingFeeTokensHeld[token];\n        if (withdrawAmount > balance) {\n            withdrawAmount = balance;\n        }\n        if (withdrawAmount == 0) {\n            return false;\n        }\n\n        lendingFeeTokensHeld[token] = balance.sub(withdrawAmount);\n        lendingFeeTokensPaid[token] = lendingFeeTokensPaid[token].add(\n            withdrawAmount\n        );\n\n        IERC20Sovryn(token).safeTransfer(receiver, withdrawAmount);\n\n        emit WithdrawLendingFees(msg.sender, token, receiver, withdrawAmount);\n\n        return true;\n    }\n\n    function withdrawTradingFees(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external returns (bool) {\n        require(msg.sender == feesController, \"unauthorized\");\n\n        uint256 withdrawAmount = amount;\n\n        uint256 balance = tradingFeeTokensHeld[token];\n        if (withdrawAmount > balance) {\n            withdrawAmount = balance;\n        }\n        if (withdrawAmount == 0) {\n            return false;\n        }\n\n        tradingFeeTokensHeld[token] = balance.sub(withdrawAmount);\n        tradingFeeTokensPaid[token] = tradingFeeTokensPaid[token].add(\n            withdrawAmount\n        );\n\n        IERC20Sovryn(token).safeTransfer(receiver, withdrawAmount);\n\n        emit WithdrawTradingFees(msg.sender, token, receiver, withdrawAmount);\n\n        return true;\n    }\n\n    function withdrawBorrowingFees(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external returns (bool) {\n        require(msg.sender == feesController, \"unauthorized\");\n\n        uint256 withdrawAmount = amount;\n\n        uint256 balance = borrowingFeeTokensHeld[token];\n        if (withdrawAmount > balance) {\n            withdrawAmount = balance;\n        }\n        if (withdrawAmount == 0) {\n            return false;\n        }\n\n        borrowingFeeTokensHeld[token] = balance.sub(withdrawAmount);\n        borrowingFeeTokensPaid[token] = borrowingFeeTokensPaid[token].add(\n            withdrawAmount\n        );\n\n        IERC20Sovryn(token).safeTransfer(receiver, withdrawAmount);\n\n        emit WithdrawBorrowingFees(msg.sender, token, receiver, withdrawAmount);\n\n        return true;\n    }\n\n    function withdrawProtocolToken(address receiver, uint256 amount)\n        external\n        onlyOwner\n        returns (address, bool)\n    {\n        return _withdrawProtocolToken(receiver, amount);\n    }\n\n    function depositProtocolToken(uint256 amount) external onlyOwner {\n        protocolTokenHeld = protocolTokenHeld.add(amount);\n\n        IERC20Sovryn(protocolTokenAddress).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    function getLoanPoolsList(uint256 start, uint256 count)\n        external\n        view\n        returns (bytes32[] memory)\n    {\n        return loanPoolsSet.enumerate(start, count);\n    }\n\n    function isLoanPool(address loanPool) external view returns (bool) {\n        return loanPoolToUnderlying[loanPool] != address(0);\n    }\n\n    /**\n     * sets the contract registry address of the SovrynSwap network\n     * @param registryAddress the address of the registry contract\n     * */\n    function setSovrynSwapContractRegistryAddress(address registryAddress)\n        external\n        onlyOwner\n    {\n        require(\n            Address.isContract(registryAddress),\n            \"registryAddress not a contract\"\n        );\n\n\n            address oldSovrynSwapContractRegistryAddress\n         = sovrynSwapContractRegistryAddress;\n        sovrynSwapContractRegistryAddress = registryAddress;\n\n        emit SetSovrynSwapContractRegistryAddress(\n            msg.sender,\n            oldSovrynSwapContractRegistryAddress,\n            sovrynSwapContractRegistryAddress\n        );\n    }\n\n    function setWrbtcToken(address wrbtcTokenAddress) external onlyOwner {\n        require(\n            Address.isContract(wrbtcTokenAddress),\n            \"wrbtcTokenAddress not a contract\"\n        );\n\n        address oldwrbtcToken = address(wrbtcToken);\n        wrbtcToken = IWrbtcERC20(wrbtcTokenAddress);\n\n        emit SetWrbtcToken(msg.sender, oldwrbtcToken, wrbtcTokenAddress);\n    }\n\n    function setProtocolTokenAddress(address _protocolTokenAddress)\n        external\n        onlyOwner\n    {\n        require(\n            Address.isContract(_protocolTokenAddress),\n            \"_protocolTokenAddress not a contract\"\n        );\n\n        address oldProtocolTokenAddress = protocolTokenAddress;\n        protocolTokenAddress = _protocolTokenAddress;\n\n        emit SetProtocolTokenAddress(\n            msg.sender,\n            oldProtocolTokenAddress,\n            _protocolTokenAddress\n        );\n    }\n\n    /**\n     * @dev set rollover base reward. It should be denominated in wRBTC\n     */\n    function setRolloverBaseReward(uint256 baseRewardValue) external onlyOwner {\n        require(baseRewardValue > 0, \"Base reward is zero\");\n\n        uint256 oldValue = rolloverBaseReward;\n        rolloverBaseReward = baseRewardValue;\n\n        emit SetRolloverBaseReward(msg.sender, oldValue, rolloverBaseReward);\n    }\n}\n",
  "imports": [
    {
      "name": "ProtocolSettings_Dpl.sol",
      "contents": "/**\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\ncontract LoanStruct {\n    struct Loan {\n        bytes32 id; // id of the loan\n        bytes32 loanParamsId; // the linked loan params id\n        bytes32 pendingTradesId; // the linked pending trades id\n        bool active; // if false, the loan has been fully closed\n        uint256 principal; // total borrowed amount outstanding\n        uint256 collateral; // total collateral escrowed for the loan\n        uint256 startTimestamp; // loan start time\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n        uint256 startMargin; // initial margin when the loan opened\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\n        address borrower; // borrower of this loan\n        address lender; // lender of this loan\n    }\n}\n\ncontract LoanParamsStruct {\n    struct LoanParams {\n        bytes32 id; // id of loan params object\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\n        address owner; // owner of this object\n        address loanToken; // the token being loaned\n        address collateralToken; // the required collateral token\n        uint256 minInitialMargin; // the minimum allowed initial margin\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\n    }\n}\n\ncontract OrderStruct {\n    struct Order {\n        uint256 lockedAmount; // escrowed amount waiting for a counterparty\n        uint256 interestRate; // interest rate defined by the creator of this order\n        uint256 minLoanTerm; // minimum loan term allowed\n        uint256 maxLoanTerm; // maximum loan term allowed\n        uint256 createdTimestamp; // timestamp when this order was created\n        uint256 expirationTimestamp; // timestamp when this order expires\n    }\n}\n\ncontract LenderInterestStruct {\n    struct LenderInterest {\n        uint256 principalTotal; // total borrowed amount outstanding of asset\n        uint256 owedPerDay; // interest owed per day for all loans of asset\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\n        uint256 paidTotal; // total interest paid so far for asset\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract LoanInterestStruct {\n    struct LoanInterest {\n        uint256 owedPerDay; // interest owed per day for loan\n        uint256 depositTotal; // total escrowed interest for loan\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract Objects is\n    LoanStruct,\n    LoanParamsStruct,\n    OrderStruct,\n    LenderInterestStruct,\n    LoanInterestStruct\n{}\n\n/**\n * @dev Library for managing loan sets\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n *\n */\nlibrary EnumerableBytes32Set {\n    struct Bytes32Set {\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) index;\n        bytes32[] values;\n    }\n\n    /**\n     * @dev Add an address value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return addBytes32(set, value);\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (!contains(set, value)) {\n            set.index[value] = set.values.push(value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes an address value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return removeBytes32(set, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (contains(set, value)) {\n            uint256 toDeleteIndex = set.index[value] - 1;\n            uint256 lastIndex = set.values.length - 1;\n\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set.values[lastIndex];\n\n                // Move the last value to the index where the deleted value is\n                set.values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the index entry for the deleted value\n            delete set.index[value];\n\n            // Delete the old entry for the moved value\n            set.values.pop();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return set.index[value] != 0;\n    }\n\n    /**\n     * @dev Returns an array with all values in the set. O(N).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n\n     * WARNING: This function may run out of gas on large sets: use {length} and\n     * {get} instead in these cases.\n     */\n    function enumerate(\n        Bytes32Set storage set,\n        uint256 start,\n        uint256 count\n    ) internal view returns (bytes32[] memory output) {\n        uint256 end = start + count;\n        require(end >= start, \"addition overflow\");\n        end = set.values.length < end ? set.values.length : end;\n        if (end == 0 || start >= end) {\n            return output;\n        }\n\n        output = new bytes32[](end - start);\n        for (uint256 i; i < end - start; i++) {\n            output[i] = set.values[i + start];\n        }\n        return output;\n    }\n\n    /**\n     * @dev Returns the number of elements on the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return set.values.length;\n    }\n\n    /** @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function get(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return set.values[index];\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n    /// @dev Constant for locked guard state\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * If you mark a function `nonReentrant`, you should also\n     * mark it `external`. Calling one `nonReentrant` function from\n     * another is not supported. Instead, you can implement a\n     * `private` function doing the actual work, and an `external`\n     * wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n        _;\n        reentrancyLock = REENTRANCY_GUARD_FREE;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\ncontract State is Objects, ReentrancyGuard, Ownable {\n    using SafeMathSovryn for uint256;\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n\n    address public priceFeeds; // handles asset reference price lookups\n    address public swapsImpl; // handles asset swaps using dex liquidity\n    address public sovrynSwapContractRegistryAddress; // contract registry address of the sovryn swap network\n\n    mapping(bytes4 => address) public logicTargets; // implementations of protocol functions\n\n    mapping(bytes32 => Loan) public loans; // loanId => Loan\n    mapping(bytes32 => LoanParams) public loanParams; // loanParamsId => LoanParams\n\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders; // lender => orderParamsId => Order\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders; // borrower => orderParamsId => Order\n\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers; // loanId => delegated => approved\n\n    // Interest\n    mapping(address => mapping(address => LenderInterest))\n        public lenderInterest; // lender => loanToken => LenderInterest object\n    mapping(bytes32 => LoanInterest) public loanInterest; // loanId => LoanInterest object\n\n    // Internals\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet; // implementations set\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet; // active loans set\n\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets; // lender loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal borrowerLoanSets; // borrow loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal userLoanParamSets; // user loan params set\n\n    address public feesController; // address controlling fee withdrawals\n\n    uint256 public lendingFeePercent = 10**19; // 10% fee                               // fee taken from lender interest payments\n    mapping(address => uint256) public lendingFeeTokensHeld; // total interest fees received and not withdrawn per asset\n    mapping(address => uint256) public lendingFeeTokensPaid; // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\n\n    uint256 public tradingFeePercent = 15 * 10**16; // 0.15% fee                        // fee paid for each trade\n    mapping(address => uint256) public tradingFeeTokensHeld; // total trading fees received and not withdrawn per asset\n    mapping(address => uint256) public tradingFeeTokensPaid; // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\n\n    uint256 public borrowingFeePercent = 9 * 10**16; // 0.09% fee                       // origination fee paid for each loan\n    mapping(address => uint256) public borrowingFeeTokensHeld; // total borrowing fees received and not withdrawn per asset\n    mapping(address => uint256) public borrowingFeeTokensPaid; // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\n\n    uint256 public protocolTokenHeld; // current protocol token deposit balance\n    uint256 public protocolTokenPaid; // lifetime total payout of protocol token\n\n    uint256 public affiliateFeePercent = 30 * 10**18; // 30% fee share                  // fee share for affiliate program\n\n    uint256 public liquidationIncentivePercent = 5 * 10**18; // 5% collateral discount  // discount on collateral for liquidators\n\n    mapping(address => address) public loanPoolToUnderlying; // loanPool => underlying\n    mapping(address => address) public underlyingToLoanPool; // underlying => loanPool\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet; // loan pools set\n\n    mapping(address => bool) public supportedTokens; // supported tokens for swaps\n\n    uint256 public maxDisagreement = 5 * 10**18; // % disagreement between swap rate and reference rate\n\n    uint256 public sourceBuffer = 10000; // used as buffer for swap source amount estimations\n\n    uint256 public maxSwapSize = 50 ether; // maximum support swap size in BTC\n\n    mapping(address => uint256) public borrowerNonce; // nonce per borrower. used for loan id creation.\n\n    uint256 public rolloverBaseReward = 16800000000000; // Rollover transaction costs around 0.0000168 rBTC, it is denominated in wRBTC\n    uint256 public rolloverFlexFeePercent = 0.1 ether; // 0.1%\n\n    IWrbtcERC20 public wrbtcToken;\n    address public protocolTokenAddress;\n\n    function _setTarget(bytes4 sig, address target) internal {\n        logicTargets[sig] = target;\n\n        if (target != address(0)) {\n            logicTargetsSet.addBytes32(bytes32(sig));\n        } else {\n            logicTargetsSet.removeBytes32(bytes32(sig));\n        }\n    }\n}\n\ncontract ProtocolSettingsEvents {\n    event SetPriceFeedContract(\n        address indexed sender,\n        address oldValue,\n        address newValue\n    );\n\n    event SetSwapsImplContract(\n        address indexed sender,\n        address oldValue,\n        address newValue\n    );\n\n    event SetLoanPool(\n        address indexed sender,\n        address indexed loanPool,\n        address indexed underlying\n    );\n\n    event SetSupportedTokens(\n        address indexed sender,\n        address indexed token,\n        bool isActive\n    );\n\n    event SetLendingFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetTradingFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetBorrowingFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetAffiliateFeePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetLiquidationIncentivePercent(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetMaxSwapSize(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n\n    event SetFeesController(\n        address indexed sender,\n        address indexed oldController,\n        address indexed newController\n    );\n\n    event SetWrbtcToken(\n        address indexed sender,\n        address indexed oldWethToken,\n        address indexed newWethToken\n    );\n\n    event SetSovrynSwapContractRegistryAddress(\n        address indexed sender,\n        address indexed oldSovrynSwapContractRegistryAddress,\n        address indexed newSovrynSwapContractRegistryAddress\n    );\n\n    event SetProtocolTokenAddress(\n        address indexed sender,\n        address indexed oldProtocolToken,\n        address indexed newProtocolToken\n    );\n\n    event WithdrawLendingFees(\n        address indexed sender,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event WithdrawTradingFees(\n        address indexed sender,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event WithdrawBorrowingFees(\n        address indexed sender,\n        address indexed token,\n        address indexed receiver,\n        uint256 amount\n    );\n\n    event SetRolloverBaseReward(\n        address indexed sender,\n        uint256 oldValue,\n        uint256 newValue\n    );\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * This test is non-exhaustive, and there may be false-negatives: during the\n     * execution of a contract's constructor, its address will be reported as\n     * not containing a contract.\n     *\n     * IMPORTANT: It is unsafe to assume that an address for which this\n     * function returns false is an externally-owned account (EOA) and not a\n     * contract.\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n\n            bytes32 accountHash\n         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    /**\n     * @dev Converts an `address` into `address payable`. Note that this is\n     * simply a type cast: the actual underlying value is not changed.\n     *\n     * _Available since v2.4.0._\n     */\n    function toPayable(address account)\n        internal\n        pure\n        returns (address payable)\n    {\n        return address(uint160(account));\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     *\n     * _Available since v2.4.0._\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-call-value\n        (bool success, ) = recipient.call.value(amount)(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMathSovryn for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20Sovryn token,\n        address to,\n        uint256 value\n    ) internal {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20Sovryn token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function safeApprove(\n        IERC20Sovryn token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Sovryn token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(\n            value\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Sovryn token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                newAllowance\n            )\n        );\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function callOptionalReturn(IERC20Sovryn token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves.\n\n        // A Solidity high level call has three parts:\n        //  1. The target address is checked to verify it contains contract code\n        //  2. The call itself is made, and success asserted\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\n        // solhint-disable-next-line max-line-length\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(\n                abi.decode(returndata, (bool)),\n                \"SafeERC20: ERC20 operation did not succeed\"\n            );\n        }\n    }\n}\n\ncontract ProtocolTokenUser is State {\n    using SafeERC20 for IERC20Sovryn;\n\n    function _withdrawProtocolToken(address receiver, uint256 amount)\n        internal\n        returns (address, bool)\n    {\n        uint256 withdrawAmount = amount;\n\n        uint256 tokenBalance = protocolTokenHeld;\n        if (withdrawAmount > tokenBalance) {\n            withdrawAmount = tokenBalance;\n        }\n        if (withdrawAmount == 0) {\n            return (protocolTokenAddress, false);\n        }\n\n        protocolTokenHeld = tokenBalance.sub(withdrawAmount);\n\n        IERC20Sovryn(protocolTokenAddress).safeTransfer(\n            receiver,\n            withdrawAmount\n        );\n\n        return (protocolTokenAddress, true);\n    }\n}\n\ncontract ProtocolSettings is State, ProtocolTokenUser, ProtocolSettingsEvents {\n    using SafeERC20 for IERC20Sovryn;\n\n    constructor() public {}\n\n    function() external {\n        revert(\"fallback not allowed\");\n    }\n\n    function initialize(address target) external onlyOwner {\n        _setTarget(this.setPriceFeedContract.selector, target);\n        _setTarget(this.setSwapsImplContract.selector, target);\n        _setTarget(this.setLoanPool.selector, target);\n        _setTarget(this.setSupportedTokens.selector, target);\n        _setTarget(this.setLendingFeePercent.selector, target);\n        _setTarget(this.setTradingFeePercent.selector, target);\n        _setTarget(this.setBorrowingFeePercent.selector, target);\n        _setTarget(this.setAffiliateFeePercent.selector, target);\n        _setTarget(this.setLiquidationIncentivePercent.selector, target);\n        _setTarget(this.setMaxDisagreement.selector, target);\n        _setTarget(this.setSourceBuffer.selector, target);\n        _setTarget(this.setMaxSwapSize.selector, target);\n        _setTarget(this.setFeesController.selector, target);\n        _setTarget(this.withdrawLendingFees.selector, target);\n        _setTarget(this.withdrawTradingFees.selector, target);\n        _setTarget(this.withdrawBorrowingFees.selector, target);\n        _setTarget(this.withdrawProtocolToken.selector, target);\n        _setTarget(this.depositProtocolToken.selector, target);\n        _setTarget(this.getLoanPoolsList.selector, target);\n        _setTarget(this.isLoanPool.selector, target);\n        _setTarget(this.setSovrynSwapContractRegistryAddress.selector, target);\n        _setTarget(this.setWrbtcToken.selector, target);\n        _setTarget(this.setProtocolTokenAddress.selector, target);\n        _setTarget(this.setRolloverBaseReward.selector, target);\n    }\n\n    function setPriceFeedContract(address newContract) external onlyOwner {\n        address oldContract = priceFeeds;\n        priceFeeds = newContract;\n\n        emit SetPriceFeedContract(msg.sender, oldContract, newContract);\n    }\n\n    function setSwapsImplContract(address newContract) external onlyOwner {\n        address oldContract = swapsImpl;\n        swapsImpl = newContract;\n\n        emit SetSwapsImplContract(msg.sender, oldContract, newContract);\n    }\n\n    function setLoanPool(address[] calldata pools, address[] calldata assets)\n        external\n        onlyOwner\n    {\n        require(pools.length == assets.length, \"count mismatch\");\n\n        for (uint256 i = 0; i < pools.length; i++) {\n            require(pools[i] != assets[i], \"pool == asset\");\n            require(pools[i] != address(0), \"pool == 0\");\n            require(\n                assets[i] != address(0) ||\n                    loanPoolToUnderlying[pools[i]] != address(0),\n                \"pool not exists\"\n            );\n            if (assets[i] == address(0)) {\n                underlyingToLoanPool[loanPoolToUnderlying[pools[i]]] = address(\n                    0\n                );\n                loanPoolToUnderlying[pools[i]] = address(0);\n                loanPoolsSet.removeAddress(pools[i]);\n            } else {\n                loanPoolToUnderlying[pools[i]] = assets[i];\n                underlyingToLoanPool[assets[i]] = pools[i];\n                loanPoolsSet.addAddress(pools[i]);\n            }\n\n            emit SetLoanPool(msg.sender, pools[i], assets[i]);\n        }\n    }\n\n    function setSupportedTokens(\n        address[] calldata addrs,\n        bool[] calldata toggles\n    ) external onlyOwner {\n        require(addrs.length == toggles.length, \"count mismatch\");\n\n        for (uint256 i = 0; i < addrs.length; i++) {\n            supportedTokens[addrs[i]] = toggles[i];\n\n            emit SetSupportedTokens(msg.sender, addrs[i], toggles[i]);\n        }\n    }\n\n    function setLendingFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = lendingFeePercent;\n        lendingFeePercent = newValue;\n\n        emit SetLendingFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setTradingFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = tradingFeePercent;\n        tradingFeePercent = newValue;\n\n        emit SetTradingFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setBorrowingFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = borrowingFeePercent;\n        borrowingFeePercent = newValue;\n\n        emit SetBorrowingFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setAffiliateFeePercent(uint256 newValue) external onlyOwner {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = affiliateFeePercent;\n        affiliateFeePercent = newValue;\n\n        emit SetAffiliateFeePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setLiquidationIncentivePercent(uint256 newValue)\n        external\n        onlyOwner\n    {\n        require(newValue <= 10**20, \"value too high\");\n        uint256 oldValue = liquidationIncentivePercent;\n        liquidationIncentivePercent = newValue;\n\n        emit SetLiquidationIncentivePercent(msg.sender, oldValue, newValue);\n    }\n\n    function setMaxDisagreement(uint256 newValue) external onlyOwner {\n        maxDisagreement = newValue;\n    }\n\n    function setSourceBuffer(uint256 newValue) external onlyOwner {\n        sourceBuffer = newValue;\n    }\n\n    function setMaxSwapSize(uint256 newValue) external onlyOwner {\n        uint256 oldValue = maxSwapSize;\n        maxSwapSize = newValue;\n\n        emit SetMaxSwapSize(msg.sender, oldValue, newValue);\n    }\n\n    function setFeesController(address newController) external onlyOwner {\n        address oldController = feesController;\n        feesController = newController;\n\n        emit SetFeesController(msg.sender, oldController, newController);\n    }\n\n    function withdrawLendingFees(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external returns (bool) {\n        require(msg.sender == feesController, \"unauthorized\");\n\n        uint256 withdrawAmount = amount;\n\n        uint256 balance = lendingFeeTokensHeld[token];\n        if (withdrawAmount > balance) {\n            withdrawAmount = balance;\n        }\n        if (withdrawAmount == 0) {\n            return false;\n        }\n\n        lendingFeeTokensHeld[token] = balance.sub(withdrawAmount);\n        lendingFeeTokensPaid[token] = lendingFeeTokensPaid[token].add(\n            withdrawAmount\n        );\n\n        IERC20Sovryn(token).safeTransfer(receiver, withdrawAmount);\n\n        emit WithdrawLendingFees(msg.sender, token, receiver, withdrawAmount);\n\n        return true;\n    }\n\n    function withdrawTradingFees(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external returns (bool) {\n        require(msg.sender == feesController, \"unauthorized\");\n\n        uint256 withdrawAmount = amount;\n\n        uint256 balance = tradingFeeTokensHeld[token];\n        if (withdrawAmount > balance) {\n            withdrawAmount = balance;\n        }\n        if (withdrawAmount == 0) {\n            return false;\n        }\n\n        tradingFeeTokensHeld[token] = balance.sub(withdrawAmount);\n        tradingFeeTokensPaid[token] = tradingFeeTokensPaid[token].add(\n            withdrawAmount\n        );\n\n        IERC20Sovryn(token).safeTransfer(receiver, withdrawAmount);\n\n        emit WithdrawTradingFees(msg.sender, token, receiver, withdrawAmount);\n\n        return true;\n    }\n\n    function withdrawBorrowingFees(\n        address token,\n        address receiver,\n        uint256 amount\n    ) external returns (bool) {\n        require(msg.sender == feesController, \"unauthorized\");\n\n        uint256 withdrawAmount = amount;\n\n        uint256 balance = borrowingFeeTokensHeld[token];\n        if (withdrawAmount > balance) {\n            withdrawAmount = balance;\n        }\n        if (withdrawAmount == 0) {\n            return false;\n        }\n\n        borrowingFeeTokensHeld[token] = balance.sub(withdrawAmount);\n        borrowingFeeTokensPaid[token] = borrowingFeeTokensPaid[token].add(\n            withdrawAmount\n        );\n\n        IERC20Sovryn(token).safeTransfer(receiver, withdrawAmount);\n\n        emit WithdrawBorrowingFees(msg.sender, token, receiver, withdrawAmount);\n\n        return true;\n    }\n\n    function withdrawProtocolToken(address receiver, uint256 amount)\n        external\n        onlyOwner\n        returns (address, bool)\n    {\n        return _withdrawProtocolToken(receiver, amount);\n    }\n\n    function depositProtocolToken(uint256 amount) external onlyOwner {\n        protocolTokenHeld = protocolTokenHeld.add(amount);\n\n        IERC20Sovryn(protocolTokenAddress).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    function getLoanPoolsList(uint256 start, uint256 count)\n        external\n        view\n        returns (bytes32[] memory)\n    {\n        return loanPoolsSet.enumerate(start, count);\n    }\n\n    function isLoanPool(address loanPool) external view returns (bool) {\n        return loanPoolToUnderlying[loanPool] != address(0);\n    }\n\n    /**\n     * sets the contract registry address of the SovrynSwap network\n     * @param registryAddress the address of the registry contract\n     * */\n    function setSovrynSwapContractRegistryAddress(address registryAddress)\n        external\n        onlyOwner\n    {\n        require(\n            Address.isContract(registryAddress),\n            \"registryAddress not a contract\"\n        );\n\n\n            address oldSovrynSwapContractRegistryAddress\n         = sovrynSwapContractRegistryAddress;\n        sovrynSwapContractRegistryAddress = registryAddress;\n\n        emit SetSovrynSwapContractRegistryAddress(\n            msg.sender,\n            oldSovrynSwapContractRegistryAddress,\n            sovrynSwapContractRegistryAddress\n        );\n    }\n\n    function setWrbtcToken(address wrbtcTokenAddress) external onlyOwner {\n        require(\n            Address.isContract(wrbtcTokenAddress),\n            \"wrbtcTokenAddress not a contract\"\n        );\n\n        address oldwrbtcToken = address(wrbtcToken);\n        wrbtcToken = IWrbtcERC20(wrbtcTokenAddress);\n\n        emit SetWrbtcToken(msg.sender, oldwrbtcToken, wrbtcTokenAddress);\n    }\n\n    function setProtocolTokenAddress(address _protocolTokenAddress)\n        external\n        onlyOwner\n    {\n        require(\n            Address.isContract(_protocolTokenAddress),\n            \"_protocolTokenAddress not a contract\"\n        );\n\n        address oldProtocolTokenAddress = protocolTokenAddress;\n        protocolTokenAddress = _protocolTokenAddress;\n\n        emit SetProtocolTokenAddress(\n            msg.sender,\n            oldProtocolTokenAddress,\n            _protocolTokenAddress\n        );\n    }\n\n    /**\n     * @dev set rollover base reward. It should be denominated in wRBTC\n     */\n    function setRolloverBaseReward(uint256 baseRewardValue) external onlyOwner {\n        require(baseRewardValue > 0, \"Base reward is zero\");\n\n        uint256 oldValue = rolloverBaseReward;\n        rolloverBaseReward = baseRewardValue;\n\n        emit SetRolloverBaseReward(msg.sender, oldValue, rolloverBaseReward);\n    }\n}\n",
      "file": "ProtocolSettings_Dpl.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x2e044a70f369642c6b4be2ec722e7282d59135b239c07ec680f821cef54cf2cb",
    "blockNumber": 2742439,
    "transactionHash": "0x267690c5d2e6181ae5f0b56a37e4386ec22285ee8051a0f6f0f9a90b21386226",
    "timestamp": 1601477737
  }
}