{
  "address": "0x62d4ba66721fd14007a1c49290ea4be005b1c0b8",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "LoanSettings",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    }
  },
  "version": "0.5.17+commit.d19bba13",
  "source": "/**\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\ncontract LoanStruct {\n    struct Loan {\n        bytes32 id; // id of the loan\n        bytes32 loanParamsId; // the linked loan params id\n        bytes32 pendingTradesId; // the linked pending trades id\n        bool active; // if false, the loan has been fully closed\n        uint256 principal; // total borrowed amount outstanding\n        uint256 collateral; // total collateral escrowed for the loan\n        uint256 startTimestamp; // loan start time\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n        uint256 startMargin; // initial margin when the loan opened\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\n        address borrower; // borrower of this loan\n        address lender; // lender of this loan\n    }\n}\n\ncontract LoanParamsStruct {\n    struct LoanParams {\n        bytes32 id; // id of loan params object\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\n        address owner; // owner of this object\n        address loanToken; // the token being loaned\n        address collateralToken; // the required collateral token\n        uint256 minInitialMargin; // the minimum allowed initial margin\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\n    }\n}\n\ncontract OrderStruct {\n    struct Order {\n        uint256 lockedAmount; // escrowed amount waiting for a counterparty\n        uint256 interestRate; // interest rate defined by the creator of this order\n        uint256 minLoanTerm; // minimum loan term allowed\n        uint256 maxLoanTerm; // maximum loan term allowed\n        uint256 createdTimestamp; // timestamp when this order was created\n        uint256 expirationTimestamp; // timestamp when this order expires\n    }\n}\n\ncontract LenderInterestStruct {\n    struct LenderInterest {\n        uint256 principalTotal; // total borrowed amount outstanding of asset\n        uint256 owedPerDay; // interest owed per day for all loans of asset\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\n        uint256 paidTotal; // total interest paid so far for asset\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract LoanInterestStruct {\n    struct LoanInterest {\n        uint256 owedPerDay; // interest owed per day for loan\n        uint256 depositTotal; // total escrowed interest for loan\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract Objects is\n    LoanStruct,\n    LoanParamsStruct,\n    OrderStruct,\n    LenderInterestStruct,\n    LoanInterestStruct\n{}\n\n/**\n * @dev Library for managing loan sets\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n *\n */\nlibrary EnumerableBytes32Set {\n    struct Bytes32Set {\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) index;\n        bytes32[] values;\n    }\n\n    /**\n     * @dev Add an address value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return addBytes32(set, value);\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (!contains(set, value)) {\n            set.index[value] = set.values.push(value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes an address value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return removeBytes32(set, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (contains(set, value)) {\n            uint256 toDeleteIndex = set.index[value] - 1;\n            uint256 lastIndex = set.values.length - 1;\n\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set.values[lastIndex];\n\n                // Move the last value to the index where the deleted value is\n                set.values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the index entry for the deleted value\n            delete set.index[value];\n\n            // Delete the old entry for the moved value\n            set.values.pop();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return set.index[value] != 0;\n    }\n\n    /**\n     * @dev Returns an array with all values in the set. O(N).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n\n     * WARNING: This function may run out of gas on large sets: use {length} and\n     * {get} instead in these cases.\n     */\n    function enumerate(\n        Bytes32Set storage set,\n        uint256 start,\n        uint256 count\n    ) internal view returns (bytes32[] memory output) {\n        uint256 end = start + count;\n        require(end >= start, \"addition overflow\");\n        end = set.values.length < end ? set.values.length : end;\n        if (end == 0 || start >= end) {\n            return output;\n        }\n\n        output = new bytes32[](end - start);\n        for (uint256 i; i < end - start; i++) {\n            output[i] = set.values[i + start];\n        }\n        return output;\n    }\n\n    /**\n     * @dev Returns the number of elements on the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return set.values.length;\n    }\n\n    /** @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function get(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return set.values[index];\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n    /// @dev Constant for locked guard state\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * If you mark a function `nonReentrant`, you should also\n     * mark it `external`. Calling one `nonReentrant` function from\n     * another is not supported. Instead, you can implement a\n     * `private` function doing the actual work, and an `external`\n     * wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n        _;\n        reentrancyLock = REENTRANCY_GUARD_FREE;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\ncontract State is Objects, ReentrancyGuard, Ownable {\n    using SafeMathSovryn for uint256;\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n\n    address public priceFeeds; // handles asset reference price lookups\n    address public swapsImpl; // handles asset swaps using dex liquidity\n    address public sovrynSwapContractRegistryAddress; // contract registry address of the sovryn swap network\n\n    mapping(bytes4 => address) public logicTargets; // implementations of protocol functions\n\n    mapping(bytes32 => Loan) public loans; // loanId => Loan\n    mapping(bytes32 => LoanParams) public loanParams; // loanParamsId => LoanParams\n\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders; // lender => orderParamsId => Order\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders; // borrower => orderParamsId => Order\n\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers; // loanId => delegated => approved\n\n    // Interest\n    mapping(address => mapping(address => LenderInterest))\n        public lenderInterest; // lender => loanToken => LenderInterest object\n    mapping(bytes32 => LoanInterest) public loanInterest; // loanId => LoanInterest object\n\n    // Internals\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet; // implementations set\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet; // active loans set\n\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets; // lender loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal borrowerLoanSets; // borrow loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal userLoanParamSets; // user loan params set\n\n    address public feesController; // address controlling fee withdrawals\n\n    uint256 public lendingFeePercent = 10**19; // 10% fee                               // fee taken from lender interest payments\n    mapping(address => uint256) public lendingFeeTokensHeld; // total interest fees received and not withdrawn per asset\n    mapping(address => uint256) public lendingFeeTokensPaid; // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\n\n    uint256 public tradingFeePercent = 15 * 10**16; // 0.15% fee                        // fee paid for each trade\n    mapping(address => uint256) public tradingFeeTokensHeld; // total trading fees received and not withdrawn per asset\n    mapping(address => uint256) public tradingFeeTokensPaid; // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\n\n    uint256 public borrowingFeePercent = 9 * 10**16; // 0.09% fee                       // origination fee paid for each loan\n    mapping(address => uint256) public borrowingFeeTokensHeld; // total borrowing fees received and not withdrawn per asset\n    mapping(address => uint256) public borrowingFeeTokensPaid; // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\n\n    uint256 public protocolTokenHeld; // current protocol token deposit balance\n    uint256 public protocolTokenPaid; // lifetime total payout of protocol token\n\n    uint256 public affiliateFeePercent = 30 * 10**18; // 30% fee share                  // fee share for affiliate program\n\n    uint256 public liquidationIncentivePercent = 5 * 10**18; // 5% collateral discount  // discount on collateral for liquidators\n\n    mapping(address => address) public loanPoolToUnderlying; // loanPool => underlying\n    mapping(address => address) public underlyingToLoanPool; // underlying => loanPool\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet; // loan pools set\n\n    mapping(address => bool) public supportedTokens; // supported tokens for swaps\n\n    uint256 public maxDisagreement = 5 * 10**18; // % disagreement between swap rate and reference rate\n\n    uint256 public sourceBuffer = 10000; // used as buffer for swap source amount estimations\n\n    uint256 public maxSwapSize = 50 ether; // maximum support swap size in BTC\n\n    mapping(address => uint256) public borrowerNonce; // nonce per borrower. used for loan id creation.\n\n    uint256 public rolloverBaseReward = 16800000000000; // Rollover transaction costs around 0.0000168 rBTC, it is denominated in wRBTC\n    uint256 public rolloverFlexFeePercent = 0.1 ether; // 0.1%\n\n    IWrbtcERC20 public wrbtcToken;\n    address public protocolTokenAddress;\n\n    function _setTarget(bytes4 sig, address target) internal {\n        logicTargets[sig] = target;\n\n        if (target != address(0)) {\n            logicTargetsSet.addBytes32(bytes32(sig));\n        } else {\n            logicTargetsSet.removeBytes32(bytes32(sig));\n        }\n    }\n}\n\ncontract LoanSettingsEvents {\n    event LoanParamsSetup(\n        bytes32 indexed id,\n        address owner,\n        address indexed loanToken,\n        address indexed collateralToken,\n        uint256 minInitialMargin,\n        uint256 maintenanceMargin,\n        uint256 maxLoanTerm\n    );\n    event LoanParamsIdSetup(bytes32 indexed id, address indexed owner);\n\n    event LoanParamsDisabled(\n        bytes32 indexed id,\n        address owner,\n        address indexed loanToken,\n        address indexed collateralToken,\n        uint256 minInitialMargin,\n        uint256 maintenanceMargin,\n        uint256 maxLoanTerm\n    );\n    event LoanParamsIdDisabled(bytes32 indexed id, address indexed owner);\n}\n\ncontract LoanSettings is State, LoanSettingsEvents {\n    constructor() public {}\n\n    function() external {\n        revert(\"LoanSettings - fallback not allowed\");\n    }\n\n    function initialize(address target) external onlyOwner {\n        _setTarget(this.setupLoanParams.selector, target);\n        _setTarget(this.disableLoanParams.selector, target);\n        _setTarget(this.getLoanParams.selector, target);\n        _setTarget(this.getLoanParamsList.selector, target);\n        _setTarget(this.getTotalPrincipal.selector, target);\n    }\n\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\n        external\n        returns (bytes32[] memory loanParamsIdList)\n    {\n        loanParamsIdList = new bytes32[](loanParamsList.length);\n        for (uint256 i = 0; i < loanParamsList.length; i++) {\n            loanParamsIdList[i] = _setupLoanParams(loanParamsList[i]);\n        }\n    }\n\n    // Deactivates LoanParams for future loans. Active loans using it are unaffected.\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external {\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n            require(\n                msg.sender == loanParams[loanParamsIdList[i]].owner,\n                \"unauthorized owner\"\n            );\n            loanParams[loanParamsIdList[i]].active = false;\n\n            LoanParams memory loanParamsLocal = loanParams[loanParamsIdList[i]];\n            emit LoanParamsDisabled(\n                loanParamsLocal.id,\n                loanParamsLocal.owner,\n                loanParamsLocal.loanToken,\n                loanParamsLocal.collateralToken,\n                loanParamsLocal.minInitialMargin,\n                loanParamsLocal.maintenanceMargin,\n                loanParamsLocal.maxLoanTerm\n            );\n            emit LoanParamsIdDisabled(\n                loanParamsLocal.id,\n                loanParamsLocal.owner\n            );\n        }\n    }\n\n    function getLoanParams(bytes32[] memory loanParamsIdList)\n        public\n        view\n        returns (LoanParams[] memory loanParamsList)\n    {\n        loanParamsList = new LoanParams[](loanParamsIdList.length);\n        uint256 itemCount;\n\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n            LoanParams memory loanParamsLocal = loanParams[loanParamsIdList[i]];\n            if (loanParamsLocal.id == 0) {\n                continue;\n            }\n            loanParamsList[itemCount] = loanParamsLocal;\n            itemCount++;\n        }\n\n        if (itemCount < loanParamsList.length) {\n            assembly {\n                mstore(loanParamsList, itemCount)\n            }\n        }\n    }\n\n    function getLoanParamsList(\n        address owner,\n        uint256 start,\n        uint256 count\n    ) external view returns (bytes32[] memory loanParamsList) {\n        EnumerableBytes32Set.Bytes32Set storage set = userLoanParamSets[owner];\n\n        uint256 end = count.min256(set.values.length);\n        if (end == 0 || start >= end) {\n            return loanParamsList;\n        }\n\n        loanParamsList = new bytes32[](count);\n        uint256 itemCount;\n        for (uint256 i = end - start; i > 0; i--) {\n            if (itemCount == count) {\n                break;\n            }\n            loanParamsList[itemCount] = set.get(i + start - 1);\n            itemCount++;\n        }\n\n        if (itemCount < count) {\n            assembly {\n                mstore(loanParamsList, itemCount)\n            }\n        }\n    }\n\n    function getTotalPrincipal(address lender, address loanToken)\n        external\n        view\n        returns (uint256)\n    {\n        return lenderInterest[lender][loanToken].principalTotal;\n    }\n\n    function _setupLoanParams(LoanParams memory loanParamsLocal)\n        internal\n        returns (bytes32)\n    {\n        bytes32 loanParamsId = keccak256(\n            abi.encodePacked(\n                loanParamsLocal.loanToken,\n                loanParamsLocal.collateralToken,\n                loanParamsLocal.minInitialMargin,\n                loanParamsLocal.maintenanceMargin,\n                loanParamsLocal.maxLoanTerm,\n                block.timestamp\n            )\n        );\n        require(loanParams[loanParamsId].id == 0, \"loanParams exists\");\n\n        require(\n            loanParamsLocal.loanToken != address(0) &&\n                loanParamsLocal.collateralToken != address(0) &&\n                loanParamsLocal.minInitialMargin >\n                loanParamsLocal.maintenanceMargin &&\n                (loanParamsLocal.maxLoanTerm == 0 ||\n                    loanParamsLocal.maxLoanTerm > 3600), // a defined maxLoanTerm has to be greater than one hour\n            \"invalid params\"\n        );\n\n        loanParamsLocal.id = loanParamsId;\n        loanParamsLocal.active = true;\n        loanParamsLocal.owner = msg.sender;\n\n        loanParams[loanParamsId] = loanParamsLocal;\n        userLoanParamSets[msg.sender].addBytes32(loanParamsId);\n\n        emit LoanParamsSetup(\n            loanParamsId,\n            loanParamsLocal.owner,\n            loanParamsLocal.loanToken,\n            loanParamsLocal.collateralToken,\n            loanParamsLocal.minInitialMargin,\n            loanParamsLocal.maintenanceMargin,\n            loanParamsLocal.maxLoanTerm\n        );\n        emit LoanParamsIdSetup(loanParamsId, loanParamsLocal.owner);\n\n        return loanParamsId;\n    }\n}\n",
  "imports": [
    {
      "name": "LoanSettings_Deployable.sol",
      "contents": "/**\n * Copyright 2017-2020, bZeroX, LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0.\n */\n\npragma solidity 0.5.17;\npragma experimental ABIEncoderV2;\n\ncontract LoanStruct {\n    struct Loan {\n        bytes32 id; // id of the loan\n        bytes32 loanParamsId; // the linked loan params id\n        bytes32 pendingTradesId; // the linked pending trades id\n        bool active; // if false, the loan has been fully closed\n        uint256 principal; // total borrowed amount outstanding\n        uint256 collateral; // total collateral escrowed for the loan\n        uint256 startTimestamp; // loan start time\n        uint256 endTimestamp; // for active loans, this is the expected loan end time, for in-active loans, is the actual (past) end time\n        uint256 startMargin; // initial margin when the loan opened\n        uint256 startRate; // reference rate when the loan opened for converting collateralToken to loanToken\n        address borrower; // borrower of this loan\n        address lender; // lender of this loan\n    }\n}\n\ncontract LoanParamsStruct {\n    struct LoanParams {\n        bytes32 id; // id of loan params object\n        bool active; // if false, this object has been disabled by the owner and can't be used for future loans\n        address owner; // owner of this object\n        address loanToken; // the token being loaned\n        address collateralToken; // the required collateral token\n        uint256 minInitialMargin; // the minimum allowed initial margin\n        uint256 maintenanceMargin; // an unhealthy loan when current margin is at or below this value\n        uint256 maxLoanTerm; // the maximum term for new loans (0 means there's no max term)\n    }\n}\n\ncontract OrderStruct {\n    struct Order {\n        uint256 lockedAmount; // escrowed amount waiting for a counterparty\n        uint256 interestRate; // interest rate defined by the creator of this order\n        uint256 minLoanTerm; // minimum loan term allowed\n        uint256 maxLoanTerm; // maximum loan term allowed\n        uint256 createdTimestamp; // timestamp when this order was created\n        uint256 expirationTimestamp; // timestamp when this order expires\n    }\n}\n\ncontract LenderInterestStruct {\n    struct LenderInterest {\n        uint256 principalTotal; // total borrowed amount outstanding of asset\n        uint256 owedPerDay; // interest owed per day for all loans of asset\n        uint256 owedTotal; // total interest owed for all loans of asset (assuming they go to full term)\n        uint256 paidTotal; // total interest paid so far for asset\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract LoanInterestStruct {\n    struct LoanInterest {\n        uint256 owedPerDay; // interest owed per day for loan\n        uint256 depositTotal; // total escrowed interest for loan\n        uint256 updatedTimestamp; // last update\n    }\n}\n\ncontract Objects is\n    LoanStruct,\n    LoanParamsStruct,\n    OrderStruct,\n    LenderInterestStruct,\n    LoanInterestStruct\n{}\n\n/**\n * @dev Library for managing loan sets\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * Include with `using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;`.\n *\n */\nlibrary EnumerableBytes32Set {\n    struct Bytes32Set {\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) index;\n        bytes32[] values;\n    }\n\n    /**\n     * @dev Add an address value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return addBytes32(set, value);\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     * Returns false if the value was already in the set.\n     */\n    function addBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (!contains(set, value)) {\n            set.index[value] = set.values.push(value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes an address value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeAddress(Bytes32Set storage set, address addrvalue)\n        internal\n        returns (bool)\n    {\n        bytes32 value;\n        assembly {\n            value := addrvalue\n        }\n        return removeBytes32(set, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     * Returns false if the value was not present in the set.\n     */\n    function removeBytes32(Bytes32Set storage set, bytes32 value)\n        internal\n        returns (bool)\n    {\n        if (contains(set, value)) {\n            uint256 toDeleteIndex = set.index[value] - 1;\n            uint256 lastIndex = set.values.length - 1;\n\n            // If the element we're deleting is the last one, we can just remove it without doing a swap\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set.values[lastIndex];\n\n                // Move the last value to the index where the deleted value is\n                set.values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set.index[lastValue] = toDeleteIndex + 1; // All indexes are 1-based\n            }\n\n            // Delete the index entry for the deleted value\n            delete set.index[value];\n\n            // Delete the old entry for the moved value\n            set.values.pop();\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value)\n        internal\n        view\n        returns (bool)\n    {\n        return set.index[value] != 0;\n    }\n\n    /**\n     * @dev Returns an array with all values in the set. O(N).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n\n     * WARNING: This function may run out of gas on large sets: use {length} and\n     * {get} instead in these cases.\n     */\n    function enumerate(\n        Bytes32Set storage set,\n        uint256 start,\n        uint256 count\n    ) internal view returns (bytes32[] memory output) {\n        uint256 end = start + count;\n        require(end >= start, \"addition overflow\");\n        end = set.values.length < end ? set.values.length : end;\n        if (end == 0 || start >= end) {\n            return output;\n        }\n\n        output = new bytes32[](end - start);\n        for (uint256 i; i < end - start; i++) {\n            output[i] = set.values[i + start];\n        }\n        return output;\n    }\n\n    /**\n     * @dev Returns the number of elements on the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return set.values.length;\n    }\n\n    /** @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function get(Bytes32Set storage set, uint256 index)\n        internal\n        view\n        returns (bytes32)\n    {\n        return set.values[index];\n    }\n}\n\n/**\n * @title Helps contracts guard against reentrancy attacks.\n * @author Remco Bloemen <remco@2Ï€.com>, Eenae <alexey@mixbytes.io>\n * @dev If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n    /// @dev Constant for unlocked guard state - non-zero to prevent extra gas costs.\n    /// See: https://github.com/OpenZeppelin/openzeppelin-solidity/issues/1056\n    uint256 internal constant REENTRANCY_GUARD_FREE = 1;\n\n    /// @dev Constant for locked guard state\n    uint256 internal constant REENTRANCY_GUARD_LOCKED = 2;\n\n    /**\n     * @dev We use a single lock for the whole contract.\n     */\n    uint256 internal reentrancyLock = REENTRANCY_GUARD_FREE;\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * If you mark a function `nonReentrant`, you should also\n     * mark it `external`. Calling one `nonReentrant` function from\n     * another is not supported. Instead, you can implement a\n     * `private` function doing the actual work, and an `external`\n     * wrapper marked as `nonReentrant`.\n     */\n    modifier nonReentrant() {\n        require(reentrancyLock == REENTRANCY_GUARD_FREE, \"nonReentrant\");\n        reentrancyLock = REENTRANCY_GUARD_LOCKED;\n        _;\n        reentrancyLock = REENTRANCY_GUARD_FREE;\n    }\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextSovryn {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor() internal {}\n\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is ContextSovryn {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMathSovryn {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n\n    function min256(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        return _a < _b ? _a : _b;\n    }\n}\n\ninterface IWrbtc {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ncontract IERC20Sovryn {\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n\n    function totalSupply() public view returns (uint256);\n\n    function balanceOf(address _who) public view returns (uint256);\n\n    function transfer(address _to, uint256 _value) public returns (bool);\n\n    function allowance(address _owner, address _spender)\n        public\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _value\n    ) public returns (bool);\n\n    function approve(address _spender, uint256 _value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ncontract IWrbtcERC20 is IWrbtc, IERC20Sovryn {}\n\ncontract State is Objects, ReentrancyGuard, Ownable {\n    using SafeMathSovryn for uint256;\n    using EnumerableBytes32Set for EnumerableBytes32Set.Bytes32Set;\n\n    address public priceFeeds; // handles asset reference price lookups\n    address public swapsImpl; // handles asset swaps using dex liquidity\n    address public sovrynSwapContractRegistryAddress; // contract registry address of the sovryn swap network\n\n    mapping(bytes4 => address) public logicTargets; // implementations of protocol functions\n\n    mapping(bytes32 => Loan) public loans; // loanId => Loan\n    mapping(bytes32 => LoanParams) public loanParams; // loanParamsId => LoanParams\n\n    mapping(address => mapping(bytes32 => Order)) public lenderOrders; // lender => orderParamsId => Order\n    mapping(address => mapping(bytes32 => Order)) public borrowerOrders; // borrower => orderParamsId => Order\n\n    mapping(bytes32 => mapping(address => bool)) public delegatedManagers; // loanId => delegated => approved\n\n    // Interest\n    mapping(address => mapping(address => LenderInterest))\n        public lenderInterest; // lender => loanToken => LenderInterest object\n    mapping(bytes32 => LoanInterest) public loanInterest; // loanId => LoanInterest object\n\n    // Internals\n    EnumerableBytes32Set.Bytes32Set internal logicTargetsSet; // implementations set\n    EnumerableBytes32Set.Bytes32Set internal activeLoansSet; // active loans set\n\n    mapping(address => EnumerableBytes32Set.Bytes32Set) internal lenderLoanSets; // lender loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal borrowerLoanSets; // borrow loans set\n    mapping(address => EnumerableBytes32Set.Bytes32Set)\n        internal userLoanParamSets; // user loan params set\n\n    address public feesController; // address controlling fee withdrawals\n\n    uint256 public lendingFeePercent = 10**19; // 10% fee                               // fee taken from lender interest payments\n    mapping(address => uint256) public lendingFeeTokensHeld; // total interest fees received and not withdrawn per asset\n    mapping(address => uint256) public lendingFeeTokensPaid; // total interest fees withdraw per asset (lifetime fees = lendingFeeTokensHeld + lendingFeeTokensPaid)\n\n    uint256 public tradingFeePercent = 15 * 10**16; // 0.15% fee                        // fee paid for each trade\n    mapping(address => uint256) public tradingFeeTokensHeld; // total trading fees received and not withdrawn per asset\n    mapping(address => uint256) public tradingFeeTokensPaid; // total trading fees withdraw per asset (lifetime fees = tradingFeeTokensHeld + tradingFeeTokensPaid)\n\n    uint256 public borrowingFeePercent = 9 * 10**16; // 0.09% fee                       // origination fee paid for each loan\n    mapping(address => uint256) public borrowingFeeTokensHeld; // total borrowing fees received and not withdrawn per asset\n    mapping(address => uint256) public borrowingFeeTokensPaid; // total borrowing fees withdraw per asset (lifetime fees = borrowingFeeTokensHeld + borrowingFeeTokensPaid)\n\n    uint256 public protocolTokenHeld; // current protocol token deposit balance\n    uint256 public protocolTokenPaid; // lifetime total payout of protocol token\n\n    uint256 public affiliateFeePercent = 30 * 10**18; // 30% fee share                  // fee share for affiliate program\n\n    uint256 public liquidationIncentivePercent = 5 * 10**18; // 5% collateral discount  // discount on collateral for liquidators\n\n    mapping(address => address) public loanPoolToUnderlying; // loanPool => underlying\n    mapping(address => address) public underlyingToLoanPool; // underlying => loanPool\n    EnumerableBytes32Set.Bytes32Set internal loanPoolsSet; // loan pools set\n\n    mapping(address => bool) public supportedTokens; // supported tokens for swaps\n\n    uint256 public maxDisagreement = 5 * 10**18; // % disagreement between swap rate and reference rate\n\n    uint256 public sourceBuffer = 10000; // used as buffer for swap source amount estimations\n\n    uint256 public maxSwapSize = 50 ether; // maximum support swap size in BTC\n\n    mapping(address => uint256) public borrowerNonce; // nonce per borrower. used for loan id creation.\n\n    uint256 public rolloverBaseReward = 16800000000000; // Rollover transaction costs around 0.0000168 rBTC, it is denominated in wRBTC\n    uint256 public rolloverFlexFeePercent = 0.1 ether; // 0.1%\n\n    IWrbtcERC20 public wrbtcToken;\n    address public protocolTokenAddress;\n\n    function _setTarget(bytes4 sig, address target) internal {\n        logicTargets[sig] = target;\n\n        if (target != address(0)) {\n            logicTargetsSet.addBytes32(bytes32(sig));\n        } else {\n            logicTargetsSet.removeBytes32(bytes32(sig));\n        }\n    }\n}\n\ncontract LoanSettingsEvents {\n    event LoanParamsSetup(\n        bytes32 indexed id,\n        address owner,\n        address indexed loanToken,\n        address indexed collateralToken,\n        uint256 minInitialMargin,\n        uint256 maintenanceMargin,\n        uint256 maxLoanTerm\n    );\n    event LoanParamsIdSetup(bytes32 indexed id, address indexed owner);\n\n    event LoanParamsDisabled(\n        bytes32 indexed id,\n        address owner,\n        address indexed loanToken,\n        address indexed collateralToken,\n        uint256 minInitialMargin,\n        uint256 maintenanceMargin,\n        uint256 maxLoanTerm\n    );\n    event LoanParamsIdDisabled(bytes32 indexed id, address indexed owner);\n}\n\ncontract LoanSettings is State, LoanSettingsEvents {\n    constructor() public {}\n\n    function() external {\n        revert(\"LoanSettings - fallback not allowed\");\n    }\n\n    function initialize(address target) external onlyOwner {\n        _setTarget(this.setupLoanParams.selector, target);\n        _setTarget(this.disableLoanParams.selector, target);\n        _setTarget(this.getLoanParams.selector, target);\n        _setTarget(this.getLoanParamsList.selector, target);\n        _setTarget(this.getTotalPrincipal.selector, target);\n    }\n\n    function setupLoanParams(LoanParams[] calldata loanParamsList)\n        external\n        returns (bytes32[] memory loanParamsIdList)\n    {\n        loanParamsIdList = new bytes32[](loanParamsList.length);\n        for (uint256 i = 0; i < loanParamsList.length; i++) {\n            loanParamsIdList[i] = _setupLoanParams(loanParamsList[i]);\n        }\n    }\n\n    // Deactivates LoanParams for future loans. Active loans using it are unaffected.\n    function disableLoanParams(bytes32[] calldata loanParamsIdList) external {\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n            require(\n                msg.sender == loanParams[loanParamsIdList[i]].owner,\n                \"unauthorized owner\"\n            );\n            loanParams[loanParamsIdList[i]].active = false;\n\n            LoanParams memory loanParamsLocal = loanParams[loanParamsIdList[i]];\n            emit LoanParamsDisabled(\n                loanParamsLocal.id,\n                loanParamsLocal.owner,\n                loanParamsLocal.loanToken,\n                loanParamsLocal.collateralToken,\n                loanParamsLocal.minInitialMargin,\n                loanParamsLocal.maintenanceMargin,\n                loanParamsLocal.maxLoanTerm\n            );\n            emit LoanParamsIdDisabled(\n                loanParamsLocal.id,\n                loanParamsLocal.owner\n            );\n        }\n    }\n\n    function getLoanParams(bytes32[] memory loanParamsIdList)\n        public\n        view\n        returns (LoanParams[] memory loanParamsList)\n    {\n        loanParamsList = new LoanParams[](loanParamsIdList.length);\n        uint256 itemCount;\n\n        for (uint256 i = 0; i < loanParamsIdList.length; i++) {\n            LoanParams memory loanParamsLocal = loanParams[loanParamsIdList[i]];\n            if (loanParamsLocal.id == 0) {\n                continue;\n            }\n            loanParamsList[itemCount] = loanParamsLocal;\n            itemCount++;\n        }\n\n        if (itemCount < loanParamsList.length) {\n            assembly {\n                mstore(loanParamsList, itemCount)\n            }\n        }\n    }\n\n    function getLoanParamsList(\n        address owner,\n        uint256 start,\n        uint256 count\n    ) external view returns (bytes32[] memory loanParamsList) {\n        EnumerableBytes32Set.Bytes32Set storage set = userLoanParamSets[owner];\n\n        uint256 end = count.min256(set.values.length);\n        if (end == 0 || start >= end) {\n            return loanParamsList;\n        }\n\n        loanParamsList = new bytes32[](count);\n        uint256 itemCount;\n        for (uint256 i = end - start; i > 0; i--) {\n            if (itemCount == count) {\n                break;\n            }\n            loanParamsList[itemCount] = set.get(i + start - 1);\n            itemCount++;\n        }\n\n        if (itemCount < count) {\n            assembly {\n                mstore(loanParamsList, itemCount)\n            }\n        }\n    }\n\n    function getTotalPrincipal(address lender, address loanToken)\n        external\n        view\n        returns (uint256)\n    {\n        return lenderInterest[lender][loanToken].principalTotal;\n    }\n\n    function _setupLoanParams(LoanParams memory loanParamsLocal)\n        internal\n        returns (bytes32)\n    {\n        bytes32 loanParamsId = keccak256(\n            abi.encodePacked(\n                loanParamsLocal.loanToken,\n                loanParamsLocal.collateralToken,\n                loanParamsLocal.minInitialMargin,\n                loanParamsLocal.maintenanceMargin,\n                loanParamsLocal.maxLoanTerm,\n                block.timestamp\n            )\n        );\n        require(loanParams[loanParamsId].id == 0, \"loanParams exists\");\n\n        require(\n            loanParamsLocal.loanToken != address(0) &&\n                loanParamsLocal.collateralToken != address(0) &&\n                loanParamsLocal.minInitialMargin >\n                loanParamsLocal.maintenanceMargin &&\n                (loanParamsLocal.maxLoanTerm == 0 ||\n                    loanParamsLocal.maxLoanTerm > 3600), // a defined maxLoanTerm has to be greater than one hour\n            \"invalid params\"\n        );\n\n        loanParamsLocal.id = loanParamsId;\n        loanParamsLocal.active = true;\n        loanParamsLocal.owner = msg.sender;\n\n        loanParams[loanParamsId] = loanParamsLocal;\n        userLoanParamSets[msg.sender].addBytes32(loanParamsId);\n\n        emit LoanParamsSetup(\n            loanParamsId,\n            loanParamsLocal.owner,\n            loanParamsLocal.loanToken,\n            loanParamsLocal.collateralToken,\n            loanParamsLocal.minInitialMargin,\n            loanParamsLocal.maintenanceMargin,\n            loanParamsLocal.maxLoanTerm\n        );\n        emit LoanParamsIdSetup(loanParamsId, loanParamsLocal.owner);\n\n        return loanParamsId;\n    }\n}\n",
      "file": "LoanSettings_Deployable.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x4b6fca29e827e46f0c9eb412d1337a8acc419e0cf5bfdec6d4ed535adac0af6d",
    "blockNumber": 2742456,
    "transactionHash": "0xdf06c3039f5c21c8ca46d0e8dc15cce74b1cc9f4287785de34d251a2cf630d4e",
    "timestamp": 1601478153
  }
}