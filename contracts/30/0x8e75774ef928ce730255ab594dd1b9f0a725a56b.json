{
  "address": "0x8e75774ef928ce730255ab594dd1b9f0a725a56b",
  "net": {
    "id": "30",
    "name": "RSK Mainnet"
  },
  "name": "Whitelist",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    }
  },
  "version": "0.4.26+commit.4563c3fc",
  "source": "pragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 _value) {\r\n        _greaterThanZero(_value);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 _value) internal pure {\r\n        require(_value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        _validAddress(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address _address) internal pure {\r\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        _notThis(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _notThis(address _address) internal view {\r\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n  * @dev The contract manages a list of whitelisted addresses\r\n*/\r\ncontract Whitelist is IWhitelist, Owned, Utils {\r\n    mapping (address => bool) private whitelist;\r\n\r\n    /**\r\n      * @dev triggered when an address is added to the whitelist\r\n      *\r\n      * @param _address address that's added from the whitelist\r\n    */\r\n    event AddressAddition(address indexed _address);\r\n\r\n    /**\r\n      * @dev triggered when an address is removed from the whitelist\r\n      *\r\n      * @param _address address that's removed from the whitelist\r\n    */\r\n    event AddressRemoval(address indexed _address);\r\n\r\n    /**\r\n      * @dev returns true if a given address is whitelisted, false if not\r\n      *\r\n      * @param _address address to check\r\n      *\r\n      * @return true if the address is whitelisted, false if not\r\n    */\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return whitelist[_address];\r\n    }\r\n\r\n    /**\r\n      * @dev adds a given address to the whitelist\r\n      *\r\n      * @param _address address to add\r\n    */\r\n    function addAddress(address _address)\r\n        ownerOnly\r\n        validAddress(_address)\r\n        public\r\n    {\r\n        if (whitelist[_address]) // checks if the address is already whitelisted\r\n            return;\r\n\r\n        whitelist[_address] = true;\r\n        emit AddressAddition(_address);\r\n    }\r\n\r\n    /**\r\n      * @dev adds a list of addresses to the whitelist\r\n      *\r\n      * @param _addresses addresses to add\r\n    */\r\n    function addAddresses(address[] _addresses) public {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            addAddress(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev removes a given address from the whitelist\r\n      *\r\n      * @param _address address to remove\r\n    */\r\n    function removeAddress(address _address) ownerOnly public {\r\n        if (!whitelist[_address]) // checks if the address is actually whitelisted\r\n            return;\r\n\r\n        whitelist[_address] = false;\r\n        emit AddressRemoval(_address);\r\n    }\r\n\r\n    /**\r\n      * @dev removes a list of addresses from the whitelist\r\n      *\r\n      * @param _addresses addresses to remove\r\n    */\r\n    function removeAddresses(address[] _addresses) public {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            removeAddress(_addresses[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n",
  "imports": [
    {
      "name": "14_Whitelist_flat.sol",
      "contents": "pragma solidity 0.4.26;\r\n\r\n/*\r\n    Owned contract interface\r\n*/\r\ncontract IOwned {\r\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\r\n    function owner() public view returns (address) {this;}\r\n\r\n    function transferOwnership(address _newOwner) public;\r\n    function acceptOwnership() public;\r\n}\r\n\r\n\r\n/*\r\n    Whitelist interface\r\n*/\r\ncontract IWhitelist {\r\n    function isWhitelisted(address _address) public view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n/**\r\n  * @dev Provides support and utilities for contract ownership\r\n*/\r\ncontract Owned is IOwned {\r\n    address public owner;\r\n    address public newOwner;\r\n\r\n    /**\r\n      * @dev triggered when the owner is updated\r\n      *\r\n      * @param _prevOwner previous owner\r\n      * @param _newOwner  new owner\r\n    */\r\n    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\r\n\r\n    /**\r\n      * @dev initializes a new Owned instance\r\n    */\r\n    constructor() public {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // allows execution by the owner only\r\n    modifier ownerOnly {\r\n        _ownerOnly();\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _ownerOnly() internal view {\r\n        require(msg.sender == owner, \"ERR_ACCESS_DENIED\");\r\n    }\r\n\r\n    /**\r\n      * @dev allows transferring the contract ownership\r\n      * the new owner still needs to accept the transfer\r\n      * can only be called by the contract owner\r\n      *\r\n      * @param _newOwner    new contract owner\r\n    */\r\n    function transferOwnership(address _newOwner) public ownerOnly {\r\n        require(_newOwner != owner, \"ERR_SAME_OWNER\");\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    /**\r\n      * @dev used by a new owner to accept an ownership transfer\r\n    */\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner, \"ERR_ACCESS_DENIED\");\r\n        emit OwnerUpdate(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n  * @dev Utilities & Common Modifiers\r\n*/\r\ncontract Utils {\r\n    // verifies that a value is greater than zero\r\n    modifier greaterThanZero(uint256 _value) {\r\n        _greaterThanZero(_value);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _greaterThanZero(uint256 _value) internal pure {\r\n        require(_value > 0, \"ERR_ZERO_VALUE\");\r\n    }\r\n\r\n    // validates an address - currently only checks that it isn't null\r\n    modifier validAddress(address _address) {\r\n        _validAddress(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _validAddress(address _address) internal pure {\r\n        require(_address != address(0), \"ERR_INVALID_ADDRESS\");\r\n    }\r\n\r\n    // verifies that the address is different than this contract address\r\n    modifier notThis(address _address) {\r\n        _notThis(_address);\r\n        _;\r\n    }\r\n\r\n    // error message binary size optimization\r\n    function _notThis(address _address) internal view {\r\n        require(_address != address(this), \"ERR_ADDRESS_IS_SELF\");\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n  * @dev The contract manages a list of whitelisted addresses\r\n*/\r\ncontract Whitelist is IWhitelist, Owned, Utils {\r\n    mapping (address => bool) private whitelist;\r\n\r\n    /**\r\n      * @dev triggered when an address is added to the whitelist\r\n      *\r\n      * @param _address address that's added from the whitelist\r\n    */\r\n    event AddressAddition(address indexed _address);\r\n\r\n    /**\r\n      * @dev triggered when an address is removed from the whitelist\r\n      *\r\n      * @param _address address that's removed from the whitelist\r\n    */\r\n    event AddressRemoval(address indexed _address);\r\n\r\n    /**\r\n      * @dev returns true if a given address is whitelisted, false if not\r\n      *\r\n      * @param _address address to check\r\n      *\r\n      * @return true if the address is whitelisted, false if not\r\n    */\r\n    function isWhitelisted(address _address) public view returns (bool) {\r\n        return whitelist[_address];\r\n    }\r\n\r\n    /**\r\n      * @dev adds a given address to the whitelist\r\n      *\r\n      * @param _address address to add\r\n    */\r\n    function addAddress(address _address)\r\n        ownerOnly\r\n        validAddress(_address)\r\n        public\r\n    {\r\n        if (whitelist[_address]) // checks if the address is already whitelisted\r\n            return;\r\n\r\n        whitelist[_address] = true;\r\n        emit AddressAddition(_address);\r\n    }\r\n\r\n    /**\r\n      * @dev adds a list of addresses to the whitelist\r\n      *\r\n      * @param _addresses addresses to add\r\n    */\r\n    function addAddresses(address[] _addresses) public {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            addAddress(_addresses[i]);\r\n        }\r\n    }\r\n\r\n    /**\r\n      * @dev removes a given address from the whitelist\r\n      *\r\n      * @param _address address to remove\r\n    */\r\n    function removeAddress(address _address) ownerOnly public {\r\n        if (!whitelist[_address]) // checks if the address is actually whitelisted\r\n            return;\r\n\r\n        whitelist[_address] = false;\r\n        emit AddressRemoval(_address);\r\n    }\r\n\r\n    /**\r\n      * @dev removes a list of addresses from the whitelist\r\n      *\r\n      * @param _addresses addresses to remove\r\n    */\r\n    function removeAddresses(address[] _addresses) public {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            removeAddress(_addresses[i]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n",
      "file": "14_Whitelist_flat.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x020cf644ebcd9cd5a13f81fa932c74877907888f9f825af06a203293c00ce8b6",
    "blockNumber": 2742590,
    "transactionHash": "0xdb73759f34841879dbfab14c153177904d4a4885c20cca672743c5854d7c48ad",
    "timestamp": 1601482446
  }
}