{
    "address": "0x3e9de61dc23d4bc1b84d174781809e5820cfceb7",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "Masset",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        }
    },
    "version": "0.5.16+commit.9c3226ce",
    "source": "pragma solidity 0.5.16;\npragma experimental ABIEncoderV2;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract BasketManager {\n\n    using SafeMath for uint256;\n\n    // state\n    address[] private bassetsArray;\n    mapping(address => bool) private bassetsMap;\n    mapping(address => int256) private factorMap;\n\n    function _isValidBasset(address _basset) internal view returns(bool) {\n        return _basset != address(0) && bassetsMap[_basset];\n    }\n\n    // external\n    constructor(address[] memory _bassets, int256[] memory _factors) public {\n        require(_bassets.length > 0, \"some basset required\");\n        require(_bassets.length == _factors.length, \"factor array length mismatch\");\n\n        bassetsArray = _bassets;\n        for(uint i=0; i<bassetsArray.length; i++) {\n            address basset = bassetsArray[i];\n            require(basset != address(0), \"invalid basset address\");\n            require(!bassetsMap[basset], \"basset not unique\");\n            bassetsMap[basset] = true;\n            require(_factors[i] != 0, \"invalid factor\");\n            factorMap[basset] = _factors[i];\n        }\n    }\n\n    function isValidBasset(address _basset) external view returns(bool) {\n        return _isValidBasset(_basset);\n    }\n\n    function checkBasketBalanceForDeposit(address _basset, uint256 _bassetQuantity) external view returns(bool) {\n        return _isValidBasset(_basset);\n    }\n\n    function checkBasketBalanceForWithdrawal(address _basset, uint256 _bassetQuantity) external view returns(bool) {\n        return _isValidBasset(_basset);\n    }\n\n    function convertBassetToMassetQuantity(address _basset, uint256 _bassetQuantity) external view returns(uint256) {\n        require(_isValidBasset(_basset), \"invalid basset\");\n        int256 factor = factorMap[_basset];\n        if(factor > 0) {\n            return _bassetQuantity.div(uint256(factor));\n        }\n        return _bassetQuantity.mul(uint256(-factor));\n    }\n\n    function convertMassetToBassetQuantity(address _basset, uint256 _massetQuantity) external view returns(uint256) {\n        require(_isValidBasset(_basset), \"invalid basset\");\n        int256 factor = factorMap[_basset];\n        if(factor > 0) {\n            return _massetQuantity.mul(uint256(factor));\n        }\n        return _massetQuantity.div(uint256(-factor));\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as `account`'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n\ninterface IBridge {\n    function version() external pure returns (string memory);\n\n    function getFeePercentage() external view returns(uint);\n\n    function calcMaxWithdraw() external view returns (uint);\n\n    /**\n     * ERC-20 tokens approve and transferFrom pattern\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n     */\n    function receiveTokens(address tokenToUse, uint256 amount) external returns(bool);\n\n    /**\n     * ERC-20 tokens approve and transferFrom pattern\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n     */\n    function receiveTokensAt(\n        address tokenToUse,\n        uint256 amount,\n        address receiver,\n        bytes calldata extraData\n    ) external returns(bool);\n\n    /**\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\n     */\n    function tokensReceived (\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * Accepts the transaction from the other chain that was voted and sent by the federation contract\n     */\n    function acceptTransfer(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex,\n        uint8 decimals,\n        uint256 granularity\n    ) external returns(bool);\n\n    function acceptTransferAt(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex,\n        uint8 decimals,\n        uint256 granularity,\n        bytes calldata userData\n    ) external returns(bool);\n\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes _userData,\n        uint8 _decimals, uint256 _granularity);\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol, uint256 _granularity);\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount, uint8 _decimals, uint256 _granularity,\n        uint256 _formattedAmount, uint8 _calculatedDecimals, uint256 _calculatedGranularity, bytes _userData);\n    event FeePercentageChanged(uint256 _amount);\n    event ErrorTokenReceiver(bytes _errorData);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract IOwnable {\n    function owner() public view returns (address);\n    function isOwner() public view returns (bool);\n    function renounceOwnership() public;\n    function transferOwnership(address newOwner) public;\n}\n\ncontract InitializableOwnable is Context, IOwnable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function _initialize() internal {\n        require(_owner == address(0), \"already initialized\");\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"InitializableOwnable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"InitializableOwnable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context, IOwnable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Token is ERC20, ERC20Detailed, Ownable {\n\n    /**\n     * @notice Constructor called on deployment, initiates the contract.\n     * @param _name The name of the token.\n     * @param _symbol The symbol of the token.\n     * @param _decimals The decimals of the token.\n     * */\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public\n        ERC20Detailed(_name, _symbol, _decimals) {}\n\n    /**\n     * @notice Creates new tokens and sends them to the recipient.\n     * @param _account The recipient address to get the minted tokens.\n     * @param _amount The amount of tokens to be minted.\n     * */\n    function mint(address _account, uint256 _amount) public onlyOwner {\n        _mint(_account, _amount);\n    }\n\n    /**\n     * @notice Burns tokens for the given account.\n     * @param _account The recipient address to get the minted tokens.\n     * @param _amount The amount of tokens to be minted.\n     * */\n    function burn(address _account, uint256 _amount) public onlyOwner {\n        _burn(_account, _amount);\n    }\n}\n\ncontract InitializableReentrancyGuard {\n    bool private _notEntered;\n\n    function _initialize() internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\ncontract Masset is IERC777Recipient, InitializableOwnable, InitializableReentrancyGuard {\n\n    using SafeMath for uint256;\n\n    // Events\n\n    event Minted(\n        address indexed minter,\n        address indexed recipient,\n        uint256 massetQuantity,\n        address bAsset,\n        uint256 bassetQuantity);\n\n    event Redeemed(\n        address indexed redeemer,\n        address indexed recipient,\n        uint256 massetQuantity,\n        address bAsset,\n        uint256 bassetQuantity);\n\n    event onTokensReceivedCalled(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes userData,\n        bytes operatorData\n    );\n\n    event onTokensMintedCalled(\n        address indexed sender,\n        uint256 orderAmount,\n        address tokenAddress,\n        bytes userData\n    );\n\n    event onSetBasketManager(address indexed sender, address indexed oldBasketManager, address indexed newBaskManager);\n    event onSetToken(address indexed sender, address indexed oldToken, address indexed newToken);\n    event onSetTokenOwner(address indexed sender, address indexed oldTokenOwner, address indexed newTokenOwner);\n    event onSetBridge(address indexed sender, address indexed oldBridge, address indexed newBridge);\n\n    // state\n    BasketManager private basketManager;\n    Token private token;\n    IBridge private bridge;\n\n    // internal\n\n    function registerAsERC777Recipient() internal {\n        IERC1820Registry ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n        ERC1820.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\n    }\n\n    // public\n\n    function getVersion() external returns (string memory) {\n        return \"1.0\";\n    }\n\n    function initialize(\n        address _basketManagerAddress,\n        address _tokenAddress,\n        address _bridgeAddress,\n        bool _registerAsERC777RecipientFlag) public {\n\n        require(address(basketManager) == address(0) && address(token) == address(0), \"already initialized\");\n        require(_basketManagerAddress != address(0), \"invalid basket manager\");\n        require(_tokenAddress != address(0), \"invalid token\");\n\n        InitializableOwnable._initialize();\n        InitializableReentrancyGuard._initialize();\n\n        basketManager = BasketManager(_basketManagerAddress);\n        token = Token(_tokenAddress);\n        bridge = IBridge(_bridgeAddress);\n        if(_registerAsERC777RecipientFlag) {\n            registerAsERC777Recipient();\n        }\n    }\n\n    /***************************************\n                MINTING (PUBLIC)\n    ****************************************/\n\n    /**\n     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\n     *      must have approval to spend the senders bAsset\n     * @param _bAsset         Address of the bAsset to mint\n     * @param _bAssetQuantity Quantity in bAsset units\n     * @return massetMinted   Number of newly minted mAssets\n     */\n    function mint(\n        address _bAsset,\n        uint256 _bAssetQuantity\n    )\n        external\n        nonReentrant\n        returns (uint256 massetMinted)\n    {\n        return _mintTo(_bAsset, _bAssetQuantity, msg.sender);\n    }\n\n    /**\n     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\n     *      must have approval to spend the senders bAsset\n     * @param _bAsset         Address of the bAsset to mint\n     * @param _bAssetQuantity Quantity in bAsset units\n     * @param _recipient receipient of the newly minted mAsset tokens\n     * @return massetMinted   Number of newly minted mAssets\n     */\n    function mintTo(\n        address _bAsset,\n        uint256 _bAssetQuantity,\n        address _recipient\n    )\n        external\n        nonReentrant\n        returns (uint256 massetMinted)\n    {\n        return _mintTo(_bAsset, _bAssetQuantity, _recipient);\n    }\n\n    /***************************************\n              MINTING (INTERNAL)\n    ****************************************/\n\n    function _mintTo(\n        address _basset,\n        uint256 _bassetQuantity,\n        address _recipient\n    )\n        internal\n        returns (uint256 massetMinted)\n    {\n        require(_recipient != address(0), \"must be a valid recipient\");\n        require(_bassetQuantity > 0, \"quantity must not be 0\");\n\n        require(basketManager.isValidBasset(_basset), \"invalid basset\");\n        require(basketManager.checkBasketBalanceForDeposit(_basset, _bassetQuantity));\n\n        uint256 massetQuantity = basketManager.convertBassetToMassetQuantity(_basset, _bassetQuantity);\n\n        IERC20(_basset).transferFrom(msg.sender, address(this), _bassetQuantity);\n\n        token.mint(_recipient, massetQuantity);\n        emit Minted(msg.sender, _recipient, massetQuantity, _basset, _bassetQuantity);\n\n        return massetQuantity;\n    }\n\n    /***************************************\n              REDEMPTION (PUBLIC)\n    ****************************************/\n\n    /**\n     * @dev Credits the sender with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative mAsset quantity from the sender. Sender also incurs a small mAsset fee, if any.\n     * @param _bAsset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeem(\n        address _bAsset,\n        uint256 _massetQuantity\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_bAsset, _massetQuantity, msg.sender, false);\n    }\n\n    /**\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\n     * @param _bAsset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @param _recipient        Address to credit with withdrawn bAssets\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeemTo(\n        address _bAsset,\n        uint256 _massetQuantity,\n        address _recipient\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_bAsset, _massetQuantity, _recipient, false);\n    }\n\n    /***************************************\n              REDEMPTION (INTERNAL)\n    ****************************************/\n\n    function _redeemTo(\n        address _basset,\n        uint256 _massetQuantity,\n        address _recipient,\n        bool bridgeFlag\n    ) internal returns (uint256 massetRedeemed) {\n        require(_recipient != address(0), \"must be a valid recipient\");\n        require(_massetQuantity > 0, \"masset quantity must be greater than 0\");\n        require(basketManager.isValidBasset(_basset), \"invalid basset\");\n\n        uint256 bassetQuantity = basketManager.convertMassetToBassetQuantity(_basset, _massetQuantity);\n\n        require(basketManager.checkBasketBalanceForWithdrawal(_basset, bassetQuantity));\n\n        if(bridgeFlag) {\n            require(address(bridge) != address(0), \"invalid bridge\");\n            IERC20(_basset).approve(address(bridge), bassetQuantity);\n            require(\n                bridge.receiveTokensAt(_basset, bassetQuantity, _recipient, bytes(\"\")),\n                \"call to bridge failed\");\n        } else {\n            IERC20(_basset).transfer(_recipient, bassetQuantity);\n        }\n\n        token.burn(msg.sender, _massetQuantity);\n        emit Redeemed(msg.sender, _recipient, _massetQuantity, _basset, bassetQuantity);\n\n        return _massetQuantity;\n    }\n\n    // For the BRIDGE\n\n    /**\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\n     *      This function is designed to also call the bridge in order to have the basset tokens sent to\n     *      another blockchain.\n     * @param _basset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @param _recipient        Address to credit with withdrawn bAssets\n     * @param _bridgeAddress    This is ignored and is left here for backward compatibility with the FE\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeemToBridge(\n        address _basset,\n        uint256 _massetQuantity,\n        address _recipient,\n        address _bridgeAddress // for backward compatibility\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_basset, _massetQuantity, _recipient, true);\n    }\n\n    /**\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\n     *      This function is designed to also call the bridge in order to have the basset tokens sent to\n     *      another blockchain.\n     * @param _basset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @param _recipient        Address to credit with withdrawn bAssets\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeemToBridge(\n        address _basset,\n        uint256 _massetQuantity,\n        address _recipient\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_basset, _massetQuantity, _recipient, true);\n    }\n\n    function _decodeAddress(bytes memory data) private pure returns (address) {\n        address addr = abi.decode(data, (address));\n        require(addr != address(0), \"Converter: Error decoding extraData\");\n        return addr;\n    }\n\n    function _encodeAddress(address _address) private pure returns (bytes memory) {\n        require(_address != address(0), \"Converter: Error encoding extraData\");\n        return abi.encode(_address);\n    }\n\n    function tokensReceived(\n        address _operator,\n        address _from,\n        address _to,\n        uint _amount,\n        bytes calldata _userData,\n        bytes calldata _operatorData\n    ) external {\n        emit onTokensReceivedCalled(\n            _operator,\n            _from,\n            _to,\n            _amount,\n            _userData,\n            _operatorData\n        );\n    }\n\n    /**\n     * @dev This is called by the bridge to let us know the user has sent tokens through it and\n     *      into the masset.\n     * @param _orderAmount      Units of the masset to redeem\n     * @param _tokenAddress     Address of the bAsset to redeem\n     * @param _userData         Address of the final recipient as ABI encoded bytes\n     */\n    function onTokensMinted(\n        uint256 _orderAmount,\n        address _tokenAddress,\n        bytes calldata _userData\n    ) external nonReentrant {\n        emit onTokensMintedCalled(msg.sender, _orderAmount, _tokenAddress, _userData);\n\n        require(_orderAmount > 0, \"amount must be > 0\");\n        require(msg.sender == address(bridge), \"only bridge may call\");\n\n        address recipient =  _decodeAddress(_userData);\n        address basset = _tokenAddress;\n\n        require(basketManager.isValidBasset(basset), \"invalid basset\");\n        require(basketManager.checkBasketBalanceForDeposit(basset, _orderAmount), \"basket out of balance\");\n\n        uint256 massetQuantity = basketManager.convertBassetToMassetQuantity(basset, _orderAmount);\n        token.mint(recipient, massetQuantity);\n        emit Minted(msg.sender, recipient, massetQuantity, basset, _orderAmount);\n    }\n\n    // Getters\n\n    function getToken() external view returns (address) {\n        return address(token);\n    }\n\n    function geBasketManager() external view returns (address) {\n        return address(basketManager);\n    }\n\n    function geBridge() external view returns (address) {\n        return address(bridge);\n    }\n\n    // Admin functions\n\n    function setBasketManager(address _basketManagerAddress) public onlyOwner {\n        require(_basketManagerAddress != address(0), \"address invalid\");\n        require(_basketManagerAddress != address(basketManager), \"same address\");\n\n        emit onSetBasketManager(msg.sender, address(basketManager), _basketManagerAddress);\n        basketManager = BasketManager(_basketManagerAddress);\n    }\n\n    function setToken(address _tokenAddress) public onlyOwner {\n        require(_tokenAddress != address(0), \"address invalid\");\n        require(_tokenAddress != address(token), \"same address\");\n\n        emit onSetToken(msg.sender, address(token), _tokenAddress);\n        token = Token(_tokenAddress);\n    }\n\n    function setBridge(address _bridgeAddress) public onlyOwner {\n        require(_bridgeAddress != address(0), \"address invalid\");\n        require(_bridgeAddress != address(bridge), \"same address\");\n\n        emit onSetBridge(msg.sender, address(bridge), _bridgeAddress);\n        bridge = IBridge(_bridgeAddress);\n    }\n\n    function setTokenOwner(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0), \"address invalid\");\n        require(_newOwner != token.owner(), \"same address\");\n\n        emit onSetTokenOwner(msg.sender, token.owner(), _newOwner);\n        token.transferOwnership(_newOwner);\n    }\n}",
    "imports": [
        {
            "name": "Masset.sol",
            "contents": "pragma solidity 0.5.16;\npragma experimental ABIEncoderV2;\n\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     *\n     * _Available since v2.4.0._\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     *\n     * _Available since v2.4.0._\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract BasketManager {\n\n    using SafeMath for uint256;\n\n    // state\n    address[] private bassetsArray;\n    mapping(address => bool) private bassetsMap;\n    mapping(address => int256) private factorMap;\n\n    function _isValidBasset(address _basset) internal view returns(bool) {\n        return _basset != address(0) && bassetsMap[_basset];\n    }\n\n    // external\n    constructor(address[] memory _bassets, int256[] memory _factors) public {\n        require(_bassets.length > 0, \"some basset required\");\n        require(_bassets.length == _factors.length, \"factor array length mismatch\");\n\n        bassetsArray = _bassets;\n        for(uint i=0; i<bassetsArray.length; i++) {\n            address basset = bassetsArray[i];\n            require(basset != address(0), \"invalid basset address\");\n            require(!bassetsMap[basset], \"basset not unique\");\n            bassetsMap[basset] = true;\n            require(_factors[i] != 0, \"invalid factor\");\n            factorMap[basset] = _factors[i];\n        }\n    }\n\n    function isValidBasset(address _basset) external view returns(bool) {\n        return _isValidBasset(_basset);\n    }\n\n    function checkBasketBalanceForDeposit(address _basset, uint256 _bassetQuantity) external view returns(bool) {\n        return _isValidBasset(_basset);\n    }\n\n    function checkBasketBalanceForWithdrawal(address _basset, uint256 _bassetQuantity) external view returns(bool) {\n        return _isValidBasset(_basset);\n    }\n\n    function convertBassetToMassetQuantity(address _basset, uint256 _bassetQuantity) external view returns(uint256) {\n        require(_isValidBasset(_basset), \"invalid basset\");\n        int256 factor = factorMap[_basset];\n        if(factor > 0) {\n            return _bassetQuantity.div(uint256(factor));\n        }\n        return _bassetQuantity.mul(uint256(-factor));\n    }\n\n    function convertMassetToBassetQuantity(address _basset, uint256 _massetQuantity) external view returns(uint256) {\n        require(_isValidBasset(_basset), \"invalid basset\");\n        int256 factor = factorMap[_basset];\n        if(factor > 0) {\n            return _massetQuantity.mul(uint256(factor));\n        }\n        return _massetQuantity.div(uint256(-factor));\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC777Recipient {\n    /**\n     * @dev Called by an {IERC777} token contract whenever tokens are being\n     * moved or created into a registered account (`to`). The type of operation\n     * is conveyed by `from` being the zero address or not.\n     *\n     * This call occurs _after_ the token contract's state is updated, so\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n     *\n     * This function may revert to prevent the operation from being executed.\n     */\n    function tokensReceived(\n        address operator,\n        address from,\n        address to,\n        uint256 amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n}\n\ninterface IERC1820Registry {\n    /**\n     * @dev Sets `newManager` as the manager for `account`. A manager of an\n     * account is able to set interface implementers for it.\n     *\n     * By default, each account is its own manager. Passing a value of `0x0` in\n     * `newManager` will reset the manager to this initial state.\n     *\n     * Emits a {ManagerChanged} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     */\n    function setManager(address account, address newManager) external;\n\n    /**\n     * @dev Returns the manager for `account`.\n     *\n     * See {setManager}.\n     */\n    function getManager(address account) external view returns (address);\n\n    /**\n     * @dev Sets the `implementer` contract as `account`'s implementer for\n     * `interfaceHash`.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     * The zero address can also be used in `implementer` to remove an old one.\n     *\n     * See {interfaceHash} to learn how these are created.\n     *\n     * Emits an {InterfaceImplementerSet} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the current manager for `account`.\n     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n     * end in 28 zeroes).\n     * - `implementer` must implement {IERC1820Implementer} and return true when\n     * queried for support, unless `implementer` is the caller. See\n     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n     */\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\n\n    /**\n     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n     * implementer is registered, returns the zero address.\n     *\n     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n     * zeroes), `account` will be queried for support of it.\n     *\n     * `account` being the zero address is an alias for the caller's address.\n     */\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\n\n    /**\n     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n     * corresponding\n     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n     */\n    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n\n    /**\n     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n     *  @param account Address of the contract for which to update the cache.\n     *  @param interfaceId ERC165 interface for which to update the cache.\n     */\n    function updateERC165Cache(address account, bytes4 interfaceId) external;\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not.\n     *  If the result is not cached a direct lookup on the contract address is performed.\n     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n     *  {updateERC165Cache} with the contract address.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n\n    /**\n     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n     *  @param account Address of the contract to check.\n     *  @param interfaceId ERC165 interface to check.\n     *  @return True if `account` implements `interfaceId`, false otherwise.\n     */\n    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n\n    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n\n    event ManagerChanged(address indexed account, address indexed newManager);\n}\n\ninterface IBridge {\n    function version() external pure returns (string memory);\n\n    function getFeePercentage() external view returns(uint);\n\n    function calcMaxWithdraw() external view returns (uint);\n\n    /**\n     * ERC-20 tokens approve and transferFrom pattern\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n     */\n    function receiveTokens(address tokenToUse, uint256 amount) external returns(bool);\n\n    /**\n     * ERC-20 tokens approve and transferFrom pattern\n     * See https://eips.ethereum.org/EIPS/eip-20#transferfrom\n     */\n    function receiveTokensAt(\n        address tokenToUse,\n        uint256 amount,\n        address receiver,\n        bytes calldata extraData\n    ) external returns(bool);\n\n    /**\n     * ERC-777 tokensReceived hook allows to send tokens to a contract and notify it in a single transaction\n     * See https://eips.ethereum.org/EIPS/eip-777#motivation for details\n     */\n    function tokensReceived (\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes calldata userData,\n        bytes calldata operatorData\n    ) external;\n\n    /**\n     * Accepts the transaction from the other chain that was voted and sent by the federation contract\n     */\n    function acceptTransfer(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex,\n        uint8 decimals,\n        uint256 granularity\n    ) external returns(bool);\n\n    function acceptTransferAt(\n        address originalTokenAddress,\n        address receiver,\n        uint256 amount,\n        string calldata symbol,\n        bytes32 blockHash,\n        bytes32 transactionHash,\n        uint32 logIndex,\n        uint8 decimals,\n        uint256 granularity,\n        bytes calldata userData\n    ) external returns(bool);\n\n    event Cross(address indexed _tokenAddress, address indexed _to, uint256 _amount, string _symbol, bytes _userData,\n        uint8 _decimals, uint256 _granularity);\n    event NewSideToken(address indexed _newSideTokenAddress, address indexed _originalTokenAddress, string _newSymbol, uint256 _granularity);\n    event AcceptedCrossTransfer(address indexed _tokenAddress, address indexed _to, uint256 _amount, uint8 _decimals, uint256 _granularity,\n        uint256 _formattedAmount, uint8 _calculatedDecimals, uint256 _calculatedGranularity, bytes _userData);\n    event FeePercentageChanged(uint256 _amount);\n    event ErrorTokenReceiver(bytes _errorData);\n}\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract Context {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    constructor () internal { }\n    // solhint-disable-previous-line no-empty-blocks\n\n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ncontract IOwnable {\n    function owner() public view returns (address);\n    function isOwner() public view returns (bool);\n    function renounceOwnership() public;\n    function transferOwnership(address newOwner) public;\n}\n\ncontract InitializableOwnable is Context, IOwnable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function _initialize() internal {\n        require(_owner == address(0), \"already initialized\");\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"InitializableOwnable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"InitializableOwnable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see {ERC20Detailed}.\n */\n\n/**\n * @dev Optional functions from the ERC20 standard.\n */\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n     * these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20Mintable}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20};\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See {_burn} and {_approve}.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context, IOwnable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Returns true if the caller is the current owner.\n     */\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ncontract Token is ERC20, ERC20Detailed, Ownable {\n\n    /**\n     * @notice Constructor called on deployment, initiates the contract.\n     * @param _name The name of the token.\n     * @param _symbol The symbol of the token.\n     * @param _decimals The decimals of the token.\n     * */\n    constructor(string memory _name, string memory _symbol, uint8 _decimals) public\n        ERC20Detailed(_name, _symbol, _decimals) {}\n\n    /**\n     * @notice Creates new tokens and sends them to the recipient.\n     * @param _account The recipient address to get the minted tokens.\n     * @param _amount The amount of tokens to be minted.\n     * */\n    function mint(address _account, uint256 _amount) public onlyOwner {\n        _mint(_account, _amount);\n    }\n\n    /**\n     * @notice Burns tokens for the given account.\n     * @param _account The recipient address to get the minted tokens.\n     * @param _amount The amount of tokens to be minted.\n     * */\n    function burn(address _account, uint256 _amount) public onlyOwner {\n        _burn(_account, _amount);\n    }\n}\n\ncontract InitializableReentrancyGuard {\n    bool private _notEntered;\n\n    function _initialize() internal {\n        // Storing an initial non-zero value makes deployment a bit more\n        // expensive, but in exchange the refund on every call to nonReentrant\n        // will be lower in amount. Since refunds are capped to a percetange of\n        // the total transaction's gas, it is best to keep them low in cases\n        // like this one, to increase the likelihood of the full refund coming\n        // into effect.\n        _notEntered = true;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_notEntered, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _notEntered = false;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _notEntered = true;\n    }\n}\n\ncontract Masset is IERC777Recipient, InitializableOwnable, InitializableReentrancyGuard {\n\n    using SafeMath for uint256;\n\n    // Events\n\n    event Minted(\n        address indexed minter,\n        address indexed recipient,\n        uint256 massetQuantity,\n        address bAsset,\n        uint256 bassetQuantity);\n\n    event Redeemed(\n        address indexed redeemer,\n        address indexed recipient,\n        uint256 massetQuantity,\n        address bAsset,\n        uint256 bassetQuantity);\n\n    event onTokensReceivedCalled(\n        address operator,\n        address from,\n        address to,\n        uint amount,\n        bytes userData,\n        bytes operatorData\n    );\n\n    event onTokensMintedCalled(\n        address indexed sender,\n        uint256 orderAmount,\n        address tokenAddress,\n        bytes userData\n    );\n\n    event onSetBasketManager(address indexed sender, address indexed oldBasketManager, address indexed newBaskManager);\n    event onSetToken(address indexed sender, address indexed oldToken, address indexed newToken);\n    event onSetTokenOwner(address indexed sender, address indexed oldTokenOwner, address indexed newTokenOwner);\n    event onSetBridge(address indexed sender, address indexed oldBridge, address indexed newBridge);\n\n    // state\n    BasketManager private basketManager;\n    Token private token;\n    IBridge private bridge;\n\n    // internal\n\n    function registerAsERC777Recipient() internal {\n        IERC1820Registry ERC1820 = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n        ERC1820.setInterfaceImplementer(address(this), keccak256(\"ERC777TokensRecipient\"), address(this));\n    }\n\n    // public\n\n    function getVersion() external returns (string memory) {\n        return \"1.0\";\n    }\n\n    function initialize(\n        address _basketManagerAddress,\n        address _tokenAddress,\n        address _bridgeAddress,\n        bool _registerAsERC777RecipientFlag) public {\n\n        require(address(basketManager) == address(0) && address(token) == address(0), \"already initialized\");\n        require(_basketManagerAddress != address(0), \"invalid basket manager\");\n        require(_tokenAddress != address(0), \"invalid token\");\n\n        InitializableOwnable._initialize();\n        InitializableReentrancyGuard._initialize();\n\n        basketManager = BasketManager(_basketManagerAddress);\n        token = Token(_tokenAddress);\n        bridge = IBridge(_bridgeAddress);\n        if(_registerAsERC777RecipientFlag) {\n            registerAsERC777Recipient();\n        }\n    }\n\n    /***************************************\n                MINTING (PUBLIC)\n    ****************************************/\n\n    /**\n     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\n     *      must have approval to spend the senders bAsset\n     * @param _bAsset         Address of the bAsset to mint\n     * @param _bAssetQuantity Quantity in bAsset units\n     * @return massetMinted   Number of newly minted mAssets\n     */\n    function mint(\n        address _bAsset,\n        uint256 _bAssetQuantity\n    )\n        external\n        nonReentrant\n        returns (uint256 massetMinted)\n    {\n        return _mintTo(_bAsset, _bAssetQuantity, msg.sender);\n    }\n\n    /**\n     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\n     *      must have approval to spend the senders bAsset\n     * @param _bAsset         Address of the bAsset to mint\n     * @param _bAssetQuantity Quantity in bAsset units\n     * @param _recipient receipient of the newly minted mAsset tokens\n     * @return massetMinted   Number of newly minted mAssets\n     */\n    function mintTo(\n        address _bAsset,\n        uint256 _bAssetQuantity,\n        address _recipient\n    )\n        external\n        nonReentrant\n        returns (uint256 massetMinted)\n    {\n        return _mintTo(_bAsset, _bAssetQuantity, _recipient);\n    }\n\n    /***************************************\n              MINTING (INTERNAL)\n    ****************************************/\n\n    function _mintTo(\n        address _basset,\n        uint256 _bassetQuantity,\n        address _recipient\n    )\n        internal\n        returns (uint256 massetMinted)\n    {\n        require(_recipient != address(0), \"must be a valid recipient\");\n        require(_bassetQuantity > 0, \"quantity must not be 0\");\n\n        require(basketManager.isValidBasset(_basset), \"invalid basset\");\n        require(basketManager.checkBasketBalanceForDeposit(_basset, _bassetQuantity));\n\n        uint256 massetQuantity = basketManager.convertBassetToMassetQuantity(_basset, _bassetQuantity);\n\n        IERC20(_basset).transferFrom(msg.sender, address(this), _bassetQuantity);\n\n        token.mint(_recipient, massetQuantity);\n        emit Minted(msg.sender, _recipient, massetQuantity, _basset, _bassetQuantity);\n\n        return massetQuantity;\n    }\n\n    /***************************************\n              REDEMPTION (PUBLIC)\n    ****************************************/\n\n    /**\n     * @dev Credits the sender with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative mAsset quantity from the sender. Sender also incurs a small mAsset fee, if any.\n     * @param _bAsset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeem(\n        address _bAsset,\n        uint256 _massetQuantity\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_bAsset, _massetQuantity, msg.sender, false);\n    }\n\n    /**\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\n     * @param _bAsset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @param _recipient        Address to credit with withdrawn bAssets\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeemTo(\n        address _bAsset,\n        uint256 _massetQuantity,\n        address _recipient\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_bAsset, _massetQuantity, _recipient, false);\n    }\n\n    /***************************************\n              REDEMPTION (INTERNAL)\n    ****************************************/\n\n    function _redeemTo(\n        address _basset,\n        uint256 _massetQuantity,\n        address _recipient,\n        bool bridgeFlag\n    ) internal returns (uint256 massetRedeemed) {\n        require(_recipient != address(0), \"must be a valid recipient\");\n        require(_massetQuantity > 0, \"masset quantity must be greater than 0\");\n        require(basketManager.isValidBasset(_basset), \"invalid basset\");\n\n        uint256 bassetQuantity = basketManager.convertMassetToBassetQuantity(_basset, _massetQuantity);\n\n        require(basketManager.checkBasketBalanceForWithdrawal(_basset, bassetQuantity));\n\n        if(bridgeFlag) {\n            require(address(bridge) != address(0), \"invalid bridge\");\n            IERC20(_basset).approve(address(bridge), bassetQuantity);\n            require(\n                bridge.receiveTokensAt(_basset, bassetQuantity, _recipient, bytes(\"\")),\n                \"call to bridge failed\");\n        } else {\n            IERC20(_basset).transfer(_recipient, bassetQuantity);\n        }\n\n        token.burn(msg.sender, _massetQuantity);\n        emit Redeemed(msg.sender, _recipient, _massetQuantity, _basset, bassetQuantity);\n\n        return _massetQuantity;\n    }\n\n    // For the BRIDGE\n\n    /**\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\n     *      This function is designed to also call the bridge in order to have the basset tokens sent to\n     *      another blockchain.\n     * @param _basset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @param _recipient        Address to credit with withdrawn bAssets\n     * @param _bridgeAddress    This is ignored and is left here for backward compatibility with the FE\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeemToBridge(\n        address _basset,\n        uint256 _massetQuantity,\n        address _recipient,\n        address _bridgeAddress // for backward compatibility\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_basset, _massetQuantity, _recipient, true);\n    }\n\n    /**\n     * @dev Credits a recipient with a certain quantity of selected bAsset, in exchange for burning the\n     *      relative Masset quantity from the sender. Sender also incurs a small fee, if any.\n     *      This function is designed to also call the bridge in order to have the basset tokens sent to\n     *      another blockchain.\n     * @param _basset           Address of the bAsset to redeem\n     * @param _massetQuantity   Units of the masset to redeem\n     * @param _recipient        Address to credit with withdrawn bAssets\n     * @return massetMinted     Relative number of mAsset units burned to pay for the bAssets\n     */\n    function redeemToBridge(\n        address _basset,\n        uint256 _massetQuantity,\n        address _recipient\n    ) external nonReentrant returns (uint256 massetRedeemed) {\n        return _redeemTo(_basset, _massetQuantity, _recipient, true);\n    }\n\n    function _decodeAddress(bytes memory data) private pure returns (address) {\n        address addr = abi.decode(data, (address));\n        require(addr != address(0), \"Converter: Error decoding extraData\");\n        return addr;\n    }\n\n    function _encodeAddress(address _address) private pure returns (bytes memory) {\n        require(_address != address(0), \"Converter: Error encoding extraData\");\n        return abi.encode(_address);\n    }\n\n    function tokensReceived(\n        address _operator,\n        address _from,\n        address _to,\n        uint _amount,\n        bytes calldata _userData,\n        bytes calldata _operatorData\n    ) external {\n        emit onTokensReceivedCalled(\n            _operator,\n            _from,\n            _to,\n            _amount,\n            _userData,\n            _operatorData\n        );\n    }\n\n    /**\n     * @dev This is called by the bridge to let us know the user has sent tokens through it and\n     *      into the masset.\n     * @param _orderAmount      Units of the masset to redeem\n     * @param _tokenAddress     Address of the bAsset to redeem\n     * @param _userData         Address of the final recipient as ABI encoded bytes\n     */\n    function onTokensMinted(\n        uint256 _orderAmount,\n        address _tokenAddress,\n        bytes calldata _userData\n    ) external nonReentrant {\n        emit onTokensMintedCalled(msg.sender, _orderAmount, _tokenAddress, _userData);\n\n        require(_orderAmount > 0, \"amount must be > 0\");\n        require(msg.sender == address(bridge), \"only bridge may call\");\n\n        address recipient =  _decodeAddress(_userData);\n        address basset = _tokenAddress;\n\n        require(basketManager.isValidBasset(basset), \"invalid basset\");\n        require(basketManager.checkBasketBalanceForDeposit(basset, _orderAmount), \"basket out of balance\");\n\n        uint256 massetQuantity = basketManager.convertBassetToMassetQuantity(basset, _orderAmount);\n        token.mint(recipient, massetQuantity);\n        emit Minted(msg.sender, recipient, massetQuantity, basset, _orderAmount);\n    }\n\n    // Getters\n\n    function getToken() external view returns (address) {\n        return address(token);\n    }\n\n    function geBasketManager() external view returns (address) {\n        return address(basketManager);\n    }\n\n    function geBridge() external view returns (address) {\n        return address(bridge);\n    }\n\n    // Admin functions\n\n    function setBasketManager(address _basketManagerAddress) public onlyOwner {\n        require(_basketManagerAddress != address(0), \"address invalid\");\n        require(_basketManagerAddress != address(basketManager), \"same address\");\n\n        emit onSetBasketManager(msg.sender, address(basketManager), _basketManagerAddress);\n        basketManager = BasketManager(_basketManagerAddress);\n    }\n\n    function setToken(address _tokenAddress) public onlyOwner {\n        require(_tokenAddress != address(0), \"address invalid\");\n        require(_tokenAddress != address(token), \"same address\");\n\n        emit onSetToken(msg.sender, address(token), _tokenAddress);\n        token = Token(_tokenAddress);\n    }\n\n    function setBridge(address _bridgeAddress) public onlyOwner {\n        require(_bridgeAddress != address(0), \"address invalid\");\n        require(_bridgeAddress != address(bridge), \"same address\");\n\n        emit onSetBridge(msg.sender, address(bridge), _bridgeAddress);\n        bridge = IBridge(_bridgeAddress);\n    }\n\n    function setTokenOwner(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0), \"address invalid\");\n        require(_newOwner != token.owner(), \"same address\");\n\n        emit onSetTokenOwner(msg.sender, token.owner(), _newOwner);\n        token.transferOwnership(_newOwner);\n    }\n}",
            "file": "Masset.sol"
        }
    ],
    "libraries": {},
    "creationData": {
        "blockHash": "0x29bf4953faa16783506e0cd493fd3ca5c940ff411ef6d05ee65d665a4e01c71a",
        "blockNumber": 3379379,
        "transactionHash": "0x823851d2c0cf8d523495f127447590ce9c2ed96aed47bab6010ef0fc4373fd92",
        "timestamp": 1621933269
    }
}