{
    "address": "0xdef5964bceace149b4b3ba51c75d41fc20858b73",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "Bundles",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        }
    },
    "version": "0.5.17+commit.d19bba13",
    "source": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity <=0.7.5;\n\n\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n\npragma solidity ^0.5.0;\n\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\n// File: contracts\\ERC20\\TokenMintERC20Token.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title TokenMintERC20Token\n * @author TokenMint (visit https://tokenmint.io)\n *\n * @dev Standard ERC20 token with burning and optional functions implemented.\n * For full specification of ERC-20 standard see:\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\ncontract TokenMintERC20Token is ERC20 {\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Constructor.\n     * @param name name of the token\n     * @param symbol symbol of the token, 3-4 chars is recommended\n     * @param decimals number of decimal places of one token unit, 18 is widely used\n     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n     * @param tokenOwnerAddress address that gets 100% of token supply\n     */\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n      _name = name;\n      _symbol = symbol;\n      _decimals = decimals;\n\n      // set tokenOwnerAddress as owner of all tokens\n      _mint(tokenOwnerAddress, totalSupply);\n\n      // pay the service fee for contract deployment\n      feeReceiver.transfer(msg.value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of lowest token units to be burned.\n     */\n    function burn(uint256 value) public {\n      _burn(msg.sender, value);\n    }\n\n    // optional functions from ERC20 stardard\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n      return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n      return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n      return _decimals;\n    }\n}\n\ncontract Bundles is ReentrancyGuard {\n    \n    uint256 public bundleId = 1;\n    address public owner;\n    \n    /* Bundle Token Address */\n    \n    TokenMintERC20Token public bundle_address;\n    \n    /* Variable to store the fee collected */\n    \n    uint256 public fee_collected;       \n    \n    /* Last Created Informations*/\n    \n    uint256 public lastcreated;\n    uint256 lastbundlecreated;\n\n    struct UserBets{\n        uint256[10] bundles;\n        uint256[10] amounts;\n        uint256[10] prices;\n        bool betted;\n        uint256 balance;\n        uint256 totalbet;\n        bool claimed;\n    }\n    \n    struct User{\n        uint256[] bundles;\n        string username;\n        uint256 balance;\n        uint256 freebal;\n        bool active;\n    }\n    \n    struct Data{\n        address[] user;\n    }\n    \n    struct Bundle{\n        uint256[10] prices;\n        uint256 startime;\n        uint256 stakingends;\n        uint256 endtime;\n    }\n    \n    mapping(address => mapping(uint256 => UserBets)) bets;\n    mapping(uint256 => Bundle) bundle;\n    mapping(address => User) user;\n    mapping(uint256 => Data) data;\n    \n    constructor(address _bundle_address) public{\n        owner = msg.sender;\n        bundle_address = TokenMintERC20Token(_bundle_address);\n        lastcreated = block.timestamp;\n    }\n    \n    /*  Registering the username to the contract */\n    \n    function Register(string memory _username) public returns(bool){\n        User storage us = user[msg.sender];\n        require(us.active == false,'Existing User');\n        us.active = true;\n        us.username = _username;\n        return true;\n    }\n    \n    /* For placing a prediction in the bundle. */\n    \n    function PlaceBet(uint256 index,uint256 _prices,uint256 _percent,uint256 _bundleId,uint256 _amount) public returns(bool){\n        require(_bundleId <= bundleId,'Invalid Bundle');\n        require(bundle_address.allowance(msg.sender,address(this))>=_amount,'Approval failed');\n        Bundle storage b = bundle[_bundleId];\n        Data storage d = data[_bundleId];\n        require(b.stakingends >= block.timestamp,'Ended');\n        User storage us = user[msg.sender];\n        require(us.active == true,'Register to participate');\n        UserBets storage u = bets[msg.sender][_bundleId];\n        require(u.bundles[index] == 0,'Already Betted');\n        if(u.betted == false){\n            u.balance = bundle_address.balanceOf(msg.sender);\n            u.betted = true;\n        }\n        else{\n            require(SafeMath.add(u.totalbet,_amount) <= u.balance,'Threshold Reached');\n        }\n        us.bundles.push(_bundleId);\n        us.balance = SafeMath.add(us.balance,_amount);\n        u.bundles[index] = _percent; \n        u.prices[index] = _prices; \n        u.amounts[index] = _amount;\n        u.totalbet = u.totalbet + _amount;\n        d.user.push(msg.sender);\n        bundle_address.transferFrom(msg.sender,address(this),_amount);\n        return true;\n    }\n    \n    /* Update user balance. Max 40% can be changed */\n    \n    function updatebal(address _user,uint256 _bundleId,uint256 _reward,bool _isPositive) public returns(bool){\n        require(msg.sender == owner,'Not Owner');\n        require(_reward <= 40000000,'Invalid Reward Percent'); \n        User storage us = user[_user];\n        require(us.active == true,'Invalid User');\n        UserBets storage u = bets[_user][_bundleId];\n        require(u.claimed == false,'Already Claimed');\n        if(_isPositive == true){\n            updateFee(_reward,u.totalbet);\n            uint256 temp = SafeMath.mul(_reward,90);\n            uint256 reward = SafeMath.div(temp,100);\n            uint256 a = SafeMath.mul(u.totalbet,reward);\n            uint256 b = SafeMath.div(a,10**8);\n            uint256 c = SafeMath.add(u.totalbet,b);\n            u.claimed = true;\n            us.freebal = SafeMath.add(c,us.freebal);\n            us.balance = SafeMath.sub(us.balance,u.totalbet);\n        }\n        else{\n            uint256 a = SafeMath.mul(u.totalbet,_reward);\n            uint256 b = SafeMath.div(a,10**8);\n            uint256 c = SafeMath.sub(u.totalbet,b);\n            u.claimed = true;\n            us.freebal = SafeMath.add(c,us.freebal);\n            us.balance = SafeMath.sub(us.balance,u.totalbet);\n        }\n        return true;\n    }\n    \n    /* Update the fee incurred */\n    \n    function updateFee(uint256 r,uint256 amt) internal{\n        uint256 temp = SafeMath.mul(r,1);\n        uint256 reward = SafeMath.div(temp,100);\n        uint256 a = SafeMath.mul(amt,reward);\n        uint256 b = SafeMath.div(a,10**8);\n        fee_collected = SafeMath.add(fee_collected,b);\n    }\n    \n    /* Create a new bundle after 3 days */\n    \n    function createBundle(uint256[10] memory _prices) public returns(bool){\n        require(msg.sender == owner,'Not Owner');\n        require( block.timestamp > lastbundlecreated +  2 days,'Cannot Create');    // 2 days\n        Bundle storage b = bundle[bundleId];\n        b.prices = _prices;\n        b.startime = block.timestamp;\n        lastbundlecreated = block.timestamp;\n        lastcreated = block.timestamp;\n        b.endtime = SafeMath.add(block.timestamp, 2 days);               // 2 days\n        b.stakingends = SafeMath.add(block.timestamp, 1 days);           // 1 days        \n        bundleId = SafeMath.add(bundleId,1);\n        return true;\n    }\n    \n    /* Update new owner of the contract */\n    \n    function updateowner(address new_owner) public returns(bool){\n        require(msg.sender == owner,'Not an Owner');\n        owner = new_owner;\n        return true;\n    }\n    \n    /* Update the timestamp of the last creted bundle. this function cannot change the bundle time. Last created variable is for display sake. */\n    \n    function updatetime(uint256 _timestamp) public returns(bool){\n        require(msg.sender == owner,'Not an owner');\n        lastcreated =  _timestamp;\n    }\n    \n    /* Allows the user to withdraw his claimable balance from the contract */\n    \n    function withdraw() public nonReentrant returns(bool){\n       User storage us = user[msg.sender];\n       require(us.active == true,'Invalid User'); \n       require(us.freebal > 0,'No bal');\n       bundle_address.transfer(msg.sender,us.freebal);\n       us.freebal = 0;\n       return true;\n    }\n    \n    /*  Fetch the information about user. His claimable balance, fixed balance & stuff */\n     \n    function fetchUser(address _user) public view returns(uint256[] memory _bundles,string memory username,uint256 claimable,uint256 staked_balance, bool active){\n        User storage us = user[_user];\n        return(us.bundles,us.username,us.freebal,us.balance,us.active);\n    }\n    \n    /* Fetch the information of a BundleId */\n    \n    function fetchBundle(uint256 _bundleId) public view returns(uint256[10] memory _prices,uint256 _start,uint256 _end,uint256 _staking_ends){\n        Bundle storage b = bundle[_bundleId];\n        return(b.prices,b.startime,b.endtime,b.stakingends);\n    }\n    \n    /* Fetch the prediction information of each user in each bundle. Pass bundleId and User Address to get the strike price as well as the amount in 18 decimals */\n    \n    function fetchUserBets(address _user, uint256 _bundleId) public view returns(uint256[10] memory _bundles,uint256[10] memory _prices,uint256[10] memory _amounts,uint256 balance,uint256 totalbet){\n        UserBets storage u = bets[_user][_bundleId];\n        return (u.bundles,u.prices,u.amounts,u.balance,u.totalbet);\n    }\n    \n    /* Fetch all the user wallet predicted in a bundleId. Pass bundleId and will return an array of betters */\n    \n    function fetchUserInBundle(uint256 _bundleId) public view returns(address[] memory _betters){\n        Data storage d = data[_bundleId];\n        return d.user;\n    }\n    \n    /*  \n        Only Allow the Developer to withdraw the developer fee\n    */\n    \n    function collectdeveloperfee() public nonReentrant returns(bool){\n        require(msg.sender == owner,'To Be Claimed By Developer');\n        bundle_address.transfer(msg.sender,fee_collected);\n        fee_collected = 0;\n        return true;\n    }\n    \n}",
    "imports": [
        {
            "name": "rHighRiskBundles.sol",
            "contents": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity <=0.7.5;\n\n\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n\npragma solidity ^0.5.0;\n\ncontract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n\npragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n\npragma solidity ^0.5.0;\n\n\n\n/**\n * @dev Implementation of the `IERC20` interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using `_mint`.\n * For a generic mechanism see `ERC20Mintable`.\n *\n * *For a detailed writeup see our guide [How to implement supply\n * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See `IERC20.approve`.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    /**\n     * @dev See `IERC20.totalSupply`.\n     */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See `IERC20.balanceOf`.\n     */\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See `IERC20.transfer`.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.allowance`.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See `IERC20.approve`.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See `IERC20.transferFrom`.\n     *\n     * Emits an `Approval` event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of `ERC20`;\n     *\n     * Requirements:\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `value`.\n     * - the caller must have allowance for `sender`'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to `approve` that can be used as a mitigation for\n     * problems described in `IERC20.approve`.\n     *\n     * Emits an `Approval` event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to `transfer`, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a `Transfer` event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount);\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a `Transfer` event with `from` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n     /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a `Transfer` event with `to` set to the zero address.\n     *\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n     *\n     * This is internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an `Approval` event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /**\n     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n     * from the caller's allowance.\n     *\n     * See `_burn` and `_approve`.\n     */\n    function _burnFrom(address account, uint256 amount) internal {\n        _burn(account, amount);\n        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n    }\n}\n\n// File: contracts\\ERC20\\TokenMintERC20Token.sol\n\npragma solidity ^0.5.0;\n\n\n/**\n * @title TokenMintERC20Token\n * @author TokenMint (visit https://tokenmint.io)\n *\n * @dev Standard ERC20 token with burning and optional functions implemented.\n * For full specification of ERC-20 standard see:\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n */\ncontract TokenMintERC20Token is ERC20 {\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    /**\n     * @dev Constructor.\n     * @param name name of the token\n     * @param symbol symbol of the token, 3-4 chars is recommended\n     * @param decimals number of decimal places of one token unit, 18 is widely used\n     * @param totalSupply total supply of tokens in lowest units (depending on decimals)\n     * @param tokenOwnerAddress address that gets 100% of token supply\n     */\n    constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable {\n      _name = name;\n      _symbol = symbol;\n      _decimals = decimals;\n\n      // set tokenOwnerAddress as owner of all tokens\n      _mint(tokenOwnerAddress, totalSupply);\n\n      // pay the service fee for contract deployment\n      feeReceiver.transfer(msg.value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of lowest token units to be burned.\n     */\n    function burn(uint256 value) public {\n      _burn(msg.sender, value);\n    }\n\n    // optional functions from ERC20 stardard\n\n    /**\n     * @return the name of the token.\n     */\n    function name() public view returns (string memory) {\n      return _name;\n    }\n\n    /**\n     * @return the symbol of the token.\n     */\n    function symbol() public view returns (string memory) {\n      return _symbol;\n    }\n\n    /**\n     * @return the number of decimals of the token.\n     */\n    function decimals() public view returns (uint8) {\n      return _decimals;\n    }\n}\n\ncontract Bundles is ReentrancyGuard {\n    \n    uint256 public bundleId = 1;\n    address public owner;\n    \n    /* Bundle Token Address */\n    \n    TokenMintERC20Token public bundle_address;\n    \n    /* Variable to store the fee collected */\n    \n    uint256 public fee_collected;       \n    \n    /* Last Created Informations*/\n    \n    uint256 public lastcreated;\n    uint256 lastbundlecreated;\n\n    struct UserBets{\n        uint256[10] bundles;\n        uint256[10] amounts;\n        uint256[10] prices;\n        bool betted;\n        uint256 balance;\n        uint256 totalbet;\n        bool claimed;\n    }\n    \n    struct User{\n        uint256[] bundles;\n        string username;\n        uint256 balance;\n        uint256 freebal;\n        bool active;\n    }\n    \n    struct Data{\n        address[] user;\n    }\n    \n    struct Bundle{\n        uint256[10] prices;\n        uint256 startime;\n        uint256 stakingends;\n        uint256 endtime;\n    }\n    \n    mapping(address => mapping(uint256 => UserBets)) bets;\n    mapping(uint256 => Bundle) bundle;\n    mapping(address => User) user;\n    mapping(uint256 => Data) data;\n    \n    constructor(address _bundle_address) public{\n        owner = msg.sender;\n        bundle_address = TokenMintERC20Token(_bundle_address);\n        lastcreated = block.timestamp;\n    }\n    \n    /*  Registering the username to the contract */\n    \n    function Register(string memory _username) public returns(bool){\n        User storage us = user[msg.sender];\n        require(us.active == false,'Existing User');\n        us.active = true;\n        us.username = _username;\n        return true;\n    }\n    \n    /* For placing a prediction in the bundle. */\n    \n    function PlaceBet(uint256 index,uint256 _prices,uint256 _percent,uint256 _bundleId,uint256 _amount) public returns(bool){\n        require(_bundleId <= bundleId,'Invalid Bundle');\n        require(bundle_address.allowance(msg.sender,address(this))>=_amount,'Approval failed');\n        Bundle storage b = bundle[_bundleId];\n        Data storage d = data[_bundleId];\n        require(b.stakingends >= block.timestamp,'Ended');\n        User storage us = user[msg.sender];\n        require(us.active == true,'Register to participate');\n        UserBets storage u = bets[msg.sender][_bundleId];\n        require(u.bundles[index] == 0,'Already Betted');\n        if(u.betted == false){\n            u.balance = bundle_address.balanceOf(msg.sender);\n            u.betted = true;\n        }\n        else{\n            require(SafeMath.add(u.totalbet,_amount) <= u.balance,'Threshold Reached');\n        }\n        us.bundles.push(_bundleId);\n        us.balance = SafeMath.add(us.balance,_amount);\n        u.bundles[index] = _percent; \n        u.prices[index] = _prices; \n        u.amounts[index] = _amount;\n        u.totalbet = u.totalbet + _amount;\n        d.user.push(msg.sender);\n        bundle_address.transferFrom(msg.sender,address(this),_amount);\n        return true;\n    }\n    \n    /* Update user balance. Max 40% can be changed */\n    \n    function updatebal(address _user,uint256 _bundleId,uint256 _reward,bool _isPositive) public returns(bool){\n        require(msg.sender == owner,'Not Owner');\n        require(_reward <= 40000000,'Invalid Reward Percent'); \n        User storage us = user[_user];\n        require(us.active == true,'Invalid User');\n        UserBets storage u = bets[_user][_bundleId];\n        require(u.claimed == false,'Already Claimed');\n        if(_isPositive == true){\n            updateFee(_reward,u.totalbet);\n            uint256 temp = SafeMath.mul(_reward,90);\n            uint256 reward = SafeMath.div(temp,100);\n            uint256 a = SafeMath.mul(u.totalbet,reward);\n            uint256 b = SafeMath.div(a,10**8);\n            uint256 c = SafeMath.add(u.totalbet,b);\n            u.claimed = true;\n            us.freebal = SafeMath.add(c,us.freebal);\n            us.balance = SafeMath.sub(us.balance,u.totalbet);\n        }\n        else{\n            uint256 a = SafeMath.mul(u.totalbet,_reward);\n            uint256 b = SafeMath.div(a,10**8);\n            uint256 c = SafeMath.sub(u.totalbet,b);\n            u.claimed = true;\n            us.freebal = SafeMath.add(c,us.freebal);\n            us.balance = SafeMath.sub(us.balance,u.totalbet);\n        }\n        return true;\n    }\n    \n    /* Update the fee incurred */\n    \n    function updateFee(uint256 r,uint256 amt) internal{\n        uint256 temp = SafeMath.mul(r,1);\n        uint256 reward = SafeMath.div(temp,100);\n        uint256 a = SafeMath.mul(amt,reward);\n        uint256 b = SafeMath.div(a,10**8);\n        fee_collected = SafeMath.add(fee_collected,b);\n    }\n    \n    /* Create a new bundle after 3 days */\n    \n    function createBundle(uint256[10] memory _prices) public returns(bool){\n        require(msg.sender == owner,'Not Owner');\n        require( block.timestamp > lastbundlecreated +  2 days,'Cannot Create');    // 2 days\n        Bundle storage b = bundle[bundleId];\n        b.prices = _prices;\n        b.startime = block.timestamp;\n        lastbundlecreated = block.timestamp;\n        lastcreated = block.timestamp;\n        b.endtime = SafeMath.add(block.timestamp, 2 days);               // 2 days\n        b.stakingends = SafeMath.add(block.timestamp, 1 days);           // 1 days        \n        bundleId = SafeMath.add(bundleId,1);\n        return true;\n    }\n    \n    /* Update new owner of the contract */\n    \n    function updateowner(address new_owner) public returns(bool){\n        require(msg.sender == owner,'Not an Owner');\n        owner = new_owner;\n        return true;\n    }\n    \n    /* Update the timestamp of the last creted bundle. this function cannot change the bundle time. Last created variable is for display sake. */\n    \n    function updatetime(uint256 _timestamp) public returns(bool){\n        require(msg.sender == owner,'Not an owner');\n        lastcreated =  _timestamp;\n    }\n    \n    /* Allows the user to withdraw his claimable balance from the contract */\n    \n    function withdraw() public nonReentrant returns(bool){\n       User storage us = user[msg.sender];\n       require(us.active == true,'Invalid User'); \n       require(us.freebal > 0,'No bal');\n       bundle_address.transfer(msg.sender,us.freebal);\n       us.freebal = 0;\n       return true;\n    }\n    \n    /*  Fetch the information about user. His claimable balance, fixed balance & stuff */\n     \n    function fetchUser(address _user) public view returns(uint256[] memory _bundles,string memory username,uint256 claimable,uint256 staked_balance, bool active){\n        User storage us = user[_user];\n        return(us.bundles,us.username,us.freebal,us.balance,us.active);\n    }\n    \n    /* Fetch the information of a BundleId */\n    \n    function fetchBundle(uint256 _bundleId) public view returns(uint256[10] memory _prices,uint256 _start,uint256 _end,uint256 _staking_ends){\n        Bundle storage b = bundle[_bundleId];\n        return(b.prices,b.startime,b.endtime,b.stakingends);\n    }\n    \n    /* Fetch the prediction information of each user in each bundle. Pass bundleId and User Address to get the strike price as well as the amount in 18 decimals */\n    \n    function fetchUserBets(address _user, uint256 _bundleId) public view returns(uint256[10] memory _bundles,uint256[10] memory _prices,uint256[10] memory _amounts,uint256 balance,uint256 totalbet){\n        UserBets storage u = bets[_user][_bundleId];\n        return (u.bundles,u.prices,u.amounts,u.balance,u.totalbet);\n    }\n    \n    /* Fetch all the user wallet predicted in a bundleId. Pass bundleId and will return an array of betters */\n    \n    function fetchUserInBundle(uint256 _bundleId) public view returns(address[] memory _betters){\n        Data storage d = data[_bundleId];\n        return d.user;\n    }\n    \n    /*  \n        Only Allow the Developer to withdraw the developer fee\n    */\n    \n    function collectdeveloperfee() public nonReentrant returns(bool){\n        require(msg.sender == owner,'To Be Claimed By Developer');\n        bundle_address.transfer(msg.sender,fee_collected);\n        fee_collected = 0;\n        return true;\n    }\n    \n}",
            "file": "rHighRiskBundles.sol"
        }
    ],
    "libraries": {},
    "constructorArguments": [
        "0x4991516df6053121121274397a8c1dad608bc95b"
    ],
    "creationData": {
        "blockHash": "0xcf4490882f67c34963b0d7146570ca47294d3ca63077d04e99ac1ce2239dec1a",
        "blockNumber": 3266418,
        "transactionHash": "0xe378d486131f63e37cb725491f57cdac34df21ec06c3a7830cab9ee0e75016ac",
        "timestamp": 1618417151
    }
}