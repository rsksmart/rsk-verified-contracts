{
    "address": "0x7afb76858df32e4810bc05ae0d0ed6aff00cd854",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "MocRegisterUIntChange",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "evmVersion": "istanbul"
    },
    "version": "0.6.12+commit.27d51765",
    "source": "// SPDX-License-Identifier: UNLICENSED\n// File: contracts/moc-governance/Governance/ChangeContract.sol\n\npragma solidity ^0.6.0;\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n    /**\n      @notice Override this function with a recipe of the changes to be done when this ChangeContract\n      is executed\n     */\n    function execute() external;\n}\n\n// File: contracts/IRegistry.sol\n\npragma solidity ^0.6.0;\n\ninterface IRegistry {\n    // *** Getter Methods ***\n    function getDecimal(bytes32 _key) external view returns (int232 base, int16 exp);\n\n    function getUint(bytes32 _key) external view returns (uint248);\n\n    function getString(bytes32 _key) external view returns (string memory);\n\n    function getAddress(bytes32 _key) external view returns (address);\n\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n\n    function getBool(bytes32 _key) external view returns (bool);\n\n    function getInt(bytes32 _key) external view returns (int248);\n\n    // *** Setter Methods ***\n    function setDecimal(\n        bytes32 _key,\n        int232 _base,\n        int16 _exp\n    ) external;\n\n    function setUint(bytes32 _key, uint248 _value) external;\n\n    function setString(bytes32 _key, string calldata _value) external;\n\n    function setAddress(bytes32 _key, address _value) external;\n\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n\n    function setBool(bytes32 _key, bool _value) external;\n\n    function setInt(bytes32 _key, int248 _value) external;\n\n    // *** Delete Methods ***\n    function deleteDecimal(bytes32 _key) external;\n\n    function deleteUint(bytes32 _key) external;\n\n    function deleteString(bytes32 _key) external;\n\n    function deleteAddress(bytes32 _key) external;\n\n    function deleteBytes(bytes32 _key) external;\n\n    function deleteBool(bytes32 _key) external;\n\n    function deleteInt(bytes32 _key) external;\n\n    // Nov 2020 Upgrade\n    // *** Getter Methods ***\n    function getAddressArrayLength(bytes32 _key) external view returns (uint256);\n\n    function getAddressArrayElementAt(bytes32 _key, uint256 idx) external view returns (address);\n\n    function pushAddressArrayElement(bytes32 _key, address _addr) external;\n\n    function getAddressArray(bytes32 _key) external view returns (address[] memory);\n\n    function addressArrayContains(bytes32 _key, address value) external view returns (bool);\n\n    // *** Setters ***\n    function pushAddressArray(bytes32 _key, address[] memory data) external;\n\n    function clearAddressArray(bytes32 _key) external;\n\n    function removeAddressArrayElement(bytes32 _key, address value) external;\n}\n\n// File: contracts/change/MocRegisterUIntChange.sol\n\npragma solidity 0.6.12;\n\n\n\n/**\n  @title MocRegisterUIntChange\n  @notice This contract is a ChangeContract intended to initialize all the MOC registry values\n */\ncontract MocRegisterUIntChange is ChangeContract {\n    IRegistry public registry;\n    bytes32 public key;\n    uint248 public val;\n\n    /**\n      @notice Constructor\n    */\n    constructor(\n        IRegistry _registry,\n        bytes32 _key,\n        uint248 _val\n    ) public {\n        registry = _registry;\n        key = _key;\n        val = _val;\n    }\n\n    /**\n      @notice Execute the changes.\n      @dev Should be called by the governor, but this contract does not check that explicitly because it is\n      not its responsability in the current architecture\n     */\n    function execute() external override {\n        require(address(registry) != address(0), \"Use once\");\n        registry.setUint(key, val);\n        // usable just once!!!\n        registry = IRegistry(0);\n    }\n}\n",
    "imports": [
        {
            "name": "MocRegisterUIntChangeFlat.sol",
            "contents": "// SPDX-License-Identifier: UNLICENSED\n// File: contracts/moc-governance/Governance/ChangeContract.sol\n\npragma solidity ^0.6.0;\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n    /**\n      @notice Override this function with a recipe of the changes to be done when this ChangeContract\n      is executed\n     */\n    function execute() external;\n}\n\n// File: contracts/IRegistry.sol\n\npragma solidity ^0.6.0;\n\ninterface IRegistry {\n    // *** Getter Methods ***\n    function getDecimal(bytes32 _key) external view returns (int232 base, int16 exp);\n\n    function getUint(bytes32 _key) external view returns (uint248);\n\n    function getString(bytes32 _key) external view returns (string memory);\n\n    function getAddress(bytes32 _key) external view returns (address);\n\n    function getBytes(bytes32 _key) external view returns (bytes memory);\n\n    function getBool(bytes32 _key) external view returns (bool);\n\n    function getInt(bytes32 _key) external view returns (int248);\n\n    // *** Setter Methods ***\n    function setDecimal(\n        bytes32 _key,\n        int232 _base,\n        int16 _exp\n    ) external;\n\n    function setUint(bytes32 _key, uint248 _value) external;\n\n    function setString(bytes32 _key, string calldata _value) external;\n\n    function setAddress(bytes32 _key, address _value) external;\n\n    function setBytes(bytes32 _key, bytes calldata _value) external;\n\n    function setBool(bytes32 _key, bool _value) external;\n\n    function setInt(bytes32 _key, int248 _value) external;\n\n    // *** Delete Methods ***\n    function deleteDecimal(bytes32 _key) external;\n\n    function deleteUint(bytes32 _key) external;\n\n    function deleteString(bytes32 _key) external;\n\n    function deleteAddress(bytes32 _key) external;\n\n    function deleteBytes(bytes32 _key) external;\n\n    function deleteBool(bytes32 _key) external;\n\n    function deleteInt(bytes32 _key) external;\n\n    // Nov 2020 Upgrade\n    // *** Getter Methods ***\n    function getAddressArrayLength(bytes32 _key) external view returns (uint256);\n\n    function getAddressArrayElementAt(bytes32 _key, uint256 idx) external view returns (address);\n\n    function pushAddressArrayElement(bytes32 _key, address _addr) external;\n\n    function getAddressArray(bytes32 _key) external view returns (address[] memory);\n\n    function addressArrayContains(bytes32 _key, address value) external view returns (bool);\n\n    // *** Setters ***\n    function pushAddressArray(bytes32 _key, address[] memory data) external;\n\n    function clearAddressArray(bytes32 _key) external;\n\n    function removeAddressArrayElement(bytes32 _key, address value) external;\n}\n\n// File: contracts/change/MocRegisterUIntChange.sol\n\npragma solidity 0.6.12;\n\n\n\n/**\n  @title MocRegisterUIntChange\n  @notice This contract is a ChangeContract intended to initialize all the MOC registry values\n */\ncontract MocRegisterUIntChange is ChangeContract {\n    IRegistry public registry;\n    bytes32 public key;\n    uint248 public val;\n\n    /**\n      @notice Constructor\n    */\n    constructor(\n        IRegistry _registry,\n        bytes32 _key,\n        uint248 _val\n    ) public {\n        registry = _registry;\n        key = _key;\n        val = _val;\n    }\n\n    /**\n      @notice Execute the changes.\n      @dev Should be called by the governor, but this contract does not check that explicitly because it is\n      not its responsability in the current architecture\n     */\n    function execute() external override {\n        require(address(registry) != address(0), \"Use once\");\n        registry.setUint(key, val);\n        // usable just once!!!\n        registry = IRegistry(0);\n    }\n}\n",
            "file": "MocRegisterUIntChangeFlat.sol"
        }
    ],
    "libraries": {},
    "encodedConstructorArguments": "000000000000000000000000cd101a2414256da8f8e25d7b483b3cf639a71683b43ee0a5ee6dcc7115ce824e4e353526ad6e479afa4daeb78451070de942de360000000000000000000000000000000000000000000000000000000000015180",
    "creationData": {
        "blockHash": "0x52538a0cac7db05ab6efcf7ea62153708fc0a30ae0b2e6f8b735611a565bd437",
        "blockNumber": 3382762,
        "transactionHash": "0xa80a2436d02ff5f1abdecea84ab824bd25b913332604f7ddfb7de492731b54e3",
        "timestamp": 1622038985
    }
}