{
    "address": "0xe8ad807af019be48ae509dead7ec6c634961eb42",
    "net": {
        "id": "30",
        "name": "RSK Mainnet"
    },
    "name": "BufferAddOutputChange",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "evmVersion": "istanbul"
    },
    "version": "0.6.12+commit.27d51765",
    "source": "// SPDX-License-Identifier: UNLICENSED\n// File: @moc/shared/contracts/moc-governance/Governance/ChangeContract.sol\n\npragma solidity ^0.6.0;\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n    /**\n      @notice Override this function with a recipe of the changes to be done when this ChangeContract\n      is executed\n     */\n    function execute() external;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/change/BufferAddOutputChange.sol\n\npragma solidity 0.6.12;\n\n\n\ninterface IBufferAddOutput {\n    function addOutput(\n        address payable output,\n        uint256 split,\n        uint256 threshold\n    ) external;\n}\n\n/**\n  @title BufferAddOutputChange\n  @notice Call addOutput\n */\ncontract BufferAddOutputChange is ChangeContract {\n    IBufferAddOutput public other;\n    address payable output;\n    uint256 split;\n    uint256 threshold;\n\n    /**\n      @notice Constructor\n    */\n    constructor(\n        IBufferAddOutput _other,\n        address payable _output,\n        uint256 _split,\n        uint256 _threshold\n    ) public {\n        other = _other;\n        output = _output;\n        split = _split;\n        threshold = _threshold;\n    }\n\n    /**\n      @notice Execute the changes.\n      @dev Should be called by the governor, but this contract does not check that explicitly because it is\n      not its responsability in the current architecture\n     */\n    function execute() external override {\n        other.addOutput(output, split, threshold);\n    }\n}\n",
    "imports": [
        {
            "name": "BufferAddOutputChangeFlat.sol",
            "contents": "// SPDX-License-Identifier: UNLICENSED\n// File: @moc/shared/contracts/moc-governance/Governance/ChangeContract.sol\n\npragma solidity ^0.6.0;\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n    /**\n      @notice Override this function with a recipe of the changes to be done when this ChangeContract\n      is executed\n     */\n    function execute() external;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n\npragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: contracts/change/BufferAddOutputChange.sol\n\npragma solidity 0.6.12;\n\n\n\ninterface IBufferAddOutput {\n    function addOutput(\n        address payable output,\n        uint256 split,\n        uint256 threshold\n    ) external;\n}\n\n/**\n  @title BufferAddOutputChange\n  @notice Call addOutput\n */\ncontract BufferAddOutputChange is ChangeContract {\n    IBufferAddOutput public other;\n    address payable output;\n    uint256 split;\n    uint256 threshold;\n\n    /**\n      @notice Constructor\n    */\n    constructor(\n        IBufferAddOutput _other,\n        address payable _output,\n        uint256 _split,\n        uint256 _threshold\n    ) public {\n        other = _other;\n        output = _output;\n        split = _split;\n        threshold = _threshold;\n    }\n\n    /**\n      @notice Execute the changes.\n      @dev Should be called by the governor, but this contract does not check that explicitly because it is\n      not its responsability in the current architecture\n     */\n    function execute() external override {\n        other.addOutput(output, split, threshold);\n    }\n}\n",
            "file": "BufferAddOutputChangeFlat.sol"
        }
    ],
    "libraries": {},
    "encodedConstructorArguments": "000000000000000000000000f09006e812be98c7b18c877af5c126629acb6cab000000000000000000000000a288319ecb63301e21963e21ef3ca8fb720d2672000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000003216bc7ef98c55fa00",
    "creationData": {
        "blockHash": "0xb7f1dc1bce141c639245d9f8e3d7e9fb68825c256c7a0d50510131a9f68ba107",
        "blockNumber": 3377487,
        "transactionHash": "0x38d005d766553be69d35d46ba1a6440a5d64768f2e3e307b188360706ebbe8a4",
        "timestamp": 1621876507
    }
}