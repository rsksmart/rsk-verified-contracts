{
  "address": "0xd60842d8725d885f97791c851fab49e606ce495f",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "KairosProject",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.5.2+commit.1df8f40c",
  "source": "pragma solidity 0.5.2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract KairosProject {\r\n    \r\n    string public name;\r\n    address public creator;\r\n    uint256 internal constant decimalpercent = 10000;       //100.00 = precisão da porcentagem (2) + 2 casas para 100%\r\n    IERC20 public token;\r\n    \r\n    address[] private accounts;                           //Accounts que recebem deste projeto\r\n    mapping (address => uint256) private accountIndex;    //posicao no array das Accounts que recebem deste projeto\r\n    mapping (address => uint256) private accountShare;    //perc que a Account recebem deste projeto\r\n    mapping (address => uint256) private accountBalance;  //Saldo disponivel em token que cada account pode retirar\r\n\r\n    constructor (string memory _name, address _tokenAddress) public {\r\n        creator = msg.sender;\r\n        accounts.push(address(0x0));  //posicao 0 zerada\r\n        accountIndex[msg.sender] = accounts.push(msg.sender);\r\n        accountShare[msg.sender] = decimalpercent;        \r\n        name = _name;\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n    \r\n    function defineShare(address[] memory _accounts, uint256[] memory _percs) public {\r\n        require (_accounts.length == _percs.length, \"number of accounts and percs doesn't match\");\r\n        \r\n        uint256 totalPerc = 0;\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            totalPerc += _percs[i];\r\n        }\r\n        require (totalPerc == decimalpercent, \"Total share is not 100\");\r\n        _clearShare();\r\n        \r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            accountIndex[_accounts[i]] = accounts.push(_accounts[i]);\r\n            accountShare[_accounts[i]] = _percs[i];\r\n        }\r\n    }\r\n    \r\n    function _clearShare() internal {\r\n        for (uint256 i = 1; i < accounts.length; i++) {\r\n            accountIndex[accounts[i]] = 0;\r\n        }\r\n        accounts.length = 1;\r\n    }\r\n\r\n    function distribute() public {\r\n        uint256 total = token.balanceOf(address(this)) - accountBalance[address(this)];\r\n        require (total > 0, \"no distribution\");\r\n        accountBalance[address(this)] = accountBalance[address(this)] + total;\r\n        \r\n        uint256 payment = 0;\r\n        for (uint256 i = 1; i < accounts.length; i++) {\r\n            payment = total * accountShare[accounts[i]] / decimalpercent;\r\n            accountBalance[accounts[i]] =  accountBalance[accounts[i]] + payment;\r\n        }\r\n    }\r\n    \r\n    function listAccounts() public view returns (address[] memory) {\r\n        return accounts;\r\n    }    \r\n\r\n    function shareAccount(address account) public view returns (uint256) {\r\n        return accountShare[account];\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return accountBalance[account];\r\n    }    \r\n    \r\n    function balanceTokenProject() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function withdrawal() public {\r\n        require(accountBalance[msg.sender] > 0, \"balance is zero\");\r\n\r\n        uint256 value = accountBalance[msg.sender];\r\n        accountBalance[msg.sender] = 0;\r\n        accountBalance[address(this)] = accountBalance[address(this)] - value;\r\n        require(token.transfer(msg.sender, value), \"token transfer error\");\r\n    }    \r\n\r\n}",
  "imports": [
    {
      "name": "KairosProject-2020-10-18.sol",
      "contents": "pragma solidity 0.5.2;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ncontract KairosProject {\r\n    \r\n    string public name;\r\n    address public creator;\r\n    uint256 internal constant decimalpercent = 10000;       //100.00 = precisão da porcentagem (2) + 2 casas para 100%\r\n    IERC20 public token;\r\n    \r\n    address[] private accounts;                           //Accounts que recebem deste projeto\r\n    mapping (address => uint256) private accountIndex;    //posicao no array das Accounts que recebem deste projeto\r\n    mapping (address => uint256) private accountShare;    //perc que a Account recebem deste projeto\r\n    mapping (address => uint256) private accountBalance;  //Saldo disponivel em token que cada account pode retirar\r\n\r\n    constructor (string memory _name, address _tokenAddress) public {\r\n        creator = msg.sender;\r\n        accounts.push(address(0x0));  //posicao 0 zerada\r\n        accountIndex[msg.sender] = accounts.push(msg.sender);\r\n        accountShare[msg.sender] = decimalpercent;        \r\n        name = _name;\r\n        token = IERC20(_tokenAddress);\r\n    }\r\n    \r\n    function defineShare(address[] memory _accounts, uint256[] memory _percs) public {\r\n        require (_accounts.length == _percs.length, \"number of accounts and percs doesn't match\");\r\n        \r\n        uint256 totalPerc = 0;\r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            totalPerc += _percs[i];\r\n        }\r\n        require (totalPerc == decimalpercent, \"Total share is not 100\");\r\n        _clearShare();\r\n        \r\n        for (uint256 i = 0; i < _accounts.length; i++) {\r\n            accountIndex[_accounts[i]] = accounts.push(_accounts[i]);\r\n            accountShare[_accounts[i]] = _percs[i];\r\n        }\r\n    }\r\n    \r\n    function _clearShare() internal {\r\n        for (uint256 i = 1; i < accounts.length; i++) {\r\n            accountIndex[accounts[i]] = 0;\r\n        }\r\n        accounts.length = 1;\r\n    }\r\n\r\n    function distribute() public {\r\n        uint256 total = token.balanceOf(address(this)) - accountBalance[address(this)];\r\n        require (total > 0, \"no distribution\");\r\n        accountBalance[address(this)] = accountBalance[address(this)] + total;\r\n        \r\n        uint256 payment = 0;\r\n        for (uint256 i = 1; i < accounts.length; i++) {\r\n            payment = total * accountShare[accounts[i]] / decimalpercent;\r\n            accountBalance[accounts[i]] =  accountBalance[accounts[i]] + payment;\r\n        }\r\n    }\r\n    \r\n    function listAccounts() public view returns (address[] memory) {\r\n        return accounts;\r\n    }    \r\n\r\n    function shareAccount(address account) public view returns (uint256) {\r\n        return accountShare[account];\r\n    }\r\n\r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return accountBalance[account];\r\n    }    \r\n    \r\n    function balanceTokenProject() public view returns (uint256) {\r\n        return token.balanceOf(address(this));\r\n    }\r\n    \r\n    function withdrawal() public {\r\n        require(accountBalance[msg.sender] > 0, \"balance is zero\");\r\n\r\n        uint256 value = accountBalance[msg.sender];\r\n        accountBalance[msg.sender] = 0;\r\n        accountBalance[address(this)] = accountBalance[address(this)] - value;\r\n        require(token.transfer(msg.sender, value), \"token transfer error\");\r\n    }    \r\n\r\n}",
      "file": "KairosProject-2020-10-18.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x5ce06133151a37a53d37a08c48cbc45f9baf17b5b569e93a7a6b82f427b4564b",
    "blockNumber": 1267791,
    "transactionHash": "0x6cf9fba94ed8f31fec404a3c72c65e271469464c76fb07e02807bdf4019d5dcc",
    "timestamp": 1603048182
  },
  "constructorArguments": [
    "Kairos Project Test",
    "0x42dde210f3e7d71d3df9ad96e05cbe0045b7cccd"
  ]
}