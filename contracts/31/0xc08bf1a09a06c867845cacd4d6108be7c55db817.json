{
  "address": "0xc08bf1a09a06c867845cacd4d6108be7c55db817",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "A",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    }
  },
  "version": "0.5.17+commit.d19bba13",
  "source": "pragma solidity ^0.5.17;\npragma experimental ABIEncoderV2;\n\ncontract A {\n    \n    mapping (bytes4 => address) public _a;\n    address private _owner;\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    constructor() public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n    }\n    \n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n    \n    function reemPlaza(address B) external onlyOwner {\n        \n        (bool x,) = B.delegatecall(abi.encodeWithSignature('fu(address)', B));\n        require(x, \"falla\");\n    }\n    \n    function _b(bytes4 u, address v) internal {\n        \n        _a[u] = v;\n        \n    }\n    \n}",
  "imports": [
    {
      "name": "Contract_A.sol",
      "contents": "pragma solidity ^0.5.17;\npragma experimental ABIEncoderV2;\n\ncontract A {\n    \n    mapping (bytes4 => address) public _a;\n    address private _owner;\n    \n    function owner() public view returns (address) {\n        return _owner;\n    }\n    \n    constructor() public {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n    }\n    \n    function _msgSender() internal view returns (address payable) {\n        return msg.sender;\n    }\n    \n    modifier onlyOwner() {\n        require(isOwner(), \"unauthorized\");\n        _;\n    }\n\n    function isOwner() public view returns (bool) {\n        return _msgSender() == _owner;\n    }\n    \n    function reemPlaza(address B) external onlyOwner {\n        \n        (bool x,) = B.delegatecall(abi.encodeWithSignature('fu(address)', B));\n        require(x, \"falla\");\n    }\n    \n    function _b(bytes4 u, address v) internal {\n        \n        _a[u] = v;\n        \n    }\n    \n}",
      "file": "Contract_A.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x9cf1d24111198c9913891cdbe905c0692644e413c1226c27a4271aba9d8c00ea",
    "blockNumber": 1309877,
    "transactionHash": "0x9dcba8cdee9394140016630d53de06e8b9611568508b23a44416cc94be5cb79f",
    "timestamp": 1604268101
  }
}