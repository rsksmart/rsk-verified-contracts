{
    "address": "0x90ef5289c30cda74974a34dbf8b161a9480c43c4",
    "net": {
        "id": "31",
        "name": "RSK Testnet"
    },
    "name": "StorageManager",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "evmVersion": "istanbul"
    },
    "version": "0.6.12+commit.27d51765",
    "source": "// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\n\npragma solidity ^0.6.0;\n\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n\n\n        _paused = false;\n\n    }\n\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    uint256[49] private __gap;\n}\n\n// File: contracts/StorageManager.sol\n\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n/// @title StorageManager\n/// @author Rinke Hendriksen <rinke@iovlabs.org>\n/// @author Adam Uhlir <adam@iovlabs.org>\n/// @notice Providers can offer their storage space and list their price and Consumers can take these offers\ncontract StorageManager is OwnableUpgradeSafe, PausableUpgradeSafe {\n    using SafeMath for uint256;\n    using SafeMath for uint128;\n    using SafeMath for uint64;\n    using SafeERC20 for IERC20;\n\n    uint64 private constant MAX_BILLING_PERIOD = 15552000; // 6 * 30 days ~~ 6 months\n\n    /*\n    Offer represents:\n     - utilizedCapacity: how much is capacity is utilized in Offer.\n     - totalCapacity: total amount of mega-bytes (MB) offered.\n     - billingPlansForToken: maps a whitelisted token to billing period to a billing price. When a price is 0, the period is not offered. By convention, the 0-address stands for the native currency\n     - agreementRegistry: the proposed and accepted Agreement\n    */\n    struct Offer {\n        uint64 utilizedCapacity;\n        uint64 totalCapacity;\n        mapping(address => mapping(uint64 => uint128)) billingPlansForToken;\n        mapping(bytes32 => Agreement) agreementRegistry; // link to agreement that are accepted under this offer\n    }\n\n    /*\n    Agreement represents:\n     - billingPrice: price per byte that is collected per each period.\n     - billingPeriod: period how often billing happens in seconds.\n     - size: allocated size for the Agreement (in MB, rounded up)\n     - availableFunds: funds available for the billing of the Agreement.\n     - lastPayoutDate: When was the last time Provider was payed out. Zero either means non-existing or terminated Agreement.\n    */\n    struct Agreement {\n        uint128 billingPrice;\n        uint64 billingPeriod;\n        uint256 availableFunds;\n        uint64 size;\n        uint128 lastPayoutDate;\n    }\n\n    // offerRegistry stores the open or closed Offer for provider.\n    mapping(address => Offer) public offerRegistry;\n\n    // maps the tokenAddresses which can be used with this contract. By convention, address(0) is the native token.\n    mapping(address => bool) public isWhitelistedToken;\n\n    // maps the provider addresses which can be used for dealing with offers\n    mapping(address => bool) public isWhitelistedProvider;\n\n    event TotalCapacitySet(address indexed provider, uint64 capacity);\n    event BillingPlanSet(address indexed provider, address token, uint64 period, uint128 price);\n    event MessageEmitted(address indexed provider, bytes32[] message);\n\n    event NewAgreement(\n        bytes32[] dataReference,\n        address indexed agreementCreator,\n        address indexed provider,\n        uint64 size,\n        uint64 billingPeriod,\n        uint128 billingPrice,\n        address token,\n        uint256 availableFunds\n    );\n    event AgreementFundsDeposited(bytes32 indexed agreementReference, uint256 amount, address indexed token);\n    event AgreementFundsWithdrawn(bytes32 indexed agreementReference, uint256 amount, address indexed token);\n    event AgreementFundsPayout(bytes32 indexed agreementReference, uint256 amount, address indexed token);\n    event AgreementStopped(bytes32 indexed agreementReference);\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __Pausable_init();\n    }\n\n    /**\n    @notice whitelist a token or remove the token from whitelist\n    @param token the token from whom you want to set the whitelisted\n    @param isWhiteListed whether you want to whitelist the token or put it from the whitelist.\n    */\n    function setWhitelistedTokens(address token, bool isWhiteListed) public onlyOwner {\n        isWhitelistedToken[token] = isWhiteListed;\n    }\n\n    /**\n    @notice whitelist a provider or remove the provider from whitelist\n    @param providerAddress the providerAddress from whom you want to set the whitelisted\n    @param isWhiteListed whether you want to whitelist the provider or put it from the whitelist.\n    */\n    function setWhitelistedProvider(address providerAddress, bool isWhiteListed) public onlyOwner {\n        isWhitelistedProvider[providerAddress] = isWhiteListed;\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice set the totalCapacity and billingPlans of a Offer.\n    @dev\n    - Use this function when initiating an Offer or when the users wants to change more than one parameter at once.\n    - make sure that any period * prices does not cause an overflow, as this can never be accepted (REF_MAX_PRICE) and hence is pointless\n    - only whitelisted tokens are allowed to make an offer for\n    - if there are two tokens, and two billingPrice/periods pairs per token, then boundaries[0] == 1.\n      This makes the first two billingPeriod/prices pairs to apply to the first token ([tokens[0]]) and the second pairs to the second token.\n    - make sure that the length of billingPeriods and billingPrices is of equal length. If billingPeriods is longer than prices => array index out of bounds error. If prices longer than period => the prices in higher indeces won't be considered\n    @param capacity the amount of MB offered. If already active before and set to 0, existing contracts can't be prolonged / re-started, no new contracts can be started.\n    @param billingPeriods the offered periods. Length must be equal to the length of billingPrices. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param billingPrices the prices for the offered periods. Each entry at index corresponds to the same index at periods. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param tokens the tokens for which an offer is made. By convention, address(0) is the native currency.\n    @param message the Provider may include a message (e.g. his nodeID).  Message should be structured such that the first two bits specify the message type, followed with the message). 0x01 == nodeID\n    */\n    function setOffer(\n        uint64 capacity,\n        uint64[][] memory billingPeriods,\n        uint128[][] memory billingPrices,\n        address[] memory tokens,\n        bytes32[] memory message\n    ) public whenNotPaused whitelistedProvider(msg.sender) {\n        Offer storage offer = offerRegistry[msg.sender];\n        setTotalCapacity(capacity);\n        _setBillingPlansWithMultipleTokens(offer, billingPeriods, billingPrices, tokens);\n        if (message.length > 0) {\n            _emitMessage(message);\n        }\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice sets total capacity of Offer.\n    @param capacity the new capacity\n    */\n    function setTotalCapacity(uint64 capacity) public whenNotPaused whitelistedProvider(msg.sender) {\n        require(capacity != 0, \"StorageManager: Capacity has to be greater then zero\");\n        Offer storage offer = offerRegistry[msg.sender];\n        offer.totalCapacity = capacity;\n        emit TotalCapacitySet(msg.sender, capacity);\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice stops the Offer. It sets the totalCapacity to 0 which indicates terminated Offer.\n    @dev no new Agreement can be created and no existing Agreement can be prolonged. All existing Agreement are still valid for the amount of periods still deposited.\n    */\n    function terminateOffer() public whitelistedProvider(msg.sender) {\n        Offer storage offer = offerRegistry[msg.sender];\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        offer.totalCapacity = 0;\n        emit TotalCapacitySet(msg.sender, 0);\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice set the billing plans for an Offer.\n    @dev\n    - setting the price to 0 means that a particular period is not offered, which can be used to remove a period from the offer.\n    - make sure that any period * prices does not cause an overflow, as this can never be accepted and hence is pointless.\n    - the length of tokens array must always be one shorter than the length of the boundaries array (otherwise you get an array index out of bounds error)\n    - make sure that the length of billingPeriods and billingPrices is of equal length. If billingPeriods is longer than prices => array index out of bounds error. If prices longer than period => the prices in higher indeces won't be considered\n    @param billingPeriods the offered periods. Length must be equal to billingPrices. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param billingPrices the prices for the offered periods. Each entry at index corresponds to the same index at periods. 0 means that the particular period is not offered. The first index of the multi dem array corresponds with the address in tokens at the same index\n    */\n    function setBillingPlans(\n        uint64[][] memory billingPeriods,\n        uint128[][] memory billingPrices,\n        address[] memory tokens\n    ) public whenNotPaused whitelistedProvider(msg.sender) {\n        Offer storage offer = offerRegistry[msg.sender];\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        _setBillingPlansWithMultipleTokens(offer, billingPeriods, billingPrices, tokens);\n    }\n\n    /**\n    >> FOR PROVIDER\n    @param message the Provider may send a message (e.g. his nodeID). Message should be structured such that the first two bits specify the message type, followed with the message). 0x01 == nodeID\n    */\n    function emitMessage(bytes32[] memory message) public {\n        _emitMessage(message);\n    }\n\n    /**\n    >> FOR CONSUMER\n    @notice new Agreement for given Offer\n    @dev\n     - The to-be-pinned data reference's size in MB (rounded up) must be equal in size to param size.\n     - Provider can reject to pin data reference when it exceeds specified size.\n     - The ownership of Agreement is enforced with agreementReference structure which is calculated as: hash(msg.sender, dataReference)\n     - if the token is not the native currency, then the contract must be first be given allowance to transfer tokens in it's posession.\n     Contains execution of the transferFrom on external token contract before all the stage changes are performed.\n     As a result if a token will perform a callback to the StorageManager,\n     it may lead to a reentrancy attack. Hence additional attention should be paid while reviewing this method of a token before whitelisting.\n    @param dataReference the reference to an Data Source, can be several things.\n    @param provider the provider from which is proposed to take a Offer.\n    @param size the size of the to-be-pinned file in MB (rounded up).\n    @param billingPeriod the chosen period for billing.\n    @param token the token in which you want to make the agreement. By convention: address(0) is the native currency\n    @param amount if token is set, this is the amount of tokens that is transfered\n    @param dataReferencesOfAgreementToPayOut the data references of agreements which must be payed out. Pass this when there is no capacity. Order should equal order of creatorsOfAgreementToPayOut and tokensOfAgreementToPayOut\n    @param creatorsOfAgreementToPayOut the creators of agreements which must be payed out. Pass this when there is no capacity. The order should match the order of dataReferenceOfAgreementToPayOut and tokensOfAgreementToPayOut\n    @param tokenOfAgreementsToPayOut the token address of agreements which must be payed out. Pass this when there is no capacity.\n    */\n    function newAgreement(\n        bytes32[] memory dataReference,\n        address provider,\n        uint64 size,\n        uint64 billingPeriod,\n        address token,\n        uint256 amount,\n        bytes32[][] memory dataReferencesOfAgreementToPayOut,\n        address[] memory creatorsOfAgreementToPayOut,\n        address tokenOfAgreementsToPayOut\n    ) public payable whenNotPaused {\n        // Can not use modifier for this check as getting error that stack to deep\n        require(isWhitelistedProvider[provider], \"StorageManager: provider is not whitelisted\");\n        Offer storage offer = offerRegistry[provider];\n        require(billingPeriod != 0, \"StorageManager: Billing period of 0 not allowed\");\n        require(size > 0, \"StorageManager: Size has to be bigger then 0\");\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        require(isWhitelistedToken[token], \"StorageManager: not possible to interact witht this token\");\n        // Allow to enforce payout funds and close of agreements that are already expired,\n        // which should free needed capacity, if the capacity is becoming depleted.\n        if (dataReferencesOfAgreementToPayOut.length > 0) {\n            _payoutFunds(\n                dataReferencesOfAgreementToPayOut,\n                creatorsOfAgreementToPayOut,\n                tokenOfAgreementsToPayOut,\n                payable(provider)\n            );\n        }\n        // the agreementReference consists of the hash of the dataReference, msg.sender and the tokenAdddress, to allow:\n        // - multiple people to register an agreement for the same file\n        // - one person to register multiple agreements for the same file, but with different tokens\n        // - link the token to the agreement, such that we do the accounting properly\n        bytes32 agreementReference = getAgreementReference(dataReference, msg.sender, token);\n        // If the current agreement is still running (but for example already expired, eq. ran out of the funds in past)\n        // we need to payout all the funds. AgreementStopped can be emitted as part of this call if no\n        if (offer.agreementRegistry[agreementReference].lastPayoutDate != 0) {\n            bytes32[][] memory dataReferenceOfAgreementToPayout = new bytes32[][](1);\n            address[] memory creators = new address[](1);\n            dataReferenceOfAgreementToPayout[0] = dataReference;\n            creators[0] = msg.sender;\n            _payoutFunds(dataReferenceOfAgreementToPayout, creators, token, payable(provider));\n        }\n        uint128 billingPrice = offer.billingPlansForToken[token][billingPeriod];\n        require(billingPrice != 0, \"StorageManager: Billing price doesn't exist for Offer\");\n        // can only define agreement here, because otherwise StakeTooDeep error\n        Agreement storage agreement = offer.agreementRegistry[agreementReference];\n        // Adding to previous availableFunds as the agreement could have been expired\n        // and Consumer is reactivating it, so in order not to loose any previous funds.\n        if (_isNativeToken(token)) {\n            amount = msg.value;\n        }\n\n        agreement.availableFunds = agreement.availableFunds.add(amount);\n        require(\n            agreement.availableFunds >= size.mul(billingPrice),\n            \"StorageManager: Funds deposited has to be for at least one billing period\"\n        );\n        agreement.size = size;\n        agreement.billingPrice = billingPrice;\n        agreement.billingPeriod = billingPeriod;\n\n        // Set to current time as no payout was made yet and this information is\n        // used to track spent funds.\n        agreement.lastPayoutDate = uint128(_time());\n        offer = offerRegistry[provider];\n        offer.utilizedCapacity = uint64(offer.utilizedCapacity.add(size));\n        require(offer.utilizedCapacity <= offer.totalCapacity, \"StorageManager: Insufficient Offer's capacity\");\n\n        if (!_isNativeToken(token)) {\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        }\n        emit NewAgreement(\n            dataReference,\n            msg.sender,\n            provider,\n            size,\n            billingPeriod,\n            billingPrice,\n            token,\n            agreement.availableFunds\n        );\n    }\n\n    /**\n    >> FOR CONSUMER\n    @notice deposits new funds to the Agreement.\n    @dev\n        - depositing funds to Agreement that is linked to terminated Offer is not possible\n        - depositing funds to Agreement that already is expired (eq. ran out of funds at some point) is not possible.\n          Call NewAgreement instead. The data needs to be re-provided though.\n        - if the token is not the native currency, then the contract must be first be given allowance to transfer tokens in it's posession.\n    @param dataReference data reference where should be deposited funds.\n    @param provider the address of the provider of the Offer.\n    */\n    function depositFunds(\n        address token,\n        uint256 amount,\n        bytes32[] memory dataReference,\n        address provider\n    ) public payable whenNotPaused whitelistedProvider(provider) {\n        bytes32 agreementReference = getAgreementReference(dataReference, msg.sender, token);\n        require(isWhitelistedToken[token], \"StorageManager: Token is not whitelisted\");\n        Offer storage offer = offerRegistry[provider];\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        Agreement storage agreement = offer.agreementRegistry[agreementReference];\n        require(agreement.size != 0, \"StorageManager: Agreement for this Offer doesn't exist\");\n        require(agreement.lastPayoutDate != 0, \"StorageManager: Agreement not active\");\n        require(\n            offer.billingPlansForToken[token][agreement.billingPeriod] == agreement.billingPrice,\n            \"StorageManager: Price not available anymore\"\n        );\n        require(\n            agreement.availableFunds.sub(_calculateSpentFunds(agreement)) >= agreement.billingPrice.mul(agreement.size),\n            \"StorageManager: Agreement already ran out of funds\"\n        );\n        bool isNativeToken = _isNativeToken(token);\n        if (isNativeToken) {\n            amount = msg.value;\n        }\n        agreement.availableFunds = agreement.availableFunds.add(amount);\n        if (!isNativeToken) {\n            // contract must be allowed to transfer\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        }\n        emit AgreementFundsDeposited(agreementReference, amount, token);\n    }\n\n    /**\n    >> FOR CONSUMER\n    @notice withdraw funds from Agreement.\n    @dev\n        - if amount is zero then all withdrawable funds are transferred (eq. all available funds minus funds for still non-payed out periods and current period)\n        - if Agreement is terminated Consumer can withdraw all remaining funds\n        - if the token is not the native currency, then the contract must be first be given allowance to transfer tokens in it's posession.\n    @param dataReference the data reference of agreement to be funds withdrawn from\n    @param provider the address of the provider of the Offer.\n    @param tokens the tokens in which to withdraw. By convention, address(0) is the native currency.\n    @param amounts the value you want to withdraw for each token\n    */\n    function withdrawFunds(\n        bytes32[] memory dataReference,\n        address provider,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) public {\n        Offer storage offer = offerRegistry[provider];\n        for (uint256 i; i < tokens.length; i++) {\n            uint256 amount = amounts[i];\n            address token = tokens[i];\n            bytes32 agreementReference = getAgreementReference(dataReference, msg.sender, token);\n            Agreement storage agreement = offer.agreementRegistry[agreementReference];\n            require(agreement.size != 0, \"StorageManager: Agreement for this Offer doesn't exist\");\n            uint256 maxWithdrawableFunds;\n            if (agreement.lastPayoutDate == 0) {\n                // Agreement is inactive, consumer can withdraw all funds\n                maxWithdrawableFunds = agreement.availableFunds;\n            } else {\n                // Consumer can withdraw all funds except for those already used for past storage hosting\n                // AND for current period\n                maxWithdrawableFunds = agreement.availableFunds.sub(_calculateSpentFunds(agreement)).sub(\n                    (agreement.billingPrice * agreement.size)\n                );\n            }\n\n            if (amount == 0) {\n                amount = maxWithdrawableFunds;\n            }\n            require(amount <= maxWithdrawableFunds, \"StorageManager: Amount is too big\");\n            agreement.availableFunds = agreement.availableFunds.sub(amount);\n            require(amount > 0, \"StorageManager: Nothing to withdraw\");\n\n            if (_isNativeToken(token)) {\n                (bool success, ) = msg.sender.call{value: amount}(\"\");\n                require(success, \"Transfer failed.\");\n            } else {\n                IERC20(token).safeTransfer(msg.sender, amount);\n            }\n            emit AgreementFundsWithdrawn(agreementReference, amount, token);\n        }\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice payout already earned funds of one or more Agreement\n    @dev\n    - Provider must call an expired agreement themselves as soon as the agreement is expired, to add back the capacity to their Offer.\n    - Payout can be triggered by other events as well. Like in newAgreement call with either existing agreement or when other\n      Agreements are passed to the agreementsReferencesToBePayedOut array.\n    @param dataReferencesOfAgreementToPayOut the data references of the agreement to pay\n    @param creatorsOfAgreementToPayOut the creators that made the agreement to pay\n    @param tokensOfAgreementsToPayOut the tokens of the agreement to pay out\n    */\n\n    function payoutFunds(\n        bytes32[][] memory dataReferencesOfAgreementToPayOut,\n        address[] memory creatorsOfAgreementToPayOut,\n        address tokensOfAgreementsToPayOut,\n        address payable provider\n    ) public whitelistedProvider(provider) {\n        _payoutFunds(\n            dataReferencesOfAgreementToPayOut,\n            creatorsOfAgreementToPayOut,\n            tokensOfAgreementsToPayOut,\n            provider\n        );\n    }\n\n    /**\n    @notice sets the billing plans for multiple tokens.\n    @dev\n    - the billingPeriods and billingPrices hold the period/price pair for all tokens.\n    - the length of tokens array must always be one shorter than the length of the boundaries array (otherwise you get an array index out of bounds error)\n    - make sure that the length of billingPeriods and billingPrices is of equal length. If billingPeriods is longer than prices => array index out of bounds error. If prices longer than period => the prices in higher indeces won't be considered\n    @param offer the offer for which the billingPlan is set\n    @param billingPeriods the offered periods. Length must be equal to the length of billingPrices. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param billingPrices the prices for the offered periods. Each entry at index corresponds to the same index at periods. 0 means that the particular period is not offered. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param tokens the tokens for which an offer is made. By convention, address(0) is the native currency.\n    */\n    function _setBillingPlansWithMultipleTokens(\n        Offer storage offer,\n        uint64[][] memory billingPeriods,\n        uint128[][] memory billingPrices,\n        address[] memory tokens\n    ) internal {\n        // iterate once for each token\n        for (uint256 i; i < tokens.length; i++) {\n            // for each token, list all period/price pairs\n            for (uint256 j; j < billingPeriods[i].length; j++) {\n                _setBillingPlanForToken(offer, tokens[i], billingPeriods[i][j], billingPrices[i][j]);\n            }\n        }\n    }\n\n    function hasUtilizedCapacity(address storer) public view returns (bool) {\n        return (offerRegistry[storer].utilizedCapacity != 0);\n    }\n\n    // Only one token can be used to pay out\n    function _payoutFunds(\n        bytes32[][] memory dataReferenceOfAgreementToPayOut,\n        address[] memory creatorsOfAgreementToPayOut,\n        address tokenOfAgreementsToPayOut,\n        address payable provider\n    ) internal {\n        Offer storage offer = offerRegistry[provider];\n        uint256 toTransfer;\n\n        for (uint8 i = 0; i < dataReferenceOfAgreementToPayOut.length; i++) {\n            bytes32 agreementReference =\n                getAgreementReference(\n                    dataReferenceOfAgreementToPayOut[i],\n                    creatorsOfAgreementToPayOut[i],\n                    tokenOfAgreementsToPayOut\n                );\n            Agreement storage agreement = offer.agreementRegistry[agreementReference];\n            require(agreement.size != 0, \"StorageManager: Agreement for this Offer doesn't exist\");\n            // Was already payed out and terminated\n            require(agreement.lastPayoutDate != 0, \"StorageManager: Agreement is inactive\");\n\n            uint256 spentFunds = _calculateSpentFunds(agreement);\n            if (spentFunds > 0) {\n                agreement.availableFunds = agreement.availableFunds.sub(spentFunds);\n                toTransfer = toTransfer.add(spentFunds);\n\n                // Agreement ran out of funds ==> Agreement is expiring\n                if (agreement.availableFunds < agreement.billingPrice.mul(agreement.size)) {\n                    // Agreement becomes inactive\n                    agreement.lastPayoutDate = 0;\n\n                    // Add back capacity\n                    offer.utilizedCapacity = uint64(offer.utilizedCapacity.sub(agreement.size));\n                    emit AgreementStopped(agreementReference);\n                } else {\n                    // Provider called this during active agreement which has still funds to run\n                    agreement.lastPayoutDate = uint128(_time());\n                }\n\n                emit AgreementFundsPayout(agreementReference, spentFunds, tokenOfAgreementsToPayOut);\n            }\n        }\n\n        if (toTransfer > 0) {\n            if (_isNativeToken(tokenOfAgreementsToPayOut)) {\n                (bool success, ) = provider.call{value: toTransfer}(\"\");\n                require(success, \"StorageManager: Transfer failed.\");\n            } else {\n                IERC20(tokenOfAgreementsToPayOut).safeTransfer(provider, toTransfer);\n            }\n        }\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        _unpause();\n    }\n\n    /**\n    @notice get the agreementReference.\n    the agreementReference consists of the hash of the dataReference, msg.sender and the tokenAdddress, to allow:\n     - multiple people to register an agreement for the same file\n     - one person to register multiple agreements for the same file, but with different tokens\n     - link the token to the agreement, such that we do the accounting properly\n    @param dataReference the dataReference of the agreement\n    @param creator the creator of the agreement\n    @param token the token, which is used as a means of payment for the agreement.\n    */\n    function getAgreementReference(\n        bytes32[] memory dataReference,\n        address creator,\n        address token\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creator, dataReference, token));\n    }\n\n    function _calculateSpentFunds(Agreement memory agreement) internal view returns (uint256) {\n        // TODO: Can be most probably smaller then uint256\n        uint256 totalPeriodPrice = agreement.size.mul(agreement.billingPrice);\n        uint256 periodsSinceLastPayout = _time().sub(agreement.lastPayoutDate).div(agreement.billingPeriod);\n        uint256 spentFunds = periodsSinceLastPayout.mul(totalPeriodPrice);\n\n        // Round the funds based on the available funds\n        if (spentFunds > agreement.availableFunds) {\n            spentFunds = agreement.availableFunds.div(totalPeriodPrice).mul(totalPeriodPrice);\n        }\n\n        return spentFunds;\n    }\n\n    /*\n    @dev Only non-zero prices periods are considered to be active. To remove a period, set it's price to 0\n    */\n    function _setBillingPlanForToken(\n        Offer storage offer,\n        address token,\n        uint64 period,\n        uint128 price\n    ) internal {\n        require(period <= MAX_BILLING_PERIOD, \"StorageManager: Billing period exceed max. length\");\n        require(isWhitelistedToken[token], \"StorageManager: Token is not whitelisted\");\n        offer.billingPlansForToken[token][period] = price;\n        emit BillingPlanSet(msg.sender, token, period, price);\n    }\n\n    function _emitMessage(bytes32[] memory message) internal {\n        emit MessageEmitted(msg.sender, message);\n    }\n\n    /**\n    @dev Helper function for testing timing overloaded in testing contract\n    */\n    function _time() internal view virtual returns (uint256) {\n        return now;\n    }\n\n    /**\n    @notice if use a native token\n     */\n    function _isNativeToken(address token) internal pure returns (bool) {\n        return token == address(0);\n    }\n\n    modifier whitelistedProvider(address provider) {\n        require(isWhitelistedProvider[provider], \"StorageManager: provider is not whitelisted\");\n        _;\n    }\n}\n",
    "imports": [
        {
            "name": "StorageManager.sol",
            "contents": "// File: @openzeppelin/contracts/math/SafeMath.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n\n\n\npragma solidity >=0.6.0 <0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n\npragma solidity >=0.4.24 <0.7.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n\npragma solidity ^0.6.0;\n\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\ncontract ContextUpgradeSafe is Initializable {\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n\n\n    }\n\n\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n\n    uint256[50] private __gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n\npragma solidity ^0.6.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n\n\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n\n    }\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    uint256[49] private __gap;\n}\n\n// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\n\npragma solidity ^0.6.0;\n\n\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\ncontract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n\n\n        _paused = false;\n\n    }\n\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    uint256[49] private __gap;\n}\n\n// File: contracts/StorageManager.sol\n\n\npragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\n\n\n\n\n\n\n/// @title StorageManager\n/// @author Rinke Hendriksen <rinke@iovlabs.org>\n/// @author Adam Uhlir <adam@iovlabs.org>\n/// @notice Providers can offer their storage space and list their price and Consumers can take these offers\ncontract StorageManager is OwnableUpgradeSafe, PausableUpgradeSafe {\n    using SafeMath for uint256;\n    using SafeMath for uint128;\n    using SafeMath for uint64;\n    using SafeERC20 for IERC20;\n\n    uint64 private constant MAX_BILLING_PERIOD = 15552000; // 6 * 30 days ~~ 6 months\n\n    /*\n    Offer represents:\n     - utilizedCapacity: how much is capacity is utilized in Offer.\n     - totalCapacity: total amount of mega-bytes (MB) offered.\n     - billingPlansForToken: maps a whitelisted token to billing period to a billing price. When a price is 0, the period is not offered. By convention, the 0-address stands for the native currency\n     - agreementRegistry: the proposed and accepted Agreement\n    */\n    struct Offer {\n        uint64 utilizedCapacity;\n        uint64 totalCapacity;\n        mapping(address => mapping(uint64 => uint128)) billingPlansForToken;\n        mapping(bytes32 => Agreement) agreementRegistry; // link to agreement that are accepted under this offer\n    }\n\n    /*\n    Agreement represents:\n     - billingPrice: price per byte that is collected per each period.\n     - billingPeriod: period how often billing happens in seconds.\n     - size: allocated size for the Agreement (in MB, rounded up)\n     - availableFunds: funds available for the billing of the Agreement.\n     - lastPayoutDate: When was the last time Provider was payed out. Zero either means non-existing or terminated Agreement.\n    */\n    struct Agreement {\n        uint128 billingPrice;\n        uint64 billingPeriod;\n        uint256 availableFunds;\n        uint64 size;\n        uint128 lastPayoutDate;\n    }\n\n    // offerRegistry stores the open or closed Offer for provider.\n    mapping(address => Offer) public offerRegistry;\n\n    // maps the tokenAddresses which can be used with this contract. By convention, address(0) is the native token.\n    mapping(address => bool) public isWhitelistedToken;\n\n    // maps the provider addresses which can be used for dealing with offers\n    mapping(address => bool) public isWhitelistedProvider;\n\n    event TotalCapacitySet(address indexed provider, uint64 capacity);\n    event BillingPlanSet(address indexed provider, address token, uint64 period, uint128 price);\n    event MessageEmitted(address indexed provider, bytes32[] message);\n\n    event NewAgreement(\n        bytes32[] dataReference,\n        address indexed agreementCreator,\n        address indexed provider,\n        uint64 size,\n        uint64 billingPeriod,\n        uint128 billingPrice,\n        address token,\n        uint256 availableFunds\n    );\n    event AgreementFundsDeposited(bytes32 indexed agreementReference, uint256 amount, address indexed token);\n    event AgreementFundsWithdrawn(bytes32 indexed agreementReference, uint256 amount, address indexed token);\n    event AgreementFundsPayout(bytes32 indexed agreementReference, uint256 amount, address indexed token);\n    event AgreementStopped(bytes32 indexed agreementReference);\n\n    function initialize() public initializer {\n        __Ownable_init();\n        __Pausable_init();\n    }\n\n    /**\n    @notice whitelist a token or remove the token from whitelist\n    @param token the token from whom you want to set the whitelisted\n    @param isWhiteListed whether you want to whitelist the token or put it from the whitelist.\n    */\n    function setWhitelistedTokens(address token, bool isWhiteListed) public onlyOwner {\n        isWhitelistedToken[token] = isWhiteListed;\n    }\n\n    /**\n    @notice whitelist a provider or remove the provider from whitelist\n    @param providerAddress the providerAddress from whom you want to set the whitelisted\n    @param isWhiteListed whether you want to whitelist the provider or put it from the whitelist.\n    */\n    function setWhitelistedProvider(address providerAddress, bool isWhiteListed) public onlyOwner {\n        isWhitelistedProvider[providerAddress] = isWhiteListed;\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice set the totalCapacity and billingPlans of a Offer.\n    @dev\n    - Use this function when initiating an Offer or when the users wants to change more than one parameter at once.\n    - make sure that any period * prices does not cause an overflow, as this can never be accepted (REF_MAX_PRICE) and hence is pointless\n    - only whitelisted tokens are allowed to make an offer for\n    - if there are two tokens, and two billingPrice/periods pairs per token, then boundaries[0] == 1.\n      This makes the first two billingPeriod/prices pairs to apply to the first token ([tokens[0]]) and the second pairs to the second token.\n    - make sure that the length of billingPeriods and billingPrices is of equal length. If billingPeriods is longer than prices => array index out of bounds error. If prices longer than period => the prices in higher indeces won't be considered\n    @param capacity the amount of MB offered. If already active before and set to 0, existing contracts can't be prolonged / re-started, no new contracts can be started.\n    @param billingPeriods the offered periods. Length must be equal to the length of billingPrices. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param billingPrices the prices for the offered periods. Each entry at index corresponds to the same index at periods. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param tokens the tokens for which an offer is made. By convention, address(0) is the native currency.\n    @param message the Provider may include a message (e.g. his nodeID).  Message should be structured such that the first two bits specify the message type, followed with the message). 0x01 == nodeID\n    */\n    function setOffer(\n        uint64 capacity,\n        uint64[][] memory billingPeriods,\n        uint128[][] memory billingPrices,\n        address[] memory tokens,\n        bytes32[] memory message\n    ) public whenNotPaused whitelistedProvider(msg.sender) {\n        Offer storage offer = offerRegistry[msg.sender];\n        setTotalCapacity(capacity);\n        _setBillingPlansWithMultipleTokens(offer, billingPeriods, billingPrices, tokens);\n        if (message.length > 0) {\n            _emitMessage(message);\n        }\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice sets total capacity of Offer.\n    @param capacity the new capacity\n    */\n    function setTotalCapacity(uint64 capacity) public whenNotPaused whitelistedProvider(msg.sender) {\n        require(capacity != 0, \"StorageManager: Capacity has to be greater then zero\");\n        Offer storage offer = offerRegistry[msg.sender];\n        offer.totalCapacity = capacity;\n        emit TotalCapacitySet(msg.sender, capacity);\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice stops the Offer. It sets the totalCapacity to 0 which indicates terminated Offer.\n    @dev no new Agreement can be created and no existing Agreement can be prolonged. All existing Agreement are still valid for the amount of periods still deposited.\n    */\n    function terminateOffer() public whitelistedProvider(msg.sender) {\n        Offer storage offer = offerRegistry[msg.sender];\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        offer.totalCapacity = 0;\n        emit TotalCapacitySet(msg.sender, 0);\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice set the billing plans for an Offer.\n    @dev\n    - setting the price to 0 means that a particular period is not offered, which can be used to remove a period from the offer.\n    - make sure that any period * prices does not cause an overflow, as this can never be accepted and hence is pointless.\n    - the length of tokens array must always be one shorter than the length of the boundaries array (otherwise you get an array index out of bounds error)\n    - make sure that the length of billingPeriods and billingPrices is of equal length. If billingPeriods is longer than prices => array index out of bounds error. If prices longer than period => the prices in higher indeces won't be considered\n    @param billingPeriods the offered periods. Length must be equal to billingPrices. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param billingPrices the prices for the offered periods. Each entry at index corresponds to the same index at periods. 0 means that the particular period is not offered. The first index of the multi dem array corresponds with the address in tokens at the same index\n    */\n    function setBillingPlans(\n        uint64[][] memory billingPeriods,\n        uint128[][] memory billingPrices,\n        address[] memory tokens\n    ) public whenNotPaused whitelistedProvider(msg.sender) {\n        Offer storage offer = offerRegistry[msg.sender];\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        _setBillingPlansWithMultipleTokens(offer, billingPeriods, billingPrices, tokens);\n    }\n\n    /**\n    >> FOR PROVIDER\n    @param message the Provider may send a message (e.g. his nodeID). Message should be structured such that the first two bits specify the message type, followed with the message). 0x01 == nodeID\n    */\n    function emitMessage(bytes32[] memory message) public {\n        _emitMessage(message);\n    }\n\n    /**\n    >> FOR CONSUMER\n    @notice new Agreement for given Offer\n    @dev\n     - The to-be-pinned data reference's size in MB (rounded up) must be equal in size to param size.\n     - Provider can reject to pin data reference when it exceeds specified size.\n     - The ownership of Agreement is enforced with agreementReference structure which is calculated as: hash(msg.sender, dataReference)\n     - if the token is not the native currency, then the contract must be first be given allowance to transfer tokens in it's posession.\n     Contains execution of the transferFrom on external token contract before all the stage changes are performed.\n     As a result if a token will perform a callback to the StorageManager,\n     it may lead to a reentrancy attack. Hence additional attention should be paid while reviewing this method of a token before whitelisting.\n    @param dataReference the reference to an Data Source, can be several things.\n    @param provider the provider from which is proposed to take a Offer.\n    @param size the size of the to-be-pinned file in MB (rounded up).\n    @param billingPeriod the chosen period for billing.\n    @param token the token in which you want to make the agreement. By convention: address(0) is the native currency\n    @param amount if token is set, this is the amount of tokens that is transfered\n    @param dataReferencesOfAgreementToPayOut the data references of agreements which must be payed out. Pass this when there is no capacity. Order should equal order of creatorsOfAgreementToPayOut and tokensOfAgreementToPayOut\n    @param creatorsOfAgreementToPayOut the creators of agreements which must be payed out. Pass this when there is no capacity. The order should match the order of dataReferenceOfAgreementToPayOut and tokensOfAgreementToPayOut\n    @param tokenOfAgreementsToPayOut the token address of agreements which must be payed out. Pass this when there is no capacity.\n    */\n    function newAgreement(\n        bytes32[] memory dataReference,\n        address provider,\n        uint64 size,\n        uint64 billingPeriod,\n        address token,\n        uint256 amount,\n        bytes32[][] memory dataReferencesOfAgreementToPayOut,\n        address[] memory creatorsOfAgreementToPayOut,\n        address tokenOfAgreementsToPayOut\n    ) public payable whenNotPaused {\n        // Can not use modifier for this check as getting error that stack to deep\n        require(isWhitelistedProvider[provider], \"StorageManager: provider is not whitelisted\");\n        Offer storage offer = offerRegistry[provider];\n        require(billingPeriod != 0, \"StorageManager: Billing period of 0 not allowed\");\n        require(size > 0, \"StorageManager: Size has to be bigger then 0\");\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        require(isWhitelistedToken[token], \"StorageManager: not possible to interact witht this token\");\n        // Allow to enforce payout funds and close of agreements that are already expired,\n        // which should free needed capacity, if the capacity is becoming depleted.\n        if (dataReferencesOfAgreementToPayOut.length > 0) {\n            _payoutFunds(\n                dataReferencesOfAgreementToPayOut,\n                creatorsOfAgreementToPayOut,\n                tokenOfAgreementsToPayOut,\n                payable(provider)\n            );\n        }\n        // the agreementReference consists of the hash of the dataReference, msg.sender and the tokenAdddress, to allow:\n        // - multiple people to register an agreement for the same file\n        // - one person to register multiple agreements for the same file, but with different tokens\n        // - link the token to the agreement, such that we do the accounting properly\n        bytes32 agreementReference = getAgreementReference(dataReference, msg.sender, token);\n        // If the current agreement is still running (but for example already expired, eq. ran out of the funds in past)\n        // we need to payout all the funds. AgreementStopped can be emitted as part of this call if no\n        if (offer.agreementRegistry[agreementReference].lastPayoutDate != 0) {\n            bytes32[][] memory dataReferenceOfAgreementToPayout = new bytes32[][](1);\n            address[] memory creators = new address[](1);\n            dataReferenceOfAgreementToPayout[0] = dataReference;\n            creators[0] = msg.sender;\n            _payoutFunds(dataReferenceOfAgreementToPayout, creators, token, payable(provider));\n        }\n        uint128 billingPrice = offer.billingPlansForToken[token][billingPeriod];\n        require(billingPrice != 0, \"StorageManager: Billing price doesn't exist for Offer\");\n        // can only define agreement here, because otherwise StakeTooDeep error\n        Agreement storage agreement = offer.agreementRegistry[agreementReference];\n        // Adding to previous availableFunds as the agreement could have been expired\n        // and Consumer is reactivating it, so in order not to loose any previous funds.\n        if (_isNativeToken(token)) {\n            amount = msg.value;\n        }\n\n        agreement.availableFunds = agreement.availableFunds.add(amount);\n        require(\n            agreement.availableFunds >= size.mul(billingPrice),\n            \"StorageManager: Funds deposited has to be for at least one billing period\"\n        );\n        agreement.size = size;\n        agreement.billingPrice = billingPrice;\n        agreement.billingPeriod = billingPeriod;\n\n        // Set to current time as no payout was made yet and this information is\n        // used to track spent funds.\n        agreement.lastPayoutDate = uint128(_time());\n        offer = offerRegistry[provider];\n        offer.utilizedCapacity = uint64(offer.utilizedCapacity.add(size));\n        require(offer.utilizedCapacity <= offer.totalCapacity, \"StorageManager: Insufficient Offer's capacity\");\n\n        if (!_isNativeToken(token)) {\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        }\n        emit NewAgreement(\n            dataReference,\n            msg.sender,\n            provider,\n            size,\n            billingPeriod,\n            billingPrice,\n            token,\n            agreement.availableFunds\n        );\n    }\n\n    /**\n    >> FOR CONSUMER\n    @notice deposits new funds to the Agreement.\n    @dev\n        - depositing funds to Agreement that is linked to terminated Offer is not possible\n        - depositing funds to Agreement that already is expired (eq. ran out of funds at some point) is not possible.\n          Call NewAgreement instead. The data needs to be re-provided though.\n        - if the token is not the native currency, then the contract must be first be given allowance to transfer tokens in it's posession.\n    @param dataReference data reference where should be deposited funds.\n    @param provider the address of the provider of the Offer.\n    */\n    function depositFunds(\n        address token,\n        uint256 amount,\n        bytes32[] memory dataReference,\n        address provider\n    ) public payable whenNotPaused whitelistedProvider(provider) {\n        bytes32 agreementReference = getAgreementReference(dataReference, msg.sender, token);\n        require(isWhitelistedToken[token], \"StorageManager: Token is not whitelisted\");\n        Offer storage offer = offerRegistry[provider];\n        require(offer.totalCapacity != 0, \"StorageManager: Offer for this Provider doesn't exist\");\n        Agreement storage agreement = offer.agreementRegistry[agreementReference];\n        require(agreement.size != 0, \"StorageManager: Agreement for this Offer doesn't exist\");\n        require(agreement.lastPayoutDate != 0, \"StorageManager: Agreement not active\");\n        require(\n            offer.billingPlansForToken[token][agreement.billingPeriod] == agreement.billingPrice,\n            \"StorageManager: Price not available anymore\"\n        );\n        require(\n            agreement.availableFunds.sub(_calculateSpentFunds(agreement)) >= agreement.billingPrice.mul(agreement.size),\n            \"StorageManager: Agreement already ran out of funds\"\n        );\n        bool isNativeToken = _isNativeToken(token);\n        if (isNativeToken) {\n            amount = msg.value;\n        }\n        agreement.availableFunds = agreement.availableFunds.add(amount);\n        if (!isNativeToken) {\n            // contract must be allowed to transfer\n            IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        }\n        emit AgreementFundsDeposited(agreementReference, amount, token);\n    }\n\n    /**\n    >> FOR CONSUMER\n    @notice withdraw funds from Agreement.\n    @dev\n        - if amount is zero then all withdrawable funds are transferred (eq. all available funds minus funds for still non-payed out periods and current period)\n        - if Agreement is terminated Consumer can withdraw all remaining funds\n        - if the token is not the native currency, then the contract must be first be given allowance to transfer tokens in it's posession.\n    @param dataReference the data reference of agreement to be funds withdrawn from\n    @param provider the address of the provider of the Offer.\n    @param tokens the tokens in which to withdraw. By convention, address(0) is the native currency.\n    @param amounts the value you want to withdraw for each token\n    */\n    function withdrawFunds(\n        bytes32[] memory dataReference,\n        address provider,\n        address[] memory tokens,\n        uint256[] memory amounts\n    ) public {\n        Offer storage offer = offerRegistry[provider];\n        for (uint256 i; i < tokens.length; i++) {\n            uint256 amount = amounts[i];\n            address token = tokens[i];\n            bytes32 agreementReference = getAgreementReference(dataReference, msg.sender, token);\n            Agreement storage agreement = offer.agreementRegistry[agreementReference];\n            require(agreement.size != 0, \"StorageManager: Agreement for this Offer doesn't exist\");\n            uint256 maxWithdrawableFunds;\n            if (agreement.lastPayoutDate == 0) {\n                // Agreement is inactive, consumer can withdraw all funds\n                maxWithdrawableFunds = agreement.availableFunds;\n            } else {\n                // Consumer can withdraw all funds except for those already used for past storage hosting\n                // AND for current period\n                maxWithdrawableFunds = agreement.availableFunds.sub(_calculateSpentFunds(agreement)).sub(\n                    (agreement.billingPrice * agreement.size)\n                );\n            }\n\n            if (amount == 0) {\n                amount = maxWithdrawableFunds;\n            }\n            require(amount <= maxWithdrawableFunds, \"StorageManager: Amount is too big\");\n            agreement.availableFunds = agreement.availableFunds.sub(amount);\n            require(amount > 0, \"StorageManager: Nothing to withdraw\");\n\n            if (_isNativeToken(token)) {\n                (bool success, ) = msg.sender.call{value: amount}(\"\");\n                require(success, \"Transfer failed.\");\n            } else {\n                IERC20(token).safeTransfer(msg.sender, amount);\n            }\n            emit AgreementFundsWithdrawn(agreementReference, amount, token);\n        }\n    }\n\n    /**\n    >> FOR PROVIDER\n    @notice payout already earned funds of one or more Agreement\n    @dev\n    - Provider must call an expired agreement themselves as soon as the agreement is expired, to add back the capacity to their Offer.\n    - Payout can be triggered by other events as well. Like in newAgreement call with either existing agreement or when other\n      Agreements are passed to the agreementsReferencesToBePayedOut array.\n    @param dataReferencesOfAgreementToPayOut the data references of the agreement to pay\n    @param creatorsOfAgreementToPayOut the creators that made the agreement to pay\n    @param tokensOfAgreementsToPayOut the tokens of the agreement to pay out\n    */\n\n    function payoutFunds(\n        bytes32[][] memory dataReferencesOfAgreementToPayOut,\n        address[] memory creatorsOfAgreementToPayOut,\n        address tokensOfAgreementsToPayOut,\n        address payable provider\n    ) public whitelistedProvider(provider) {\n        _payoutFunds(\n            dataReferencesOfAgreementToPayOut,\n            creatorsOfAgreementToPayOut,\n            tokensOfAgreementsToPayOut,\n            provider\n        );\n    }\n\n    /**\n    @notice sets the billing plans for multiple tokens.\n    @dev\n    - the billingPeriods and billingPrices hold the period/price pair for all tokens.\n    - the length of tokens array must always be one shorter than the length of the boundaries array (otherwise you get an array index out of bounds error)\n    - make sure that the length of billingPeriods and billingPrices is of equal length. If billingPeriods is longer than prices => array index out of bounds error. If prices longer than period => the prices in higher indeces won't be considered\n    @param offer the offer for which the billingPlan is set\n    @param billingPeriods the offered periods. Length must be equal to the length of billingPrices. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param billingPrices the prices for the offered periods. Each entry at index corresponds to the same index at periods. 0 means that the particular period is not offered. The first index of the multi dem array corresponds with the address in tokens at the same index\n    @param tokens the tokens for which an offer is made. By convention, address(0) is the native currency.\n    */\n    function _setBillingPlansWithMultipleTokens(\n        Offer storage offer,\n        uint64[][] memory billingPeriods,\n        uint128[][] memory billingPrices,\n        address[] memory tokens\n    ) internal {\n        // iterate once for each token\n        for (uint256 i; i < tokens.length; i++) {\n            // for each token, list all period/price pairs\n            for (uint256 j; j < billingPeriods[i].length; j++) {\n                _setBillingPlanForToken(offer, tokens[i], billingPeriods[i][j], billingPrices[i][j]);\n            }\n        }\n    }\n\n    function hasUtilizedCapacity(address storer) public view returns (bool) {\n        return (offerRegistry[storer].utilizedCapacity != 0);\n    }\n\n    // Only one token can be used to pay out\n    function _payoutFunds(\n        bytes32[][] memory dataReferenceOfAgreementToPayOut,\n        address[] memory creatorsOfAgreementToPayOut,\n        address tokenOfAgreementsToPayOut,\n        address payable provider\n    ) internal {\n        Offer storage offer = offerRegistry[provider];\n        uint256 toTransfer;\n\n        for (uint8 i = 0; i < dataReferenceOfAgreementToPayOut.length; i++) {\n            bytes32 agreementReference =\n                getAgreementReference(\n                    dataReferenceOfAgreementToPayOut[i],\n                    creatorsOfAgreementToPayOut[i],\n                    tokenOfAgreementsToPayOut\n                );\n            Agreement storage agreement = offer.agreementRegistry[agreementReference];\n            require(agreement.size != 0, \"StorageManager: Agreement for this Offer doesn't exist\");\n            // Was already payed out and terminated\n            require(agreement.lastPayoutDate != 0, \"StorageManager: Agreement is inactive\");\n\n            uint256 spentFunds = _calculateSpentFunds(agreement);\n            if (spentFunds > 0) {\n                agreement.availableFunds = agreement.availableFunds.sub(spentFunds);\n                toTransfer = toTransfer.add(spentFunds);\n\n                // Agreement ran out of funds ==> Agreement is expiring\n                if (agreement.availableFunds < agreement.billingPrice.mul(agreement.size)) {\n                    // Agreement becomes inactive\n                    agreement.lastPayoutDate = 0;\n\n                    // Add back capacity\n                    offer.utilizedCapacity = uint64(offer.utilizedCapacity.sub(agreement.size));\n                    emit AgreementStopped(agreementReference);\n                } else {\n                    // Provider called this during active agreement which has still funds to run\n                    agreement.lastPayoutDate = uint128(_time());\n                }\n\n                emit AgreementFundsPayout(agreementReference, spentFunds, tokenOfAgreementsToPayOut);\n            }\n        }\n\n        if (toTransfer > 0) {\n            if (_isNativeToken(tokenOfAgreementsToPayOut)) {\n                (bool success, ) = provider.call{value: toTransfer}(\"\");\n                require(success, \"StorageManager: Transfer failed.\");\n            } else {\n                IERC20(tokenOfAgreementsToPayOut).safeTransfer(provider, toTransfer);\n            }\n        }\n    }\n\n    /**\n     * @dev Called by a pauser to pause, triggers stopped state.\n     */\n    function pause() public onlyOwner whenNotPaused {\n        _pause();\n    }\n\n    /**\n     * @dev Called by a pauser to unpause, returns to normal state.\n     */\n    function unpause() public onlyOwner whenPaused {\n        _unpause();\n    }\n\n    /**\n    @notice get the agreementReference.\n    the agreementReference consists of the hash of the dataReference, msg.sender and the tokenAdddress, to allow:\n     - multiple people to register an agreement for the same file\n     - one person to register multiple agreements for the same file, but with different tokens\n     - link the token to the agreement, such that we do the accounting properly\n    @param dataReference the dataReference of the agreement\n    @param creator the creator of the agreement\n    @param token the token, which is used as a means of payment for the agreement.\n    */\n    function getAgreementReference(\n        bytes32[] memory dataReference,\n        address creator,\n        address token\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(creator, dataReference, token));\n    }\n\n    function _calculateSpentFunds(Agreement memory agreement) internal view returns (uint256) {\n        // TODO: Can be most probably smaller then uint256\n        uint256 totalPeriodPrice = agreement.size.mul(agreement.billingPrice);\n        uint256 periodsSinceLastPayout = _time().sub(agreement.lastPayoutDate).div(agreement.billingPeriod);\n        uint256 spentFunds = periodsSinceLastPayout.mul(totalPeriodPrice);\n\n        // Round the funds based on the available funds\n        if (spentFunds > agreement.availableFunds) {\n            spentFunds = agreement.availableFunds.div(totalPeriodPrice).mul(totalPeriodPrice);\n        }\n\n        return spentFunds;\n    }\n\n    /*\n    @dev Only non-zero prices periods are considered to be active. To remove a period, set it's price to 0\n    */\n    function _setBillingPlanForToken(\n        Offer storage offer,\n        address token,\n        uint64 period,\n        uint128 price\n    ) internal {\n        require(period <= MAX_BILLING_PERIOD, \"StorageManager: Billing period exceed max. length\");\n        require(isWhitelistedToken[token], \"StorageManager: Token is not whitelisted\");\n        offer.billingPlansForToken[token][period] = price;\n        emit BillingPlanSet(msg.sender, token, period, price);\n    }\n\n    function _emitMessage(bytes32[] memory message) internal {\n        emit MessageEmitted(msg.sender, message);\n    }\n\n    /**\n    @dev Helper function for testing timing overloaded in testing contract\n    */\n    function _time() internal view virtual returns (uint256) {\n        return now;\n    }\n\n    /**\n    @notice if use a native token\n     */\n    function _isNativeToken(address token) internal pure returns (bool) {\n        return token == address(0);\n    }\n\n    modifier whitelistedProvider(address provider) {\n        require(isWhitelistedProvider[provider], \"StorageManager: provider is not whitelisted\");\n        _;\n    }\n}\n",
            "file": "StorageManager.sol"
        }
    ],
    "libraries": {},
    "creationData": {
        "blockHash": "0xd630e4a9cb4600d26f3a9a0ef3ce68c8ff0cac71ce60aa01d8ed18c5d2362b79",
        "blockNumber": 1715291,
        "transactionHash": "0x867436703ff5bcbc9f1046c265ea3df87ee2db8bb69cf7f0c7d08950ea1c8afe",
        "timestamp": 1616778305
    }
}