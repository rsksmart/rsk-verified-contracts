{
  "address": "0x84dcbb9123d047bf43e26c3f5110bde6fc546d70",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "TempWallet",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.6.0+commit.26b70077",
  "source": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TempWallet {\n    address payable private _merchant;\n    address payable private _buyer;\n\n    constructor(address payable merchant, address payable buyer) public {\n        _merchant = merchant;\n        _buyer = buyer;\n    }\n\n    function settle(address token, uint256 amount) external {\n        IERC20 ctx = IERC20(token);\n        ctx.transfer(_merchant, amount);\n        uint256 bal = ctx.balanceOf(address(this));\n        if (bal > 0) {\n            ctx.transfer(_buyer, bal);\n        }\n    }\n\n\tfunction settleETH(uint256 amount) external {\n\t\t_merchant.transfer(amount);\n\t\tuint256 bal = address(this).balance;\n\t\tif (bal > 0) {\n\t\t\t_buyer.transfer(bal);\n\t\t}\n\t}\n\n    function refund(address token) external {\n        IERC20 ctx = IERC20(token);\n        uint256 bal = ctx.balanceOf(address(this));\n        ctx.transfer(_buyer, bal);\n    }\n\n    function refundETH() external {\n\t\t_buyer.transfer(address(this).balance);\n    }\n\n    function partialRefund(address token, uint256 amount) external {\n        IERC20 ctx = IERC20(token);\n        ctx.transfer(_buyer, amount);\n    }\n\n    function partialRefundETH(uint256 amount) external {\n\t\t_buyer.transfer(amount);\n    }\n    \n    receive() external payable {}\n}\n",
  "imports": [
    {
      "name": "TempWallet.sol",
      "contents": "pragma solidity ^0.6.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract TempWallet {\n    address payable private _merchant;\n    address payable private _buyer;\n\n    constructor(address payable merchant, address payable buyer) public {\n        _merchant = merchant;\n        _buyer = buyer;\n    }\n\n    function settle(address token, uint256 amount) external {\n        IERC20 ctx = IERC20(token);\n        ctx.transfer(_merchant, amount);\n        uint256 bal = ctx.balanceOf(address(this));\n        if (bal > 0) {\n            ctx.transfer(_buyer, bal);\n        }\n    }\n\n\tfunction settleETH(uint256 amount) external {\n\t\t_merchant.transfer(amount);\n\t\tuint256 bal = address(this).balance;\n\t\tif (bal > 0) {\n\t\t\t_buyer.transfer(bal);\n\t\t}\n\t}\n\n    function refund(address token) external {\n        IERC20 ctx = IERC20(token);\n        uint256 bal = ctx.balanceOf(address(this));\n        ctx.transfer(_buyer, bal);\n    }\n\n    function refundETH() external {\n\t\t_buyer.transfer(address(this).balance);\n    }\n\n    function partialRefund(address token, uint256 amount) external {\n        IERC20 ctx = IERC20(token);\n        ctx.transfer(_buyer, amount);\n    }\n\n    function partialRefundETH(uint256 amount) external {\n\t\t_buyer.transfer(amount);\n    }\n    \n    receive() external payable {}\n}\n",
      "file": "TempWallet.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x1a4d796a4e086122ccd8ce9e46498c72bd21046c4177d6d567c28dfef2189175",
    "blockNumber": 855640,
    "transactionHash": "0xca9340e38802c9efec7c4a864b1e4ff3c72677654d928c81c0ba4b551a2599ee",
    "timestamp": 1589624199
  },
  "constructorArguments": [
    "0x4cefe2094dd1882152b946de90982ce828e090fc",
    "0xfc7419871c5a7b5ebba17edb4242f75976d8f06e"
  ]
}