{
  "address": "0x8587385ad60038bb181affdf687c4d1b80c4787e",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "NameResolver",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.5.12+commit.7709ece9",
  "source": "pragma solidity ^0.5.0;\n\nimport \"./ResolverBase.sol\";\nimport \"@rsksmart/rns-artifacts/contracts/registry/AbstractRNS.sol\";\n\n/// source: https://github.com/ensdomains/resolvers/blob/master/contracts/profiles/NameResolver.sol\ncontract NameResolver is ResolverBase {\n    bytes4 constant private NAME_INTERFACE_ID = 0x691f3431;\n    AbstractRNS rns;\n\n    event NameChanged(bytes32 indexed node, string name);\n\n    mapping(bytes32=>string) names;\n\n    modifier onlyOwner (bytes32 node) {\n        require(msg.sender == rns.owner(node), \"Only owner\");\n        _;\n    }\n\n    constructor (AbstractRNS _rns) public {\n        rns = _rns;\n    }\n\n    /// @notice Sets the name associated with an RNS node, for reverse records.\n    /// @dev May only be called by the owner of that node in the RNS registry.\n    /// @param node The node to update.\n    /// @param name The name to set.\n    function setName(bytes32 node, string calldata name) external onlyOwner(node) {\n        names[node] = name;\n        emit NameChanged(node, name);\n    }\n\n    /// @notice Returns the name associated with an RNS node, for reverse records.\n    /// @dev Defined in EIP181.\n    /// @param node The node to query.\n    /// @return The associated name.\n    function name(bytes32 node) external view returns (string memory) {\n        return names[node];\n    }\n\n    function supportsInterface(bytes4 interfaceID) public pure returns(bool) {\n        return interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\n    }\n}\n",
  "imports": [
    {
      "name": "NameResolver.sol",
      "contents": "pragma solidity ^0.5.0;\n\nimport \"./ResolverBase.sol\";\nimport \"@rsksmart/rns-artifacts/contracts/registry/AbstractRNS.sol\";\n\n/// source: https://github.com/ensdomains/resolvers/blob/master/contracts/profiles/NameResolver.sol\ncontract NameResolver is ResolverBase {\n    bytes4 constant private NAME_INTERFACE_ID = 0x691f3431;\n    AbstractRNS rns;\n\n    event NameChanged(bytes32 indexed node, string name);\n\n    mapping(bytes32=>string) names;\n\n    modifier onlyOwner (bytes32 node) {\n        require(msg.sender == rns.owner(node), \"Only owner\");\n        _;\n    }\n\n    constructor (AbstractRNS _rns) public {\n        rns = _rns;\n    }\n\n    /// @notice Sets the name associated with an RNS node, for reverse records.\n    /// @dev May only be called by the owner of that node in the RNS registry.\n    /// @param node The node to update.\n    /// @param name The name to set.\n    function setName(bytes32 node, string calldata name) external onlyOwner(node) {\n        names[node] = name;\n        emit NameChanged(node, name);\n    }\n\n    /// @notice Returns the name associated with an RNS node, for reverse records.\n    /// @dev Defined in EIP181.\n    /// @param node The node to query.\n    /// @return The associated name.\n    function name(bytes32 node) external view returns (string memory) {\n        return names[node];\n    }\n\n    function supportsInterface(bytes4 interfaceID) public pure returns(bool) {\n        return interfaceID == NAME_INTERFACE_ID || super.supportsInterface(interfaceID);\n    }\n}\n",
      "file": "NameResolver.sol"
    },
    {
      "name": "ResolverBase.sol",
      "contents": "pragma solidity ^0.5.0;\n\n/// source: https://github.com/ensdomains/resolvers/blob/master/contracts/ResolverBase.sol\ncontract ResolverBase {\n    bytes4 private constant INTERFACE_META_ID = 0x01ffc9a7;\n\n    function supportsInterface(bytes4 interfaceID) public pure returns(bool) {\n        return interfaceID == INTERFACE_META_ID;\n    }\n}\n"
    },
    {
      "name": "AbstractRNS.sol",
      "contents": "pragma solidity ^0.5.2;\n\ncontract AbstractRNS {\n    function owner(bytes32 node) public view returns(address);\n    function resolver(bytes32 node) public view returns(address);\n    function ttl(bytes32 node) public view returns(uint64);\n    function setOwner(bytes32 node, address ownerAddress) public;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address ownerAddress) public;\n    function setResolver(bytes32 node, address resolverAddress) public;\n    function setTTL(bytes32 node, uint64 ttlValue) public;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address ownerAddress);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address ownerAddress);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolverAddress);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttlValue);\n}\n"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0xa2b20c0efa7a7d25ef780ef07c9d21babcf503564fa9395fd101c16af0335d22",
    "blockNumber": 419964,
    "transactionHash": "0x9c78db62e40409361fb10e89192e2df128c681126f34fc64396d113c1fe9ee7c",
    "timestamp": 1575415863
  },
  "constructorArguments": [
    "0x7d284aaac6e925aad802a53c0c69efe3764597b8"
  ]
}