{
    "address": "0x2097fc65685c094eaedafbe794ab87c605fd4813",
    "net": {
        "id": "31",
        "name": "RSK Testnet"
    },
    "name": "OneShotSchedule",
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "evmVersion": "byzantium"
    },
    "version": "0.8.0+commit.c7dfd78e",
    "source": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @rsksmart/erc677/contracts/IERC677.sol\n\npragma solidity ^0.8.0;\n\n\ninterface IERC677 is IERC20 {\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes memory data\n  ) external returns (bool ok);\n\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n\n// File: @rsksmart/erc677/contracts/IERC677TransferReceiver.sol\n\npragma solidity ^0.8.0;\n\n/*\n * Contract interface for receivers of tokens that\n * comply with ERC-677.\n * See https://github.com/ethereum/EIPs/issues/677 for details.\n */\ninterface IERC677TransferReceiver {\n  function tokenFallback(\n    address from,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n\n// File: contracts/OneShotSchedule.sol\n\npragma solidity ^0.8.0;\n\n\n\n\n\ncontract OneShotSchedule is IERC677TransferReceiver, Initializable, ReentrancyGuardUpgradeable {\n  enum MetatransactionState { Scheduled, ExecutionSuccessful, ExecutionFailed, Overdue, Refunded, Cancelled }\n\n  struct Metatransaction {\n    address requestor;\n    uint256 plan;\n    address to;\n    bytes data;\n    uint256 gas;\n    uint256 timestamp;\n    uint256 value;\n    MetatransactionState state;\n  }\n\n  struct Plan {\n    uint256 schegulingPrice;\n    uint256 window;\n    IERC677 token;\n    bool active;\n  }\n\n  address public payee;\n  address serviceProvider;\n  Plan[] plans;\n  mapping(bytes32 => Metatransaction) private transactionsScheduled;\n  mapping(address => mapping(uint256 => uint256)) remainingSchedulings;\n\n  event PlanAdded(uint256 indexed index, uint256 price, address token, uint256 window);\n  event PlanCancelled(uint256 indexed index);\n  event SchedulingsPurchased(address indexed requestor, uint256 plan, uint256 amount);\n  event MetatransactionAdded(\n    bytes32 indexed id,\n    address indexed requestor,\n    uint256 indexed plan,\n    address to,\n    bytes data,\n    uint256 gas,\n    uint256 timestamp,\n    uint256 value\n  );\n  event MetatransactionExecuted(bytes32 indexed id, bool success, bytes result);\n  event MetatransactionCancelled(bytes32 indexed id);\n\n  modifier onlyProvider() {\n    require(address(msg.sender) == serviceProvider, 'Not authorized');\n    _;\n  }\n\n  function initialize(address serviceProvider_, address payee_) public initializer {\n    __ReentrancyGuard_init();\n    require(payee_ != address(0x0), 'Payee address cannot be 0x0');\n    require(serviceProvider_ != address(0x0), 'Service provider address cannot be 0x0');\n    serviceProvider = serviceProvider_;\n    payee = payee_;\n  }\n\n  ///////////\n  // ADMIN //\n  ///////////\n\n  function addPlan(\n    uint256 price,\n    uint256 window,\n    IERC677 token\n  ) external onlyProvider {\n    require(address(token) != address(0x0), 'Token address cannot be 0x0');\n    plans.push(Plan(price, window, token, true));\n    emit PlanAdded(plans.length - 1, price, address(token), window);\n  }\n\n  function getPlan(uint256 index)\n    external\n    view\n    returns (\n      uint256 price,\n      uint256 window,\n      address token,\n      bool active\n    )\n  {\n    price = plans[index].schegulingPrice;\n    window = plans[index].window;\n    token = address(plans[index].token);\n    active = plans[index].active;\n  }\n\n  function cancelPlan(uint256 plan) external onlyProvider {\n    require(plans[plan].active, 'The plan is already inactive');\n    plans[plan].active = false;\n    emit PlanCancelled(plan);\n  }\n\n  function setPayee(address payee_) external onlyProvider {\n    require(payee_ != address(0x0), 'Payee address cannot be 0x0');\n    payee = payee_;\n  }\n\n  //////////////\n  // PURCHASE //\n  //////////////\n\n  function totalPrice(uint256 plan, uint256 amount) private view returns (uint256) {\n    return amount * plans[plan].schegulingPrice;\n  }\n\n  function doPurchase(\n    address requestor,\n    uint256 plan,\n    uint256 schedulingAmount\n  ) private {\n    require(plans[plan].active, 'Inactive plan');\n    remainingSchedulings[requestor][plan] += schedulingAmount;\n    emit SchedulingsPurchased(requestor, plan, schedulingAmount);\n  }\n\n  // purcahse with ERC-20\n  function purchase(uint256 plan, uint256 amount) external {\n    doPurchase(msg.sender, plan, amount);\n\n    require(plans[plan].token.transferFrom(msg.sender, address(this), totalPrice(plan, amount)), \"Payment did't pass\");\n  }\n\n  // purcahse with ERC-677\n  function tokenFallback(\n    address from,\n    uint256 amount,\n    bytes calldata data\n  ) external override returns (bool) {\n    uint256 plan;\n    uint256 schedulingAmount;\n    (plan, schedulingAmount) = abi.decode(data, (uint256, uint256));\n\n    require(address(plans[plan].token) == address(msg.sender), 'Bad token');\n    require(amount == totalPrice(plan, schedulingAmount), \"Transferred amount doesn't match total purchase\");\n\n    doPurchase(from, plan, schedulingAmount);\n    return true;\n  }\n\n  ////////////////\n  // SCHEDULING //\n  ////////////////\n\n  function hash(Metatransaction memory metaTx) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(metaTx.requestor, metaTx.plan, metaTx.to, metaTx.data, metaTx.gas, metaTx.timestamp, metaTx.value, metaTx.state)\n      );\n  }\n\n  function getRemainingSchedulings(address requestor, uint256 plan) external view returns (uint256) {\n    return remainingSchedulings[requestor][plan];\n  }\n\n  function spend(address requestor, uint256 plan) private {\n    require(remainingSchedulings[requestor][plan] > 0, 'No balance available');\n    remainingSchedulings[requestor][plan] -= 1;\n  }\n\n  function schedule(\n    uint256 plan,\n    address to,\n    bytes calldata data,\n    uint256 gas,\n    uint256 executionTime\n  ) external payable {\n    // slither-disable-next-line timestamp\n    require(block.timestamp <= executionTime, 'Cannot schedule it in the past');\n    spend(msg.sender, plan);\n    Metatransaction memory newMetaTx =\n      Metatransaction(msg.sender, plan, to, data, gas, executionTime, msg.value, MetatransactionState.Scheduled);\n    bytes32 metatransactionId = hash(newMetaTx);\n    transactionsScheduled[metatransactionId] = newMetaTx;\n    emit MetatransactionAdded(metatransactionId, msg.sender, plan, to, data, gas, executionTime, msg.value);\n  }\n\n  function getSchedule(bytes32 id)\n    external\n    view\n    returns (\n      address,\n      uint256,\n      address,\n      bytes memory,\n      uint256,\n      uint256,\n      uint256,\n      MetatransactionState\n    )\n  {\n    Metatransaction memory metatransaction = transactionsScheduled[id];\n    MetatransactionState state = transactionState(id);\n    return (\n      metatransaction.requestor,\n      metatransaction.plan,\n      metatransaction.to,\n      metatransaction.data,\n      metatransaction.gas,\n      metatransaction.timestamp,\n      metatransaction.value,\n      state\n    );\n  }\n\n  function cancelScheduling(bytes32 id) external {\n    Metatransaction storage metatransaction = transactionsScheduled[id];\n    require(transactionState(id) == MetatransactionState.Scheduled, 'Transaction not scheduled');\n    require(msg.sender == metatransaction.requestor, 'Not authorized');\n\n    metatransaction.state = MetatransactionState.Cancelled;\n    remainingSchedulings[metatransaction.requestor][metatransaction.plan] += 1;\n    emit MetatransactionCancelled(id);\n    payable(metatransaction.requestor).transfer(metatransaction.value);\n  }\n\n  ///////////////\n  // EXECUTION //\n  ///////////////\n\n  // State transitions for scheduled transaction:\n  //   Scheduled -> ExecutionSuccessful (call was executed in the given time and did not fail)\n  //   Scheduled -> ExecutionFailed (call was executed in the given time but failed)\n  //   Scheduled -> Overdue (Scheduled but scheduledTime outside the execution window, expected earlier)\n  //   Scheduled -> Refunded (refunds when executed and it's overdue)\n\n  // slither-disable-next-line timestamp\n  function transactionState(bytes32 id) public view returns (MetatransactionState) {\n    Metatransaction memory metatransaction = transactionsScheduled[id];\n    if (\n      metatransaction.state == MetatransactionState.Scheduled &&\n      ((metatransaction.timestamp + plans[metatransaction.plan].window) < block.timestamp)\n    ) {\n      return MetatransactionState.Overdue;\n    } else {\n      return metatransaction.state;\n    }\n  }\n\n  function refund(bytes32 id) private {\n    Metatransaction storage metatransaction = transactionsScheduled[id];\n    remainingSchedulings[metatransaction.requestor][metatransaction.plan] += 1;\n    metatransaction.state = MetatransactionState.Refunded;\n    payable(metatransaction.requestor).transfer(metatransaction.value);\n  }\n\n  // The nonReentrant prevents this contract to be call again when the low level call is executed\n  // slither-disable-next-line timestamp\n  function execute(bytes32 id) external nonReentrant {\n    Metatransaction storage metatransaction = transactionsScheduled[id];\n\n    require(metatransaction.state == MetatransactionState.Scheduled, 'Already executed');\n    // slither-disable-next-line timestamp\n    require((metatransaction.timestamp - plans[metatransaction.plan].window) < block.timestamp, 'Too soon');\n\n    if (transactionState(id) == MetatransactionState.Overdue) {\n      refund(id);\n      return;\n    }\n    // The contract makes an external call to execute the scheduled transaction on the specified contract.\n    // It needs to get the execution result before emitting the event and changing the matatransaction state.\n    // slither-disable-next-line low-level-calls\n    (bool success, bytes memory result) =\n      payable(metatransaction.to).call{ gas: metatransaction.gas, value: metatransaction.value }(metatransaction.data);\n\n    // slither-disable-next-line reentrancy-events\n    emit MetatransactionExecuted(id, success, result);\n\n    if (success) {\n      // slither-disable-next-line reentrancy-eth\n      metatransaction.state = MetatransactionState.ExecutionSuccessful;\n    } else {\n      // slither-disable-next-line reentrancy-eth\n      metatransaction.state = MetatransactionState.ExecutionFailed;\n    }\n\n    require(plans[metatransaction.plan].token.transfer(payee, plans[metatransaction.plan].schegulingPrice), \"Couldn't transfer to payee\");\n  }\n}\n",
    "imports": [
        {
            "name": "OneShotSchedule.sol",
            "contents": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @rsksmart/erc677/contracts/IERC677.sol\n\npragma solidity ^0.8.0;\n\n\ninterface IERC677 is IERC20 {\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes memory data\n  ) external returns (bool ok);\n\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n\n// File: @rsksmart/erc677/contracts/IERC677TransferReceiver.sol\n\npragma solidity ^0.8.0;\n\n/*\n * Contract interface for receivers of tokens that\n * comply with ERC-677.\n * See https://github.com/ethereum/EIPs/issues/677 for details.\n */\ninterface IERC677TransferReceiver {\n  function tokenFallback(\n    address from,\n    uint256 amount,\n    bytes calldata data\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\n\n\n// solhint-disable-next-line compiler-version\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n\n// File: contracts/OneShotSchedule.sol\n\npragma solidity ^0.8.0;\n\n\n\n\n\ncontract OneShotSchedule is IERC677TransferReceiver, Initializable, ReentrancyGuardUpgradeable {\n  enum MetatransactionState { Scheduled, ExecutionSuccessful, ExecutionFailed, Overdue, Refunded, Cancelled }\n\n  struct Metatransaction {\n    address requestor;\n    uint256 plan;\n    address to;\n    bytes data;\n    uint256 gas;\n    uint256 timestamp;\n    uint256 value;\n    MetatransactionState state;\n  }\n\n  struct Plan {\n    uint256 schegulingPrice;\n    uint256 window;\n    IERC677 token;\n    bool active;\n  }\n\n  address public payee;\n  address serviceProvider;\n  Plan[] plans;\n  mapping(bytes32 => Metatransaction) private transactionsScheduled;\n  mapping(address => mapping(uint256 => uint256)) remainingSchedulings;\n\n  event PlanAdded(uint256 indexed index, uint256 price, address token, uint256 window);\n  event PlanCancelled(uint256 indexed index);\n  event SchedulingsPurchased(address indexed requestor, uint256 plan, uint256 amount);\n  event MetatransactionAdded(\n    bytes32 indexed id,\n    address indexed requestor,\n    uint256 indexed plan,\n    address to,\n    bytes data,\n    uint256 gas,\n    uint256 timestamp,\n    uint256 value\n  );\n  event MetatransactionExecuted(bytes32 indexed id, bool success, bytes result);\n  event MetatransactionCancelled(bytes32 indexed id);\n\n  modifier onlyProvider() {\n    require(address(msg.sender) == serviceProvider, 'Not authorized');\n    _;\n  }\n\n  function initialize(address serviceProvider_, address payee_) public initializer {\n    __ReentrancyGuard_init();\n    require(payee_ != address(0x0), 'Payee address cannot be 0x0');\n    require(serviceProvider_ != address(0x0), 'Service provider address cannot be 0x0');\n    serviceProvider = serviceProvider_;\n    payee = payee_;\n  }\n\n  ///////////\n  // ADMIN //\n  ///////////\n\n  function addPlan(\n    uint256 price,\n    uint256 window,\n    IERC677 token\n  ) external onlyProvider {\n    require(address(token) != address(0x0), 'Token address cannot be 0x0');\n    plans.push(Plan(price, window, token, true));\n    emit PlanAdded(plans.length - 1, price, address(token), window);\n  }\n\n  function getPlan(uint256 index)\n    external\n    view\n    returns (\n      uint256 price,\n      uint256 window,\n      address token,\n      bool active\n    )\n  {\n    price = plans[index].schegulingPrice;\n    window = plans[index].window;\n    token = address(plans[index].token);\n    active = plans[index].active;\n  }\n\n  function cancelPlan(uint256 plan) external onlyProvider {\n    require(plans[plan].active, 'The plan is already inactive');\n    plans[plan].active = false;\n    emit PlanCancelled(plan);\n  }\n\n  function setPayee(address payee_) external onlyProvider {\n    require(payee_ != address(0x0), 'Payee address cannot be 0x0');\n    payee = payee_;\n  }\n\n  //////////////\n  // PURCHASE //\n  //////////////\n\n  function totalPrice(uint256 plan, uint256 amount) private view returns (uint256) {\n    return amount * plans[plan].schegulingPrice;\n  }\n\n  function doPurchase(\n    address requestor,\n    uint256 plan,\n    uint256 schedulingAmount\n  ) private {\n    require(plans[plan].active, 'Inactive plan');\n    remainingSchedulings[requestor][plan] += schedulingAmount;\n    emit SchedulingsPurchased(requestor, plan, schedulingAmount);\n  }\n\n  // purcahse with ERC-20\n  function purchase(uint256 plan, uint256 amount) external {\n    doPurchase(msg.sender, plan, amount);\n\n    require(plans[plan].token.transferFrom(msg.sender, address(this), totalPrice(plan, amount)), \"Payment did't pass\");\n  }\n\n  // purcahse with ERC-677\n  function tokenFallback(\n    address from,\n    uint256 amount,\n    bytes calldata data\n  ) external override returns (bool) {\n    uint256 plan;\n    uint256 schedulingAmount;\n    (plan, schedulingAmount) = abi.decode(data, (uint256, uint256));\n\n    require(address(plans[plan].token) == address(msg.sender), 'Bad token');\n    require(amount == totalPrice(plan, schedulingAmount), \"Transferred amount doesn't match total purchase\");\n\n    doPurchase(from, plan, schedulingAmount);\n    return true;\n  }\n\n  ////////////////\n  // SCHEDULING //\n  ////////////////\n\n  function hash(Metatransaction memory metaTx) internal pure returns (bytes32) {\n    return\n      keccak256(\n        abi.encode(metaTx.requestor, metaTx.plan, metaTx.to, metaTx.data, metaTx.gas, metaTx.timestamp, metaTx.value, metaTx.state)\n      );\n  }\n\n  function getRemainingSchedulings(address requestor, uint256 plan) external view returns (uint256) {\n    return remainingSchedulings[requestor][plan];\n  }\n\n  function spend(address requestor, uint256 plan) private {\n    require(remainingSchedulings[requestor][plan] > 0, 'No balance available');\n    remainingSchedulings[requestor][plan] -= 1;\n  }\n\n  function schedule(\n    uint256 plan,\n    address to,\n    bytes calldata data,\n    uint256 gas,\n    uint256 executionTime\n  ) external payable {\n    // slither-disable-next-line timestamp\n    require(block.timestamp <= executionTime, 'Cannot schedule it in the past');\n    spend(msg.sender, plan);\n    Metatransaction memory newMetaTx =\n      Metatransaction(msg.sender, plan, to, data, gas, executionTime, msg.value, MetatransactionState.Scheduled);\n    bytes32 metatransactionId = hash(newMetaTx);\n    transactionsScheduled[metatransactionId] = newMetaTx;\n    emit MetatransactionAdded(metatransactionId, msg.sender, plan, to, data, gas, executionTime, msg.value);\n  }\n\n  function getSchedule(bytes32 id)\n    external\n    view\n    returns (\n      address,\n      uint256,\n      address,\n      bytes memory,\n      uint256,\n      uint256,\n      uint256,\n      MetatransactionState\n    )\n  {\n    Metatransaction memory metatransaction = transactionsScheduled[id];\n    MetatransactionState state = transactionState(id);\n    return (\n      metatransaction.requestor,\n      metatransaction.plan,\n      metatransaction.to,\n      metatransaction.data,\n      metatransaction.gas,\n      metatransaction.timestamp,\n      metatransaction.value,\n      state\n    );\n  }\n\n  function cancelScheduling(bytes32 id) external {\n    Metatransaction storage metatransaction = transactionsScheduled[id];\n    require(transactionState(id) == MetatransactionState.Scheduled, 'Transaction not scheduled');\n    require(msg.sender == metatransaction.requestor, 'Not authorized');\n\n    metatransaction.state = MetatransactionState.Cancelled;\n    remainingSchedulings[metatransaction.requestor][metatransaction.plan] += 1;\n    emit MetatransactionCancelled(id);\n    payable(metatransaction.requestor).transfer(metatransaction.value);\n  }\n\n  ///////////////\n  // EXECUTION //\n  ///////////////\n\n  // State transitions for scheduled transaction:\n  //   Scheduled -> ExecutionSuccessful (call was executed in the given time and did not fail)\n  //   Scheduled -> ExecutionFailed (call was executed in the given time but failed)\n  //   Scheduled -> Overdue (Scheduled but scheduledTime outside the execution window, expected earlier)\n  //   Scheduled -> Refunded (refunds when executed and it's overdue)\n\n  // slither-disable-next-line timestamp\n  function transactionState(bytes32 id) public view returns (MetatransactionState) {\n    Metatransaction memory metatransaction = transactionsScheduled[id];\n    if (\n      metatransaction.state == MetatransactionState.Scheduled &&\n      ((metatransaction.timestamp + plans[metatransaction.plan].window) < block.timestamp)\n    ) {\n      return MetatransactionState.Overdue;\n    } else {\n      return metatransaction.state;\n    }\n  }\n\n  function refund(bytes32 id) private {\n    Metatransaction storage metatransaction = transactionsScheduled[id];\n    remainingSchedulings[metatransaction.requestor][metatransaction.plan] += 1;\n    metatransaction.state = MetatransactionState.Refunded;\n    payable(metatransaction.requestor).transfer(metatransaction.value);\n  }\n\n  // The nonReentrant prevents this contract to be call again when the low level call is executed\n  // slither-disable-next-line timestamp\n  function execute(bytes32 id) external nonReentrant {\n    Metatransaction storage metatransaction = transactionsScheduled[id];\n\n    require(metatransaction.state == MetatransactionState.Scheduled, 'Already executed');\n    // slither-disable-next-line timestamp\n    require((metatransaction.timestamp - plans[metatransaction.plan].window) < block.timestamp, 'Too soon');\n\n    if (transactionState(id) == MetatransactionState.Overdue) {\n      refund(id);\n      return;\n    }\n    // The contract makes an external call to execute the scheduled transaction on the specified contract.\n    // It needs to get the execution result before emitting the event and changing the matatransaction state.\n    // slither-disable-next-line low-level-calls\n    (bool success, bytes memory result) =\n      payable(metatransaction.to).call{ gas: metatransaction.gas, value: metatransaction.value }(metatransaction.data);\n\n    // slither-disable-next-line reentrancy-events\n    emit MetatransactionExecuted(id, success, result);\n\n    if (success) {\n      // slither-disable-next-line reentrancy-eth\n      metatransaction.state = MetatransactionState.ExecutionSuccessful;\n    } else {\n      // slither-disable-next-line reentrancy-eth\n      metatransaction.state = MetatransactionState.ExecutionFailed;\n    }\n\n    require(plans[metatransaction.plan].token.transfer(payee, plans[metatransaction.plan].schegulingPrice), \"Couldn't transfer to payee\");\n  }\n}\n",
            "file": "OneShotSchedule.sol"
        }
    ],
    "libraries": {},
    "creationData": {
        "blockHash": "0xd5b30ac3108fe52e710743a1f86e814f9cecab3d1d30224de1de8a7c8c14f3e1",
        "blockNumber": 1835862,
        "transactionHash": "0x8de4c8b1932e77f633a410a2ffe314f838d87dc878e18b75d193a3b8c167edb7",
        "timestamp": 1620765995
    }
}