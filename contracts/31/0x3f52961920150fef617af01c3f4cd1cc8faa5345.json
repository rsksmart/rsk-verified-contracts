{
  "address": "0x3f52961920150fef617af01c3f4cd1cc8faa5345",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "PriceProviderRegister",
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    }
  },
  "version": "0.6.12+commit.27d51765",
  "source": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.6.12;\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n    /**\n      @notice Override this function with a recipe of the changes to be done when this ChangeContract\n      is executed\n     */\n    function execute() external;\n}\n\n\n/**\n  @title Governor\n  @notice Governor interface. This functions should be overwritten to\n  enable the comunnication with the rest of the system\n  */\ninterface IGovernor {\n    /**\n      @notice Function to be called to make the changes in changeContract\n      @dev This function should be protected somehow to only execute changes that\n      benefit the system. This decision process is independent of this architechture\n      therefore is independent of this interface too\n      @param changeContract Address of the contract that will execute the changes\n     */\n    function executeChange(ChangeContract changeContract) external;\n\n    /**\n      @notice Function to be called to make the changes in changeContract\n      @param _changer Address of the contract that will execute the changes\n     */\n    function isAuthorizedChanger(address _changer) external view returns (bool);\n}\n\n\n\n/**\n  @title Governed\n  @notice Base contract to be inherited by governed contracts\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behaviour\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\n  governance aspect of the child contract\n  */\ncontract Governed {\n    /**\n      @notice The address of the contract which governs this one\n     */\n    IGovernor public governor;\n\n    string private constant NOT_AUTHORIZED_CHANGER = \"not_authorized_changer\";\n\n    /**\n      @notice Modifier that protects the function\n      @dev You should use this modifier in any function that should be called through\n      the governance system\n     */\n    modifier onlyAuthorizedChanger() {\n        require(governor.isAuthorizedChanger(msg.sender), NOT_AUTHORIZED_CHANGER);\n        _;\n    }\n\n    /**\n      @notice Initialize the contract with the basic settings\n      @dev This initialize replaces the constructor but it is not called automatically.\n      It is necessary because of the upgradeability of the contracts\n      @param _governor Governor address\n     */\n    function _initialize(IGovernor _governor) internal {\n        governor = _governor;\n    }\n\n    /**\n      @notice Change the contract's governor. Should be called through the old governance system\n      @param newIGovernor New governor address\n     */\n    function changeIGovernor(IGovernor newIGovernor) external onlyAuthorizedChanger {\n        governor = newIGovernor;\n    }\n\n    /**\n      @notice This method is used by a change contract to access the storage freely even without a setter.\n      @param data the serialized function arguments\n     */\n    function delegateCallToChanger(bytes calldata data)\n        external\n        onlyAuthorizedChanger\n        returns (bytes memory)\n    {\n        address changerContrat = msg.sender;\n        (bool success, bytes memory result) = changerContrat.delegatecall(\n            abi.encodeWithSignature(\"impersonate(bytes)\", data)\n        );\n        require(success, \"Error in delegate call\");\n        return result;\n    }\n\n    // Leave a gap betweeen inherited contracts variables in order to be\n    // able to add more variables in them later\n    uint256[50] private upgradeGap;\n}\n\n\n/// @title PPrice\ninterface IPriceProviderRegisterEntry {\n    enum IPriceProviderType {None, Published, Calculated}\n\n    /// @notice return the type of provider\n    function getPriceProviderType() external pure returns (IPriceProviderType);\n}\n\n\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n/// @title This contract registers which CoinPairPrice contract will serve\n///        prices for a particular coin-pair. Clients can query coin-pair\n///        data and associated contract addresses.\nlibrary CoinPairRegisterLib {\n    struct CoinPairRegisterData {\n        mapping(bytes32 => address) coinPairMap;\n        bytes32[] coinPairList;\n    }\n\n    /// @notice Register a new coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function _registerCoinPair(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        address addr\n    ) internal {\n        require(addr != address(0), \"Address cannot be zero\");\n        require(self.coinPairMap[coinPair] == address(0x0), \"Pair is already registered\");\n        self.coinPairMap[coinPair] = addr;\n        self.coinPairList.push(coinPair);\n    }\n\n    /// @notice Unregister a coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array.\n    function _unRegisterCoinPair(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        uint256 hint\n    ) internal {\n        require(self.coinPairMap[coinPair] != address(0x0), \"Pair is already unregistered\");\n        uint256 idx = _getCoinPairIndex(self, coinPair, hint);\n        require(idx < self.coinPairList.length, \"Coin pair not found\");\n        delete self.coinPairMap[coinPair];\n        self.coinPairList[idx] = self.coinPairList[self.coinPairList.length - 1];\n        self.coinPairList.pop();\n    }\n\n    /// @notice Set the address for a coinpair (the old one is lost!!!!)\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function _setCoinPair(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        address addr\n    ) internal {\n        require(addr != address(0), \"Address cannot be zero\");\n        require(self.coinPairMap[coinPair] != address(0x0), \"This coin pair is not registered\");\n        self.coinPairMap[coinPair] = addr;\n    }\n\n    /// @notice Return the contract address for a specified registered coin pair.\n    /// @param coinpair Coin-pair string to lookup (e.g: BTCUSD)\n    /// @return address Address of contract or zero if does not exist or was deleted.\n    function _getContractAddress(CoinPairRegisterData storage self, bytes32 coinpair)\n        internal\n        view\n        returns (address)\n    {\n        return self.coinPairMap[coinpair];\n    }\n\n    /// @notice Returns the count of registered coin pairs.\n    /// Keep in mind that Deleted coin-pairs will contain zeroed addresses.\n    function _getCoinPairCount(CoinPairRegisterData storage self) internal view returns (uint256) {\n        return self.coinPairList.length;\n    }\n\n    /// @notice Returns the coin pair at index.\n    /// @param i index to query.\n    function _getCoinPairAtIndex(CoinPairRegisterData storage self, uint256 i)\n        internal\n        view\n        returns (bytes32)\n    {\n        require(i < self.coinPairList.length, \"Illegal index\");\n        return self.coinPairList[i];\n    }\n\n    /// @notice Searches a coinpair in coinPairList\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array, zero is to search all the array.\n    function _getCoinPairIndex(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        uint256 hint\n    ) internal view returns (uint256) {\n        require(hint < self.coinPairList.length, \"Illegal index\");\n        for (uint256 i = hint; i < self.coinPairList.length; i++) {\n            if (self.coinPairList[i] == coinPair) {\n                return i;\n            }\n        }\n        return self.coinPairList.length;\n    }\n}\n\n\n/// @title A registry for the coin pair prices, this is more general than OracleManager that stores\n/// only the coin pairs that are published by oracles.\ncontract PriceProviderRegisterStorage is Initializable, Governed {\n    using SafeMath for uint256;\n    using CoinPairRegisterLib for CoinPairRegisterLib.CoinPairRegisterData;\n\n    // Coin Pair register, has the same entries as OracleManage + calculated prices.\n    CoinPairRegisterLib.CoinPairRegisterData internal coinPairRegisterData;\n\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    // solhint-disable-next-line no-empty-blocks\n    constructor() internal {}\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[50] private ______gap;\n}\n\n\n/// @title A registry for the coin pair prices, this is more general than OracleManager that stores\n/// only the coin pairs that are published by oracles.\ncontract PriceProviderRegister is PriceProviderRegisterStorage {\n    using SafeMath for uint256;\n\n    /**\n      @notice Initialize the contract with the basic settings\n      @dev This initialize replaces the constructor but it is not called automatically.\n      It is necessary because of the upgradeability of the contracts\n      @param _governor Governor address\n     */\n    function initialize(IGovernor _governor) external initializer {\n        Governed._initialize(_governor);\n    }\n\n    /// @notice Register a new coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function registerCoinPair(bytes32 coinPair, IPriceProviderRegisterEntry addr)\n        external\n        onlyAuthorizedChanger()\n    {\n        coinPairRegisterData._registerCoinPair(coinPair, address(addr));\n    }\n\n    /// @notice Set the address for a coinpair (the old one is lost!!!!)\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function setCoinPair(bytes32 coinPair, IPriceProviderRegisterEntry addr)\n        external\n        onlyAuthorizedChanger()\n    {\n        coinPairRegisterData._setCoinPair(coinPair, address(addr));\n    }\n\n    /// @notice Unregister a coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array.\n    function unRegisterCoinPair(bytes32 coinPair, uint256 hint) external onlyAuthorizedChanger() {\n        coinPairRegisterData._unRegisterCoinPair(coinPair, hint);\n    }\n\n    /// @notice Return the contract address for a specified registered coin pair.\n    /// @param coinpair Coin-pair string to lookup (e.g: BTCUSD)\n    /// @return address Address of contract or zero if does not exist or was deleted.\n    function getContractAddress(bytes32 coinpair) external view returns (address) {\n        return coinPairRegisterData._getContractAddress(coinpair);\n    }\n\n    /// @notice Returns the count of registered coin pairs.\n    /// Keep in mind that Deleted coin-pairs will contain zeroed addresses.\n    function getCoinPairCount() external view returns (uint256) {\n        return coinPairRegisterData._getCoinPairCount();\n    }\n\n    /// @notice Returns the coin pair at index.\n    /// @param i index to query.\n    function getCoinPairAtIndex(uint256 i) external view returns (bytes32) {\n        return coinPairRegisterData._getCoinPairAtIndex(i);\n    }\n\n    /// @notice Searches a coinpair in coinPairList\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array, zero is to search all the array.\n    function getCoinPairIndex(bytes32 coinPair, uint256 hint) external view returns (uint256) {\n        return coinPairRegisterData._getCoinPairIndex(coinPair, hint);\n    }\n}\n\n",
  "imports": [
    {
      "name": "PriceProviderRegisterFlat.sol",
      "contents": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.6.12;\n\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n    /**\n      @notice Override this function with a recipe of the changes to be done when this ChangeContract\n      is executed\n     */\n    function execute() external;\n}\n\n\n/**\n  @title Governor\n  @notice Governor interface. This functions should be overwritten to\n  enable the comunnication with the rest of the system\n  */\ninterface IGovernor {\n    /**\n      @notice Function to be called to make the changes in changeContract\n      @dev This function should be protected somehow to only execute changes that\n      benefit the system. This decision process is independent of this architechture\n      therefore is independent of this interface too\n      @param changeContract Address of the contract that will execute the changes\n     */\n    function executeChange(ChangeContract changeContract) external;\n\n    /**\n      @notice Function to be called to make the changes in changeContract\n      @param _changer Address of the contract that will execute the changes\n     */\n    function isAuthorizedChanger(address _changer) external view returns (bool);\n}\n\n\n\n/**\n  @title Governed\n  @notice Base contract to be inherited by governed contracts\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behaviour\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\n  governance aspect of the child contract\n  */\ncontract Governed {\n    /**\n      @notice The address of the contract which governs this one\n     */\n    IGovernor public governor;\n\n    string private constant NOT_AUTHORIZED_CHANGER = \"not_authorized_changer\";\n\n    /**\n      @notice Modifier that protects the function\n      @dev You should use this modifier in any function that should be called through\n      the governance system\n     */\n    modifier onlyAuthorizedChanger() {\n        require(governor.isAuthorizedChanger(msg.sender), NOT_AUTHORIZED_CHANGER);\n        _;\n    }\n\n    /**\n      @notice Initialize the contract with the basic settings\n      @dev This initialize replaces the constructor but it is not called automatically.\n      It is necessary because of the upgradeability of the contracts\n      @param _governor Governor address\n     */\n    function _initialize(IGovernor _governor) internal {\n        governor = _governor;\n    }\n\n    /**\n      @notice Change the contract's governor. Should be called through the old governance system\n      @param newIGovernor New governor address\n     */\n    function changeIGovernor(IGovernor newIGovernor) external onlyAuthorizedChanger {\n        governor = newIGovernor;\n    }\n\n    /**\n      @notice This method is used by a change contract to access the storage freely even without a setter.\n      @param data the serialized function arguments\n     */\n    function delegateCallToChanger(bytes calldata data)\n        external\n        onlyAuthorizedChanger\n        returns (bytes memory)\n    {\n        address changerContrat = msg.sender;\n        (bool success, bytes memory result) = changerContrat.delegatecall(\n            abi.encodeWithSignature(\"impersonate(bytes)\", data)\n        );\n        require(success, \"Error in delegate call\");\n        return result;\n    }\n\n    // Leave a gap betweeen inherited contracts variables in order to be\n    // able to add more variables in them later\n    uint256[50] private upgradeGap;\n}\n\n\n/// @title PPrice\ninterface IPriceProviderRegisterEntry {\n    enum IPriceProviderType {None, Published, Calculated}\n\n    /// @notice return the type of provider\n    function getPriceProviderType() external pure returns (IPriceProviderType);\n}\n\n\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    address self = address(this);\n    uint256 cs;\n    assembly { cs := extcodesize(self) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n/// @title This contract registers which CoinPairPrice contract will serve\n///        prices for a particular coin-pair. Clients can query coin-pair\n///        data and associated contract addresses.\nlibrary CoinPairRegisterLib {\n    struct CoinPairRegisterData {\n        mapping(bytes32 => address) coinPairMap;\n        bytes32[] coinPairList;\n    }\n\n    /// @notice Register a new coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function _registerCoinPair(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        address addr\n    ) internal {\n        require(addr != address(0), \"Address cannot be zero\");\n        require(self.coinPairMap[coinPair] == address(0x0), \"Pair is already registered\");\n        self.coinPairMap[coinPair] = addr;\n        self.coinPairList.push(coinPair);\n    }\n\n    /// @notice Unregister a coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array.\n    function _unRegisterCoinPair(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        uint256 hint\n    ) internal {\n        require(self.coinPairMap[coinPair] != address(0x0), \"Pair is already unregistered\");\n        uint256 idx = _getCoinPairIndex(self, coinPair, hint);\n        require(idx < self.coinPairList.length, \"Coin pair not found\");\n        delete self.coinPairMap[coinPair];\n        self.coinPairList[idx] = self.coinPairList[self.coinPairList.length - 1];\n        self.coinPairList.pop();\n    }\n\n    /// @notice Set the address for a coinpair (the old one is lost!!!!)\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function _setCoinPair(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        address addr\n    ) internal {\n        require(addr != address(0), \"Address cannot be zero\");\n        require(self.coinPairMap[coinPair] != address(0x0), \"This coin pair is not registered\");\n        self.coinPairMap[coinPair] = addr;\n    }\n\n    /// @notice Return the contract address for a specified registered coin pair.\n    /// @param coinpair Coin-pair string to lookup (e.g: BTCUSD)\n    /// @return address Address of contract or zero if does not exist or was deleted.\n    function _getContractAddress(CoinPairRegisterData storage self, bytes32 coinpair)\n        internal\n        view\n        returns (address)\n    {\n        return self.coinPairMap[coinpair];\n    }\n\n    /// @notice Returns the count of registered coin pairs.\n    /// Keep in mind that Deleted coin-pairs will contain zeroed addresses.\n    function _getCoinPairCount(CoinPairRegisterData storage self) internal view returns (uint256) {\n        return self.coinPairList.length;\n    }\n\n    /// @notice Returns the coin pair at index.\n    /// @param i index to query.\n    function _getCoinPairAtIndex(CoinPairRegisterData storage self, uint256 i)\n        internal\n        view\n        returns (bytes32)\n    {\n        require(i < self.coinPairList.length, \"Illegal index\");\n        return self.coinPairList[i];\n    }\n\n    /// @notice Searches a coinpair in coinPairList\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array, zero is to search all the array.\n    function _getCoinPairIndex(\n        CoinPairRegisterData storage self,\n        bytes32 coinPair,\n        uint256 hint\n    ) internal view returns (uint256) {\n        require(hint < self.coinPairList.length, \"Illegal index\");\n        for (uint256 i = hint; i < self.coinPairList.length; i++) {\n            if (self.coinPairList[i] == coinPair) {\n                return i;\n            }\n        }\n        return self.coinPairList.length;\n    }\n}\n\n\n/// @title A registry for the coin pair prices, this is more general than OracleManager that stores\n/// only the coin pairs that are published by oracles.\ncontract PriceProviderRegisterStorage is Initializable, Governed {\n    using SafeMath for uint256;\n    using CoinPairRegisterLib for CoinPairRegisterLib.CoinPairRegisterData;\n\n    // Coin Pair register, has the same entries as OracleManage + calculated prices.\n    CoinPairRegisterLib.CoinPairRegisterData internal coinPairRegisterData;\n\n    // Empty internal constructor, to prevent people from mistakenly deploying\n    // an instance of this contract, which should be used via inheritance.\n    // solhint-disable-next-line no-empty-blocks\n    constructor() internal {}\n\n    // Reserved storage space to allow for layout changes in the future.\n    uint256[50] private ______gap;\n}\n\n\n/// @title A registry for the coin pair prices, this is more general than OracleManager that stores\n/// only the coin pairs that are published by oracles.\ncontract PriceProviderRegister is PriceProviderRegisterStorage {\n    using SafeMath for uint256;\n\n    /**\n      @notice Initialize the contract with the basic settings\n      @dev This initialize replaces the constructor but it is not called automatically.\n      It is necessary because of the upgradeability of the contracts\n      @param _governor Governor address\n     */\n    function initialize(IGovernor _governor) external initializer {\n        Governed._initialize(_governor);\n    }\n\n    /// @notice Register a new coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function registerCoinPair(bytes32 coinPair, IPriceProviderRegisterEntry addr)\n        external\n        onlyAuthorizedChanger()\n    {\n        coinPairRegisterData._registerCoinPair(coinPair, address(addr));\n    }\n\n    /// @notice Set the address for a coinpair (the old one is lost!!!!)\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param addr The contract address associated to the coinpair.\n    function setCoinPair(bytes32 coinPair, IPriceProviderRegisterEntry addr)\n        external\n        onlyAuthorizedChanger()\n    {\n        coinPairRegisterData._setCoinPair(coinPair, address(addr));\n    }\n\n    /// @notice Unregister a coin pair contract.\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array.\n    function unRegisterCoinPair(bytes32 coinPair, uint256 hint) external onlyAuthorizedChanger() {\n        coinPairRegisterData._unRegisterCoinPair(coinPair, hint);\n    }\n\n    /// @notice Return the contract address for a specified registered coin pair.\n    /// @param coinpair Coin-pair string to lookup (e.g: BTCUSD)\n    /// @return address Address of contract or zero if does not exist or was deleted.\n    function getContractAddress(bytes32 coinpair) external view returns (address) {\n        return coinPairRegisterData._getContractAddress(coinpair);\n    }\n\n    /// @notice Returns the count of registered coin pairs.\n    /// Keep in mind that Deleted coin-pairs will contain zeroed addresses.\n    function getCoinPairCount() external view returns (uint256) {\n        return coinPairRegisterData._getCoinPairCount();\n    }\n\n    /// @notice Returns the coin pair at index.\n    /// @param i index to query.\n    function getCoinPairAtIndex(uint256 i) external view returns (bytes32) {\n        return coinPairRegisterData._getCoinPairAtIndex(i);\n    }\n\n    /// @notice Searches a coinpair in coinPairList\n    /// @param coinPair The bytes32-encoded coinpair string (e.g. BTCUSD)\n    /// @param hint Optional hint to start traversing the coinPairList array, zero is to search all the array.\n    function getCoinPairIndex(bytes32 coinPair, uint256 hint) external view returns (uint256) {\n        return coinPairRegisterData._getCoinPairIndex(coinPair, hint);\n    }\n}\n\n",
      "file": "PriceProviderRegisterFlat.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0x8c3c148107be912758a5a172db5c518c4bd7c317202f058937dc30aa804eefa2",
    "blockNumber": 1330912,
    "transactionHash": "0x8560bfac6ecc0cf10af134fa281c340b9d622cfac879adf061695fcc96d862e1",
    "timestamp": 1604961614
  }
}