{
  "address": "0x248b320687ebf655f9ee7f62f0388c79fbb7b2f4",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "TokenFaucet",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.4.24+commit.e67f0147",
  "source": "pragma solidity >=0.4.21 <0.6.0;\n\nimport \"./tokens/ERC677TokenContract.sol\";\n\ncontract TokenFaucet {\n    address public owner;\n    ERC677TokenContract public tokenContract;\n\n    mapping (address => uint) cannotDispenseUntil;\n\n    uint public dispenseValue = 1 * 10**18;\n\n    modifier onlyOwner () {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier canDispense (address to) {\n        require(cannotDispenseUntil[to] < now);\n        _;\n    }\n\n    constructor (ERC677TokenContract _tokenContract) public {\n        owner = msg.sender;\n        tokenContract = _tokenContract;\n    }\n\n    function recover () public {\n        uint totalAmount = tokenContract.balanceOf(address(this));\n        tokenContract.transfer(owner, totalAmount);\n    }\n\n    function dispense (address to) public canDispense(to) {\n        tokenContract.transfer(to, dispenseValue);\n        cannotDispenseUntil[to] = now + 1 days;\n    }\n\n    function setDispenseValue (uint value) public onlyOwner() {\n        dispenseValue = value;\n    }\n}\n",
  "imports": [
    {
      "name": "TokenFaucet.sol",
      "contents": "pragma solidity >=0.4.21 <0.6.0;\n\nimport \"./tokens/ERC677TokenContract.sol\";\n\ncontract TokenFaucet {\n    address public owner;\n    ERC677TokenContract public tokenContract;\n\n    mapping (address => uint) cannotDispenseUntil;\n\n    uint public dispenseValue = 1 * 10**18;\n\n    modifier onlyOwner () {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier canDispense (address to) {\n        require(cannotDispenseUntil[to] < now);\n        _;\n    }\n\n    constructor (ERC677TokenContract _tokenContract) public {\n        owner = msg.sender;\n        tokenContract = _tokenContract;\n    }\n\n    function recover () public {\n        uint totalAmount = tokenContract.balanceOf(address(this));\n        tokenContract.transfer(owner, totalAmount);\n    }\n\n    function dispense (address to) public canDispense(to) {\n        tokenContract.transfer(to, dispenseValue);\n        cannotDispenseUntil[to] = now + 1 days;\n    }\n\n    function setDispenseValue (uint value) public onlyOwner() {\n        dispenseValue = value;\n    }\n}\n",
      "file": "TokenFaucet.sol"
    },
    {
      "name": "SafeMath.sol",
      "contents": "pragma solidity ^0.4.24;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (_a == 0) {\n      return 0;\n    }\n\n    c = _a * _b;\n    assert(c / _a == _b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = _a / _b;\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\n    return _a / _b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    assert(_b <= _a);\n    return _a - _b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\n    c = _a + _b;\n    assert(c >= _a);\n    return c;\n  }\n}\n"
    },
    {
      "name": "BasicToken.sol",
      "contents": "pragma solidity ^0.4.24;\n\n\nimport \"./ERC20Basic.sol\";\nimport \"../../math/SafeMath.sol\";\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) internal balances;\n\n  uint256 internal totalSupply_;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_value <= balances[msg.sender]);\n    require(_to != address(0));\n\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256) {\n    return balances[_owner];\n  }\n\n}\n"
    },
    {
      "name": "DetailedERC20.sol",
      "contents": "pragma solidity ^0.4.24;\n\nimport \"./ERC20.sol\";\n\n\n/**\n * @title DetailedERC20 token\n * @dev The decimals are only for visualization purposes.\n * All the operations are done using the smallest and indivisible token unit,\n * just as on Ethereum all the operations are done in wei.\n */\ncontract DetailedERC20 is ERC20 {\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n\n  constructor(string _name, string _symbol, uint8 _decimals) public {\n    name = _name;\n    symbol = _symbol;\n    decimals = _decimals;\n  }\n}\n"
    },
    {
      "name": "ERC20.sol",
      "contents": "pragma solidity ^0.4.24;\n\nimport \"./ERC20Basic.sol\";\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender)\n    public view returns (uint256);\n\n  function transferFrom(address _from, address _to, uint256 _value)\n    public returns (bool);\n\n  function approve(address _spender, uint256 _value) public returns (bool);\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n"
    },
    {
      "name": "ERC20Basic.sol",
      "contents": "pragma solidity ^0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * See https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address _who) public view returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n"
    },
    {
      "name": "SafeERC20.sol",
      "contents": "pragma solidity ^0.4.24;\n\nimport \"./ERC20Basic.sol\";\nimport \"./ERC20.sol\";\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(\n    ERC20Basic _token,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transfer(_to, _value));\n  }\n\n  function safeTransferFrom(\n    ERC20 _token,\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.transferFrom(_from, _to, _value));\n  }\n\n  function safeApprove(\n    ERC20 _token,\n    address _spender,\n    uint256 _value\n  )\n    internal\n  {\n    require(_token.approve(_spender, _value));\n  }\n}\n"
    },
    {
      "name": "StandardToken.sol",
      "contents": "pragma solidity ^0.4.24;\n\nimport \"./BasicToken.sol\";\nimport \"./ERC20.sol\";\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/issues/20\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address _from,\n    address _to,\n    uint256 _value\n  )\n    public\n    returns (bool)\n  {\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    require(_to != address(0));\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address _owner,\n    address _spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(\n    address _spender,\n    uint256 _addedValue\n  )\n    public\n    returns (bool)\n  {\n    allowed[msg.sender][_spender] = (\n      allowed[msg.sender][_spender].add(_addedValue));\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(\n    address _spender,\n    uint256 _subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    uint256 oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue >= oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n"
    },
    {
      "name": "ContractReceiver.sol",
      "contents": "pragma solidity ^0.4.24;\n\ncontract ContractReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) public returns(bool) {\n        return true;\n    }\n}\n"
    },
    {
      "name": "ERC677.sol",
      "contents": "\n// See https://github.com/ethereum/EIPs/issues/677\n\npragma solidity ^0.4.24;\n\n /* ERC677 contract interface */\n \ncontract ERC677 {\n    function transferAndCall(address to, uint256 value, bytes data) public returns (bool ok);\n\n    event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n}\n"
    },
    {
      "name": "ERC677TokenContract.sol",
      "contents": "pragma solidity ^0.4.24;\n\n\nimport \"../third-party/openzeppelin/token/ERC20/StandardToken.sol\";\nimport \"../third-party/openzeppelin/token/ERC20/DetailedERC20.sol\";\nimport \"./ContractReceiver.sol\";\nimport \"./ERC677.sol\";\n\ncontract ERC677TokenContract is StandardToken, ERC677, DetailedERC20 {\n\n    constructor(address initialAccount, uint256 initialBalance) DetailedERC20(\"Token\", \"TOK\", 18) public {\n        balances[initialAccount] = initialBalance;\n        totalSupply_ = initialBalance;\n    }\n\n    function transferAndCall(address to, uint256 value, bytes data) public returns (bool) {\n        super.transfer(to, value);\n\n        ContractReceiver(to).tokenFallback(msg.sender, value, data);\n\n        Transfer(msg.sender, to, value, data);\n\n        return true;\n    }\n}\n"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0xeb5c8a98618e1d31c2e06de20a126797ea8d21d44e381fc2aff203a2a493e6e2",
    "blockNumber": 19581,
    "transactionHash": "0x886ca35b704736833ff688cde0cb2b414d115209551158fce8368f5e97ca4752",
    "timestamp": 1562975897
  },
  "constructorArguments": [
    "0x19f64674d8a5b4e652319f5e239efd3bc969a1fe"
  ]
}