{
  "address": "0x128b878c2dedacc211a6324fa51b6bf006cad25e",
  "net": {
    "id": "31",
    "name": "RSK Testnet"
  },
  "name": "SubdomainBatchRegistrar",
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "metadata",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ]
      }
    }
  },
  "version": "0.5.12+commit.7709ece9",
  "source": "\n// File: contracts/testing/AbstractResolver.sol\n\npragma solidity ^0.5.3;\n\ncontract AbstractResolver {\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool);\n}\n\n// File: contracts/testing/AbstractAddrResolver.sol\n\npragma solidity ^0.5.3;\n\n\ncontract AbstractAddrResolver is AbstractResolver {\n    function addr(bytes32 node) public view returns (address ret);\n    function setAddr(bytes32 node, address addrValue) public;\n\n    event AddrChanged(bytes32 indexed node, address addr);\n}\n\n// File: @rsksmart/rns-registry/contracts/AbstractRNS.sol\n\npragma solidity ^0.5.0;\n\ncontract AbstractRNS {\n    function owner(bytes32 node) public view returns(address);\n    function resolver(bytes32 node) public view returns(address);\n    function ttl(bytes32 node) public view returns(uint64);\n    function setOwner(bytes32 node, address ownerAddress) public;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address ownerAddress) public;\n    function setResolver(bytes32 node, address resolverAddress) public;\n    function setTTL(bytes32 node, uint64 ttlValue) public;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address ownerAddress);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address ownerAddress);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolverAddress);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttlValue);\n}\n\n// File: contracts/SubdomainBatchRegistrar.sol\n\npragma solidity ^0.5.3;\n\n\n\ncontract SubdomainBatchRegistrar {\n    AbstractRNS private rns;\n\n    mapping (bytes32 => address) public nodeOwner;\n    mapping (bytes32 => mapping (address => bool)) public approvedToRegister;\n\n    event Claim(bytes32 node, address owner);\n    event Approve(bytes32 node, address approved, bool approval);\n\n    modifier onlyNodeOwner (bytes32 node) {\n        require(msg.sender == nodeOwner[node], \"Only node owner\");\n        _;\n    }\n\n    modifier onlyApprovedToRegister (bytes32 node) {\n        require(approvedToRegister[node][msg.sender], \"Only approved to register\");\n        _;\n    }\n\n    constructor (AbstractRNS _rns) public {\n        rns = _rns;\n    }\n\n    /// @notice Claim a domain to use for batch registration.\n    /// @dev Claim must be executed before transfering the rns domain.\n    /// @dev Use recover to revert the ownership transfer.\n    /// @dev This will also set owner as allowed registrant.\n    /// @param node The root node to execute batch registrations for.\n    function claim (bytes32 node) external {\n        require(rns.owner(node) == msg.sender, \"Only RNS owner\");\n\n        nodeOwner[node] = msg.sender;\n        approvedToRegister[node][msg.sender] = true;\n\n        emit Claim(node, msg.sender);\n    }\n\n    /***************/\n    /* Registrants */\n    /***************/\n\n    // Registrants can execute subdomain batch registration\n    // for the root node. After claming the node, the owner\n    // can manager registrants.\n\n    /// @notice Add registrant.\n    /// @dev Only node owner.\n    /// @param node Node that the new registant can register subdomains for.\n    /// @param registrant The registrant to be added.\n    function addRegistrant(bytes32 node, address registrant) external onlyNodeOwner(node) {\n        setApproval(node, registrant, true);\n    }\n\n    /// @notice Remove registrant.\n    /// @dev Only node owner.\n    /// @param node Node that the registant cannot register subdomains for.\n    /// @param registrant The registrant to be removed.\n    function removeRegistrant(bytes32 node, address registrant) external onlyNodeOwner(node) {\n        setApproval(node, registrant, false);\n    }\n\n    function setApproval(bytes32 node, address registrant, bool approval) internal onlyNodeOwner(node) {\n        approvedToRegister[node][registrant] = approval;\n        emit Approve(node, registrant, approval);\n    }\n\n    /// @notice Return if a given account can registers subdomains for a given node.\n    /// @param node Node to query the approval for.\n    /// @param registrant The registrant to query for.\n    /// @return True if the registrant can register subnodes for node.\n    function isRegistrant(bytes32 node, address registrant) public view returns (bool) {\n        return approvedToRegister[node][registrant];\n    }\n\n    /// @notice Recover rns node ownership.\n    /// @dev Only node owner.\n    /// @param node Node to recover ownership of.\n    function recover(bytes32 node) external onlyNodeOwner(node) {\n        rns.setOwner(node, nodeOwner[node]);\n    }\n\n    /****************/\n    /* Registration */\n    /****************/\n\n    /// @notice Sets subdomains owners and addr resolutions for given names.\n    /// @dev Only approved to register.\n    /// @dev rootNode must be owned by this contract.\n    /// @dev Sets same address for addr and owner for each subnode.\n    /// @param rootNode Parent of all subdomains.\n    /// @param labels The array of labels to register.\n    /// @param addrs The owner and addr resolution for matching index labels.\n    function register\n        (bytes32 rootNode, bytes32[] calldata labels, address[] calldata addrs)\n        external\n        onlyApprovedToRegister(rootNode)\n    {\n        require(labels.length == addrs.length, \"Labels and addrs should contain same amount of elements\");\n\n        bytes32 node;\n        bytes32 label;\n        address addr;\n\n        AbstractAddrResolver resolver;\n        resolver = AbstractAddrResolver(rns.resolver(rootNode));\n\n        for (uint i = 0; i < labels.length; i++) {\n            label = labels[i];\n            addr = addrs[i];\n            node = keccak256(abi.encodePacked(rootNode, label));\n\n            rns.setSubnodeOwner(rootNode, label, address(this));\n            resolver.setAddr(node, addr);\n            rns.setOwner(node, addr);\n        }\n    }\n}\n",
  "imports": [
    {
      "name": "SubdomainBatchRegistrar.sol",
      "contents": "\n// File: contracts/testing/AbstractResolver.sol\n\npragma solidity ^0.5.3;\n\ncontract AbstractResolver {\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool);\n}\n\n// File: contracts/testing/AbstractAddrResolver.sol\n\npragma solidity ^0.5.3;\n\n\ncontract AbstractAddrResolver is AbstractResolver {\n    function addr(bytes32 node) public view returns (address ret);\n    function setAddr(bytes32 node, address addrValue) public;\n\n    event AddrChanged(bytes32 indexed node, address addr);\n}\n\n// File: @rsksmart/rns-registry/contracts/AbstractRNS.sol\n\npragma solidity ^0.5.0;\n\ncontract AbstractRNS {\n    function owner(bytes32 node) public view returns(address);\n    function resolver(bytes32 node) public view returns(address);\n    function ttl(bytes32 node) public view returns(uint64);\n    function setOwner(bytes32 node, address ownerAddress) public;\n    function setSubnodeOwner(bytes32 node, bytes32 label, address ownerAddress) public;\n    function setResolver(bytes32 node, address resolverAddress) public;\n    function setTTL(bytes32 node, uint64 ttlValue) public;\n\n    // Logged when the owner of a node assigns a new owner to a subnode.\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address ownerAddress);\n\n    // Logged when the owner of a node transfers ownership to a new account.\n    event Transfer(bytes32 indexed node, address ownerAddress);\n\n    // Logged when the resolver for a node changes.\n    event NewResolver(bytes32 indexed node, address resolverAddress);\n\n    // Logged when the TTL of a node changes\n    event NewTTL(bytes32 indexed node, uint64 ttlValue);\n}\n\n// File: contracts/SubdomainBatchRegistrar.sol\n\npragma solidity ^0.5.3;\n\n\n\ncontract SubdomainBatchRegistrar {\n    AbstractRNS private rns;\n\n    mapping (bytes32 => address) public nodeOwner;\n    mapping (bytes32 => mapping (address => bool)) public approvedToRegister;\n\n    event Claim(bytes32 node, address owner);\n    event Approve(bytes32 node, address approved, bool approval);\n\n    modifier onlyNodeOwner (bytes32 node) {\n        require(msg.sender == nodeOwner[node], \"Only node owner\");\n        _;\n    }\n\n    modifier onlyApprovedToRegister (bytes32 node) {\n        require(approvedToRegister[node][msg.sender], \"Only approved to register\");\n        _;\n    }\n\n    constructor (AbstractRNS _rns) public {\n        rns = _rns;\n    }\n\n    /// @notice Claim a domain to use for batch registration.\n    /// @dev Claim must be executed before transfering the rns domain.\n    /// @dev Use recover to revert the ownership transfer.\n    /// @dev This will also set owner as allowed registrant.\n    /// @param node The root node to execute batch registrations for.\n    function claim (bytes32 node) external {\n        require(rns.owner(node) == msg.sender, \"Only RNS owner\");\n\n        nodeOwner[node] = msg.sender;\n        approvedToRegister[node][msg.sender] = true;\n\n        emit Claim(node, msg.sender);\n    }\n\n    /***************/\n    /* Registrants */\n    /***************/\n\n    // Registrants can execute subdomain batch registration\n    // for the root node. After claming the node, the owner\n    // can manager registrants.\n\n    /// @notice Add registrant.\n    /// @dev Only node owner.\n    /// @param node Node that the new registant can register subdomains for.\n    /// @param registrant The registrant to be added.\n    function addRegistrant(bytes32 node, address registrant) external onlyNodeOwner(node) {\n        setApproval(node, registrant, true);\n    }\n\n    /// @notice Remove registrant.\n    /// @dev Only node owner.\n    /// @param node Node that the registant cannot register subdomains for.\n    /// @param registrant The registrant to be removed.\n    function removeRegistrant(bytes32 node, address registrant) external onlyNodeOwner(node) {\n        setApproval(node, registrant, false);\n    }\n\n    function setApproval(bytes32 node, address registrant, bool approval) internal onlyNodeOwner(node) {\n        approvedToRegister[node][registrant] = approval;\n        emit Approve(node, registrant, approval);\n    }\n\n    /// @notice Return if a given account can registers subdomains for a given node.\n    /// @param node Node to query the approval for.\n    /// @param registrant The registrant to query for.\n    /// @return True if the registrant can register subnodes for node.\n    function isRegistrant(bytes32 node, address registrant) public view returns (bool) {\n        return approvedToRegister[node][registrant];\n    }\n\n    /// @notice Recover rns node ownership.\n    /// @dev Only node owner.\n    /// @param node Node to recover ownership of.\n    function recover(bytes32 node) external onlyNodeOwner(node) {\n        rns.setOwner(node, nodeOwner[node]);\n    }\n\n    /****************/\n    /* Registration */\n    /****************/\n\n    /// @notice Sets subdomains owners and addr resolutions for given names.\n    /// @dev Only approved to register.\n    /// @dev rootNode must be owned by this contract.\n    /// @dev Sets same address for addr and owner for each subnode.\n    /// @param rootNode Parent of all subdomains.\n    /// @param labels The array of labels to register.\n    /// @param addrs The owner and addr resolution for matching index labels.\n    function register\n        (bytes32 rootNode, bytes32[] calldata labels, address[] calldata addrs)\n        external\n        onlyApprovedToRegister(rootNode)\n    {\n        require(labels.length == addrs.length, \"Labels and addrs should contain same amount of elements\");\n\n        bytes32 node;\n        bytes32 label;\n        address addr;\n\n        AbstractAddrResolver resolver;\n        resolver = AbstractAddrResolver(rns.resolver(rootNode));\n\n        for (uint i = 0; i < labels.length; i++) {\n            label = labels[i];\n            addr = addrs[i];\n            node = keccak256(abi.encodePacked(rootNode, label));\n\n            rns.setSubnodeOwner(rootNode, label, address(this));\n            resolver.setAddr(node, addr);\n            rns.setOwner(node, addr);\n        }\n    }\n}\n",
      "file": "SubdomainBatchRegistrar.sol"
    }
  ],
  "libraries": {},
  "creationData": {
    "blockHash": "0xa9eee7b8c6e397815d4e5d598438b7e8be0bca6f3876dfc3da0c41184fa61eb4",
    "blockNumber": 468125,
    "transactionHash": "0x9abbf3435422e0ed526a489d1aca417e64da2e87a26917bf175f614eecb6b2fa",
    "timestamp": 1577001597
  },
  "constructorArguments": [
    "0x7d284aaac6e925aad802a53c0c69efe3764597b8"
  ]
}