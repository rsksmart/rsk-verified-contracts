{
    "address": "0x79c911a067705a8f43c693d93b42615a25e839d8",
    "net": {
        "id": "31",
        "name": "RSK Testnet"
    },
    "name": "ManagedWallet",
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        }
    },
    "version": "0.8.0+commit.c7dfd78e",
    "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * A wallet contract which not only allows the owner, but also an admin to withdraw funds.\n * */\ncontract ManagedWallet is Ownable {\n\n    address public admin;\n\n    modifier onlyAdmin() {\n        require(_msgSender() == admin, \"Only the admin may call this function.\");\n        _;\n    }\n\n    constructor(address _admin) public {\n        admin = _admin;\n    }\n    \n    /**\n     * allow the contract to receive funds\n     * */\n    receive() external payable {\n        \n    }\n    \n    /**\n     * allows the owner to change the admin\n     * @param newAdmin the new admin \n     * */\n    function changeAdmin(address newAdmin) public onlyOwner {\n        require(newAdmin != address(0), \"New admin may not be the zero address.\");\n        admin = newAdmin;\n    }\n    \n    /**\n     * @notice allows the owner to withdraw the funds\n     * @param amount the amount to withdraw\n     * */\n    function withdraw(uint256 amount) external onlyOwner {\n        (bool success,) = _msgSender().call{value:amount}(new bytes(0));\n        require(success, \"Withdraw failed\");\n    }\n    \n    /**\n     * @notice allows the admin wallet to withdraw funds to an arbitrary receiver\n     * @param receiver the receiver of the funds\n     * @param amount the amount to send\n     * */\n    function withdrawAdmin(address payable receiver, uint256 amount) external onlyAdmin {\n        (bool success,) = receiver.call{value:amount}(new bytes(0));\n        require(success, \"Withdraw failed\");\n    }\n}\n",
    "imports": [
        {
            "name": "ManagedWallet.sol",
            "contents": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * A wallet contract which not only allows the owner, but also an admin to withdraw funds.\n * */\ncontract ManagedWallet is Ownable {\n\n    address public admin;\n\n    modifier onlyAdmin() {\n        require(_msgSender() == admin, \"Only the admin may call this function.\");\n        _;\n    }\n\n    constructor(address _admin) public {\n        admin = _admin;\n    }\n    \n    /**\n     * allow the contract to receive funds\n     * */\n    receive() external payable {\n        \n    }\n    \n    /**\n     * allows the owner to change the admin\n     * @param newAdmin the new admin \n     * */\n    function changeAdmin(address newAdmin) public onlyOwner {\n        require(newAdmin != address(0), \"New admin may not be the zero address.\");\n        admin = newAdmin;\n    }\n    \n    /**\n     * @notice allows the owner to withdraw the funds\n     * @param amount the amount to withdraw\n     * */\n    function withdraw(uint256 amount) external onlyOwner {\n        (bool success,) = _msgSender().call{value:amount}(new bytes(0));\n        require(success, \"Withdraw failed\");\n    }\n    \n    /**\n     * @notice allows the admin wallet to withdraw funds to an arbitrary receiver\n     * @param receiver the receiver of the funds\n     * @param amount the amount to send\n     * */\n    function withdrawAdmin(address payable receiver, uint256 amount) external onlyAdmin {\n        (bool success,) = receiver.call{value:amount}(new bytes(0));\n        require(success, \"Withdraw failed\");\n    }\n}\n",
            "file": "ManagedWallet.sol"
        }
    ],
    "libraries": {},
    "encodedConstructorArguments": "000000000000000000000000369706822facb3441853c9c405eab1a2d5c76664",
    "creationData": {
        "blockHash": "0x03a737c6f08a90fef8f1ca4eb4f0e9fdef3cd7f9c949e270d86e83c9de01a622",
        "blockNumber": 1713243,
        "transactionHash": "0x8dcb79e6e1c87b3e7faf3c8cab18989fd83805d56358f7b6de86a7520a87054c",
        "timestamp": 1616709776
    }
}