{
    "address": "0x2faec2640bcbd46747f70bdfc7e59a646c9ace48",
    "net": {
        "id": "31",
        "name": "RSK Testnet"
    },
    "name": "MoCVendors",
    "settings": {
        "optimizer": {
            "enabled": true,
            "runs": "1"
        },
        "evmVersion": "byzantium"
    },
    "version": "0.5.8+commit.23d335f2",
    "source": "// Dependency file: openzeppelin-solidity/contracts/math/Math.sol\n\n// pragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n\n// Dependency file: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n// pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Dependency file: moc-governance/contracts/Governance/ChangeContract.sol\n\n// pragma solidity 0.5.8;\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n\n  /**\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\n    is executed\n   */\n  function execute() external;\n}\n\n\n// Dependency file: moc-governance/contracts/Governance/IGovernor.sol\n\n// pragma solidity 0.5.8;\n\n// import \"moc-governance/contracts/Governance/ChangeContract.sol\";\n\n/**\n  @title Governor\n  @notice Governor interface. This functions should be overwritten to\n  enable the comunnication with the rest of the system\n  */\ninterface IGovernor{\n\n  /**\n    @notice Function to be called to make the changes in changeContract\n    @dev This function should be protected somehow to only execute changes that\n    benefit the system. This decision process is independent of this architechture\n    therefore is independent of this interface too\n    @param changeContract Address of the contract that will execute the changes\n   */\n  function executeChange(ChangeContract changeContract) external;\n\n  /**\n    @notice Function to be called to make the changes in changeContract\n    @param _changer Address of the contract that will execute the changes\n   */\n  function isAuthorizedChanger(address _changer) external view returns (bool);\n}\n\n\n// Dependency file: zos-lib/contracts/Initializable.sol\n\n// pragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n// Dependency file: moc-governance/contracts/Governance/Governed.sol\n\n// pragma solidity 0.5.8;\n\n// import \"moc-governance/contracts/Governance/IGovernor.sol\";\n// import \"zos-lib/contracts/Initializable.sol\";\n\n/**\n  @title Governed\n  @notice Base contract to be inherited by governed contracts\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behaviour\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\n  governance aspect of the child contract\n  */\ncontract Governed is Initializable {\n\n  /**\n    @notice The address of the contract which governs this one\n   */\n  IGovernor public governor;\n\n  string constant private NOT_AUTHORIZED_CHANGER = \"not_authorized_changer\";\n\n  /**\n    @notice Modifier that protects the function\n    @dev You should use this modifier in any function that should be called through\n    the governance system\n   */\n  modifier onlyAuthorizedChanger() {\n    require(governor.isAuthorizedChanger(msg.sender), NOT_AUTHORIZED_CHANGER);\n    _;\n  }\n\n  /**\n    @notice Initialize the contract with the basic settings\n    @dev This initialize replaces the constructor but it is not called automatically.\n    It is necessary because of the upgradeability of the contracts\n    @param _governor Governor address\n   */\n  function initialize(IGovernor _governor) public initializer {\n    governor = _governor;\n  }\n\n  /**\n    @notice Change the contract's governor. Should be called through the old governance system\n    @param newIGovernor New governor address\n   */\n  function changeIGovernor(IGovernor newIGovernor) public onlyAuthorizedChanger {\n    governor = newIGovernor;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/MoCHelperLib.sol\n\n// pragma solidity 0.5.8;\n\n// import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\nlibrary MoCHelperLib {\n\n  struct MocLibConfig {\n    uint256 reservePrecision;\n    uint256 dayPrecision;\n    uint256 mocPrecision;\n  }\n\n  using SafeMath for uint256;\n\n  uint256 constant UINT256_MAX = ~uint256(0);\n\n  /**\n    @dev Returns max uint256 value constant.\n    @return max uint256 value constant\n  */\n  function getMaxInt(MocLibConfig storage /*config*/) public pure returns(uint256) {\n    return UINT256_MAX;\n  }\n\n  /**\n    @dev Calculates average interest using integral function: T =  Rate = a * (x ** b) + c\n    @param tMax maxInterestRate [using mocPrecision]\n    @param power factor [using noPrecision]\n    @param tMin minInterestRate C0 stableToken amount [using mocPrecision]\n    @param abRat1 initial abundance ratio [using mocPrecision]\n    @param abRat2 final abundance ratio [using mocPrecision]\n    @return average interest rate [using mocPrecision]\n  */\n  function inrateAvg(MocLibConfig storage config, uint256 tMax, uint256 power, uint256 tMin, uint256 abRat1, uint256 abRat2)\n  public view returns(uint256) {\n    require(tMax > tMin, \"Max inrate should be bigger than Min inrate\");\n    uint256 abRat1Comp = config.mocPrecision.sub(abRat1);\n    uint256 abRat2Comp = config.mocPrecision.sub(abRat2);\n\n    if (abRat1 == abRat2) {\n      return potential(config, tMax, power, tMin, abRat1Comp);\n    }\n    else if (abRat2 < abRat1) {\n      return avgInt(config, tMax, power, tMin, abRat1Comp, abRat2Comp);\n    }\n    else {\n      return avgInt(config, tMax, power, tMin, abRat2Comp, abRat1Comp);\n    }\n  }\n\n  /**\n    @dev Calculates spot interest rate that RiskProx owners should pay to RiskPro owners: Rate = tMax * (abRatio ** power) + tMin\n    @param tMin min interest rate [using mocPrecision]\n    @param power power to use in the formula [using NoPrecision]\n    @param tMax max interest rate [using mocPrecision]\n    @param abRatio bucket C0  abundance Ratio [using mocPrecision]\n\n   */\n  function spotInrate(\n    MocLibConfig storage config, uint256 tMax, uint256 power, uint256 tMin, uint256 abRatio\n  ) public view returns(uint256) {\n    uint256 abRatioComp = config.mocPrecision.sub(abRatio);\n\n    return potential(config, tMax, power, tMin, abRatioComp);\n  }\n\n  /**\n    @dev Calculates potential interests function with given parameters: Rate = a * (x ** b) + c\n    @param a maxInterestRate [using mocPrecision]\n    @param b factor [using NoPrecision]\n    @param c minInterestRate C0 stableToken amount [using mocPrecision]\n    @param value global stableToken amount [using mocPrecision]\n  */\n  function potential(MocLibConfig storage config, uint256 a, uint256 b, uint256 c, uint256 value)\n  public view returns(uint256) {\n    // value ** b\n    // [MOC] ** [] = [MOC]\n    uint256 aux1 = pow(value, b, config.mocPrecision);\n    // (a * aux1) + c\n    // [MOC] [MOC] / [MOC] + [MOC] = [MOC]\n    return a.mul(aux1).div(config.mocPrecision).add(c);\n  }\n\n    /**\n    @dev Calculates average of the integral function:\n     T = (\n              (c * xf + ((a * (xf ** (b + 1))) / (b + 1))) -\n              (c * xi + ((a * (xi ** (b + 1))) / (b + 1)))\n             ) / (xf - xi)\n    @param a maxInterestRate [using mocPrecision]\n    @param b factor [using NoPrecision]\n    @param c minInterestRate C0 stableToken amount [using mocPrecision]\n    @param value1 value to put in the function [using mocPrecision]\n    @param value2 value to put in the function [using mocPrecision]\n    @return average interest rate [using mocPrecision]\n   */\n  function avgInt(MocLibConfig storage config, uint256 a, uint256 b, uint256 c, uint256 value1, uint256 value2)\n  public view returns(uint256) {\n    // value2 - value1\n    // [MOC]\n    uint256 diff = value2.sub(value1);\n    // ((c * (1 - value1) + ((a * ((1 - value1) ** (b + 1))) / (b + 1)))\n    uint256 intV1 = integral(config, a, b, c, value1);\n    // ((c * (1 - value2) + ((a * ((1 - value2) ** (b + 1))) / (b + 1)))\n    uint256 intV2 = integral(config,  a, b, c, value2);\n    // (secOp - first) / diff\n    // ([MOC][MOC] - [MOC][MOC]) / [MOC] = [MOC]\n    return intV2.sub(intV1).div(diff);\n  }\n\n  /**\n    @dev Calculates integral of the exponential function: T = c * (value) + (a * value ** (b + 1)) / (b + 1))\n    @param a maxInterestRate [using mocPrecision]\n    @param b factor [using NoPrecision]\n    @param c minInterestRate C0 stableToken amount [using mocPrecision]\n    @param value value to put in the function [using mocPrecision]\n    @return integration result [using mocPrecision]\n  */\n  function integral(MocLibConfig storage config, uint256 a, uint256 b, uint256 c, uint256 value)\n  public view returns(uint256) {\n    // b + 1\n    // [NONE]\n    uint256 b2 = b.add(1);\n    // c * value\n    // [MOC][MOC]\n    uint256 firstOp = c.mul(value);\n    // [MOC]\n    uint256 pow = pow(value, b2, config.mocPrecision);\n    // (a * value ** b2) / b2)\n    // [MOC][MOC]\n    uint256 secOp = a.mul(pow).div(b2);\n    // (firstOp + secOp)\n    // [MOC][MOC] + [MOC][MOC] = [MOC][MOC]\n    return firstOp.add(secOp);\n  }\n\n  /**\n  * @dev Relation between stableTokens in bucket 0 and StableToken total supply\n  * @param stableToken0 stableToken count in bucket 0 [using mocPrecision]\n  * @param stableTokent total stableToken supply [using mocPrecision]\n  * @return abundance ratio [using mocPrecision]\n  */\n  function abundanceRatio(MocLibConfig storage config, uint256 stableToken0, uint256 stableTokent)\n  public view returns(uint256) {\n    if (stableTokent == 0) {\n      return config.mocPrecision;\n    }\n    // [DOC] [MOC] / [DOC] = [MOC]\n    return stableToken0.mul(config.mocPrecision).div(stableTokent);\n  }\n\n  /**\n    @dev Returns the Ratio to apply to RiskPro Price in discount situations: SpotDiscountRate = TPD * (utpdu - cob) / (uptdu -liq)\n    @param riskProLiqDiscountRate Discount rate applied at Liquidation level coverage [using mocPrecision]\n    @param liq Liquidation coverage threshold [using mocPrecision]\n    @param utpdu Discount coverage threshold [using mocPrecision]\n    @param cov Actual global Coverage threshold [using mocPrecision]\n    @return Spot discount rate [using mocPrecision]\n  */\n  function riskProSpotDiscountRate(\n    MocLibConfig storage libConfig, uint256 riskProLiqDiscountRate,\n    uint256 liq, uint256 utpdu, uint256 cov\n  ) public view returns(uint256) {\n    require(riskProLiqDiscountRate < libConfig.mocPrecision, \"Discount rate should be lower than 1\");\n\n    if (cov >= utpdu) {\n      return 0;\n    }\n\n    // utpdu - liq\n    // [MOC] - [MOC] = [MOC]\n    uint256 utpduLiqDiff = utpdu.sub(liq);\n\n    // utpdu - cov\n    // [MOC] - [MOC] = [MOC]\n    uint256 utpduCovDiff = utpdu.sub(cov);\n\n    // TPD * utpduCovDiff / utpduLiqDiff\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    return riskProLiqDiscountRate.mul(utpduCovDiff).div(utpduLiqDiff);\n  }\n\n  /**\n    @dev Max amount of RiskPro to available with discount: MaxRiskProWithDiscount = (uTPDU * nStableToken * PEG - (nReserve * B)) / (TPusd * TPD)\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param nStableToken StableToken amount [using mocPrecision]\n    @param utpdu Discount coverage threshold [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param riskProUsdPrice riskProUsdPrice [using mocPrecision]\n    @param spotDiscount spot discount [using mocPrecision]\n    @return Total RiskPro amount [using mocPrecision]\n  */\n  function maxRiskProWithDiscount(\n    MocLibConfig storage libConfig, uint256 nReserve, uint256 nStableToken, uint256 utpdu,\n    uint256 peg, uint256 reservePrice, uint256 riskProUsdPrice, uint256 spotDiscount\n  ) public view returns(uint256)  {\n    require(spotDiscount < libConfig.mocPrecision, \"Discount Rate should be lower than 1\");\n\n    if (spotDiscount == 0) {\n      return 0;\n    }\n\n    // nReserve * B\n    // [RES] * [MOC] / [RES] = [MOC]\n    uint256 nbUsdValue = nReserve.mul(reservePrice).div(libConfig.reservePrecision);\n\n    // (TPusd * (1 - TPD))\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 riskProDiscountPrice = riskProUsdPrice.mul(libConfig.mocPrecision.sub(spotDiscount))\n      .div(libConfig.mocPrecision);\n\n    return maxRiskProWithDiscountAux(libConfig, nbUsdValue, nStableToken, utpdu, peg, riskProDiscountPrice);\n  }\n\n  /**\n    @dev Max amount of RiskPro to available with discount: MaxRiskProWithDiscount = (uTPDU * nStableToken * PEG - (nReserve * B)) / (TPusd * TPD)\n    @param nbUsdValue Total amount of ReserveTokens in USD [using mocPrecision]\n    @param nStableToken StableToken amount [using mocPrecision]\n    @param utpdu Discount coverage threshold [using mocPrecision]\n    @param riskProDiscountPrice riskProUsdPrice with discount applied [using mocPrecision]\n    @param peg peg value\n    @return Total RiskPro amount [using reservePrecision]\n  */\n  function maxRiskProWithDiscountAux(\n    MocLibConfig storage libConfig, uint256 nbUsdValue, uint256 nStableToken,\n    uint256 utpdu, uint256 peg, uint256 riskProDiscountPrice\n  ) internal view returns(uint256) {\n\n    // uTPDU * nStableToken * PEG\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 coverageUSDAmount = utpdu.mul(nStableToken).mul(peg).div(libConfig.mocPrecision);\n\n    // This case only occurs with Coverage below 1\n    if (coverageUSDAmount <= nbUsdValue) {\n      return 0;\n    }\n\n    // ([MOC] - [MOC]) * [RES] / [MOC] = [RES]\n    return coverageUSDAmount.sub(nbUsdValue).mul(libConfig.reservePrecision).div(riskProDiscountPrice);\n  }\n\n  /**\n    @dev Calculates Locked ReserveTokens\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param nStableToken StableTokens amount [using mocPrecision]\n    @param peg peg value\n    @return Locked ReserveTokens [using reservePrecision]\n  */\n  function lockedReserveTokens(MocLibConfig storage libConfig, uint256 reservePrice, uint256 nStableToken, uint256 peg)\n    public view returns (uint256)\n  {\n    return nStableToken.mul(peg).mul(libConfig.reservePrecision).div(reservePrice);\n  }\n\n  /**\n    @dev Calculates price at liquidation event as a relation between the stableToken total supply\n    and the amount of ReserveTokens available to distribute\n    @param resTokenAmount ReserveTokens to distribute [using reservePrecision]\n    @param nStableToken StableTokens amount [using mocPrecision]\n    @return Price at liquidation event [using mocPrecision]\n  */\n  function liquidationPrice(MocLibConfig storage libConfig, uint256 resTokenAmount, uint256 nStableToken)\n  public view returns(uint256) {\n    // [MOC] * [RES] / [RES]\n    return nStableToken.mul(libConfig.reservePrecision).div(resTokenAmount);\n  }\n\n  /**\n    @dev Calculates RiskPro ReserveTokens: (nReserve-LB) / nTP\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param lb Locked ReserveTokens amount [using reservePrecision]\n    @param nTP RiskPro amount [using mocPrecision]\n    @return RiskPro ReserveTokens price [using reservePrecision]\n  */\n  function riskProTecPrice(MocLibConfig storage libConfig, uint256 nReserve, uint256 lb, uint256 nTP)\n  public view returns (uint256) {\n    // Liquidation happens before this condition turns true\n    if (nReserve < lb) {\n      return 0;\n    }\n\n    if (nTP == 0) {\n      return libConfig.mocPrecision;\n    }\n    // ([RES] - [RES]) * [MOC] / [MOC]\n    return nReserve.sub(lb).mul(libConfig.mocPrecision).div(nTP);\n  }\n\n  /**\n    @dev Calculates RiskPro ReserveToken price: RiskProxInRiskPro = riskProxTecPrice / riskProPrice\n    @param riskProxTecPrice RiskProx ReserveTokens price [using reservePrecision]\n    @param riskProPrice Trog ReserveTokens price [using reservePrecision]\n    @return RiskProx price in RiskPro [using mocPrecision]\n  */\n  function riskProxRiskProPrice(\n    MocLibConfig storage libConfig, uint256 riskProxTecPrice, uint256 riskProPrice\n  ) public view returns (uint256) {\n    // [RES] * [MOC] / [RES] = [MOC]\n    return riskProxTecPrice.mul(libConfig.mocPrecision).div(riskProPrice);\n  }\n\n  /**\n    @dev Returns a new value with the discountRate applied: (price)* (1 - discountRate)\n    @param price Price [using SomePrecision]\n    @param discountRate Discount rate to apply [using mocPrecision]\n    @return Price with discount applied [using SomePrecision]\n  */\n  function applyDiscountRate(MocLibConfig storage libConfig, uint256 price, uint256 discountRate)\n    public view returns(uint256) {\n\n    uint256 discountCoeff = libConfig.mocPrecision.sub(discountRate);\n\n    return price.mul(discountCoeff).div(libConfig.mocPrecision);\n  }\n\n  /**\n    @dev Returns the amount of interest to pay: = price * interestRate\n    @param value Cost to apply interest [using SomePrecision]\n    @param interestRate Interest rate to apply [using mocPrecision]\n    @return Interest cost based on the value and interestRate [using SomePrecision]\n  */\n  function getInterestCost(MocLibConfig storage libConfig, uint256 value, uint256 interestRate)\n    public view returns(uint256) {\n    // [ORIGIN] * [MOC] / [MOC] = [ORIGIN]\n    return value.mul(interestRate).div(libConfig.mocPrecision);\n  }\n\n  /**\n    @dev Calculates Coverage: nReserve / LB\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param lB Locked ReserveTokens amount [using reservePrecision]\n    @return Coverage [using mocPrecision]\n  */\n  function coverage(MocLibConfig storage libConfig, uint256 nReserve, uint256 lB) public view\n    returns(uint256) {\n    if (lB == 0) {\n      return UINT256_MAX;\n    }\n\n    return nReserve.mul(libConfig.mocPrecision).div(lB);\n  }\n\n /**\n    @dev Calculates Leverage from Coverage: Leverage = C / (C - 1)\n    @param cov Coverage [using mocPrecision]\n    @return Leverage [using mocPrecision]\n  */\n  function leverageFromCoverage(MocLibConfig storage libConfig, uint256 cov)\n  public view returns(uint256) {\n    if (cov == UINT256_MAX) {\n      return libConfig.mocPrecision;\n    }\n\n    if (cov <= libConfig.mocPrecision) {\n      return UINT256_MAX;\n    }\n\n    return cov.mul(libConfig.mocPrecision).div(cov.sub(libConfig.mocPrecision));\n  }\n\n /**\n    @dev Calculates Leverage: Leverage = nReserve / (nReserve - lB)\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param lB Locked ReserveTokens amount [using reservePrecision]\n    @return Leverage [using mocPrecision]\n  */\n  function leverage(MocLibConfig storage libConfig, uint256 nReserve,uint256 lB)\n  public view returns(uint256) {\n    if (lB == 0) {\n      return libConfig.mocPrecision;\n    }\n\n    if (nReserve <= lB) {\n      return UINT256_MAX;\n    }\n\n    return nReserve.mul(libConfig.mocPrecision).div(nReserve.sub(lB));\n  }\n\n  /**\n    @dev Price in ReserveTokens of the amount of StableTokens\n    @param amount Total ReserveTokens amount [using reservePrecision]\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @return Total value [using reservePrecision]\n  */\n  function stableTokensResTokensValue(\n    MocLibConfig storage libConfig, uint256 amount, uint256 peg, uint256 reservePrice\n  ) public view returns (uint256) {\n    require(reservePrice > 0, \"Price should be more than zero\");\n    require(libConfig.reservePrecision > 0, \"Precision should be more than zero\");\n    //Total = amount / satoshi price\n    //Total = amount / (reservePrice / precision)\n    // [RES] * [MOC] / [MOC]\n    uint256 stableTokenResTokenTotal = amount.mul(libConfig.mocPrecision).mul(peg).div(reservePrice);\n\n    return stableTokenResTokenTotal;\n  }\n\n  /**\n    @dev Price in ReserveTokens of the amount of RiskPros\n    @param riskProAmount amount of RiskPro [using mocPrecision]\n    @param riskProResTokenPrice RiskPro price in ReserveTokens [using reservePrecision]\n    @return Total value [using reservePrecision]\n  */\n  function riskProResTokensValuet(MocLibConfig storage libConfig, uint256 riskProAmount, uint256 riskProResTokenPrice)\n    public view returns (uint256) {\n    require(libConfig.reservePrecision > 0, \"Precision should be more than zero\");\n\n    // [MOC] * [RES] / [MOC] =  [RES]\n    uint256 riskProResTokenTotal = riskProAmount.mul(riskProResTokenPrice).div(libConfig.mocPrecision);\n\n    return riskProResTokenTotal;\n  }\n\n  /**\n    @dev Max amount of Docs to issue: MaxStableToken = ((nReserve*B)-(Cobj*B/Bcons*nStableToken*PEG))/(PEG*(Cobj*B/BCons-1))\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param cobj Target Coverage [using mocPrecision]\n    @param nStableToken StableToken amount [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param bCons ReserveTokens conservative price [using mocPrecision]\n    @return Total StableTokens amount [using mocPrecision]\n  */\n  function maxStableToken(\n    MocLibConfig storage libConfig, uint256 nReserve,\n    uint256 cobj, uint256 nStableToken, uint256 peg, uint256 reservePrice, uint256 bCons\n  ) public view returns(uint256) {\n    require(libConfig.reservePrecision > 0, \"Invalid Precision\");\n    require(libConfig.mocPrecision > 0, \"Invalid Precision\");\n\n    // If cobj is less than 1, just return zero\n    if (cobj < libConfig.mocPrecision)\n      return 0;\n\n    // Cobj * B / BCons\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 adjCobj = cobj.mul(reservePrice).div(bCons);\n\n    return maxStableTokenAux(libConfig, nReserve, adjCobj, nStableToken, peg, reservePrice);\n  }\n\n  function maxStableTokenAux(\n    MocLibConfig storage libConfig, uint256 nReserve, uint256 adjCobj, uint256 nStableToken, uint256 peg, uint256 reservePrice\n  ) internal view returns(uint256) {\n    // (nReserve*B)\n    // [RES] [MOC] [MOC] / [RES] = [MOC] [MOC]\n    uint256 firstOperand = nReserve.mul(reservePrice).mul(libConfig.mocPrecision).div(libConfig.reservePrecision);\n    // (adjCobj*nStableToken*PEG)\n    // [MOC] [MOC]\n    uint256 secOperand = adjCobj.mul(nStableToken).mul(peg);\n    // (PEG*(adjCobj-1)\n    // [MOC]\n    uint256 denom = adjCobj.sub(libConfig.mocPrecision).mul(peg);\n\n    if (firstOperand <= secOperand)\n      return 0;\n\n    // ([MOC][MOC] - [MOC][MOC]) / [MOC] = [MOC]\n    return (firstOperand.sub(secOperand)).div(denom);\n  }\n\n  /**\n    @dev Max amount of RiskPro to redeem: MaxRiskPro = ((nReserve*B)-(Cobj*nStableToken*PEG))/TPusd\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param cobj Target Coverage [using mocPrecision]\n    @param nStableToken Target Coverage [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param bCons ReserveTokens conservative price [using mocPrecision]\n    @param riskProUsdPrice riskProUsdPrice [using mocPrecision]\n    @return Total RiskPro amount [using mocPrecision]\n  */\n  function maxRiskPro(\n    MocLibConfig storage libConfig, uint256 nReserve, uint256 cobj,\n    uint256 nStableToken, uint256 peg, uint256 reservePrice, uint256 bCons, uint256 riskProUsdPrice\n  ) public view returns(uint256) {\n    require(libConfig.reservePrecision > 0, \"Invalid Precision\");\n    require(libConfig.mocPrecision > 0, \"Invalid Precision\");\n\n    // Cobj * reservePrice / BCons\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 adjCobj = cobj.mul(reservePrice).div(bCons);\n    // (nReserve * reservePrice)\n    // [RES] * [MOC] * [MOC] / [RES] = [MOC] [MOC]\n    uint256 firstOperand = nReserve.mul(reservePrice)\n      .mul(libConfig.mocPrecision)\n      .div(libConfig.reservePrecision);\n    // (adjCobj * nStableToken * PEG)\n    // [MOC] * [MOC]\n    uint256 secOperand = adjCobj.mul(nStableToken).mul(peg);\n\n    if (firstOperand <= secOperand)\n      return 0;\n\n    // ([MOC][MOC] - [MOC][MOC]) / [MOC] = [MOC]\n    return (firstOperand.sub(secOperand)).div(riskProUsdPrice);\n  }\n\n  /**\n    @dev Calculates the total ReserveTokens price of the amount of RiskPros\n    @param amount Amount of RiskPro [using mocPrecision]\n    @param riskProPrice RiskPro ReserveTokens Price [using reservePrecision]\n    @return RiskPro total value in ReserveTokens [using reservePrecision]\n  */\n  function totalRiskProInResTokens(\n    MocLibConfig storage libConfig, uint256 amount, uint256 riskProPrice\n  ) public view returns(uint256) {\n    // [RES] * [MOC] / [MOC] = [RES]\n    return riskProPrice.mul(amount).div(libConfig.mocPrecision);\n  }\n\n  /**\n    @dev Calculates the equivalent in StableTokens of the resTokensAmount\n    @param resTokensAmount ReserveTokens  amount [using reservePrecision]\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @return Equivalent StableToken amount [using mocPrecision]\n  */\n  function maxStableTokensWithResTokens(\n    MocLibConfig storage libConfig, uint256 resTokensAmount, uint256 reservePrice\n  ) public view returns(uint256) {\n    // [RES] * [MOC] / [RES] = [MOC]\n    return resTokensAmount.mul(reservePrice).div(libConfig.reservePrecision);\n  }\n\n  /**\n    @dev Calculates the equivalent in RiskPro of the resTokensAmount\n    @param resTokensAmount ReserveTokens amount [using reservePrecision]\n    @param riskProPrice RiskPro ReserveTokens price [using reservePrecision]\n    @return Equivalent RiskPro amount [using mocPrecision]\n  */\n  function maxRiskProWithResTokens(\n    MocLibConfig storage libConfig, uint256 resTokensAmount, uint256 riskProPrice\n  ) public view returns(uint256) {\n    if (riskProPrice == 0) {\n      return 0;\n    }\n\n    // [RES] * [MOC] / [RES]\n    return resTokensAmount.mul(libConfig.mocPrecision).div(riskProPrice);\n  }\n\n  /**\n    @dev Calculates the ResToken amount to move from C0 bucket to\n    an L bucket when a RiskProx minting occurs: toMove = resTokensAmount * (lev - 1)\n    @param resTokensAmount Total ReserveTokens amount [using reservePrecision]\n    @param lev L bucket leverage [using mocPrecision]\n    @return resTokens to move [using reservePrecision]\n  */\n  function bucketTransferAmount(\n    MocLibConfig storage libConfig, uint256 resTokensAmount, uint256 lev\n  ) public view returns(uint256) {\n    require(lev > libConfig.mocPrecision, \"Leverage should be more than 1\");\n\n    if (lev == UINT256_MAX || resTokensAmount == 0) {\n      return 0;\n    }\n\n    // (lev-1)\n    uint256 levSubOne = lev.sub(libConfig.mocPrecision);\n\n    // Intentionally avaoid SafeMath\n    // [RES] * [MOC]\n    uint256 transferAmount = resTokensAmount * levSubOne;\n    if (transferAmount / resTokensAmount != levSubOne)\n      return 0;\n\n    // [RES] * [MOC] / [MOC] = [RES]\n    return transferAmount.div(libConfig.mocPrecision);\n  }\n\n   /**\n    @dev Max amount of ReserveTokens allowed to be used to mint riskProx: MaxriskProx = nStableToken/ (PEG*B*(lev-1))\n    @param nStableToken number of StableToken [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param lev leverage [using mocPrecision]\n    @return Max riskProx ReserveTokens value [using reservePrecision]\n  */\n  function maxRiskProxResTokenValue(\n    MocLibConfig storage libConfig, uint256 nStableToken, uint256 peg, uint256 reservePrice, uint256 lev\n  ) public view returns(uint256)  {\n    require(libConfig.reservePrecision > 0, \"Invalid Precision\");\n    require(libConfig.mocPrecision > 0, \"Invalid Precision\");\n\n    if (lev <= libConfig.mocPrecision) {\n      return 0;\n    }\n    // (lev-1)\n    // [MOC]\n    uint256 levSubOne = lev.sub(libConfig.mocPrecision);\n\n    // PEG * ResTokenPrice\n    // [MOC]\n    uint256 pegTimesPrice = peg.mul(reservePrice);\n\n    // This intentionally avoid using safeMath to handle overflow case\n    // PEG * ResTokenPrice * (lev - 1)\n    // [MOC] * [MOC]\n    uint256 dividend = pegTimesPrice * levSubOne;\n\n    if (dividend / pegTimesPrice != levSubOne)\n      return 0; // INFINIT dividend means 0\n\n    // nStableToken adjusted with precisions\n    // [MOC] [RES]\n    uint256 divider = nStableToken.mul(libConfig.reservePrecision);\n\n    // [MOC] [RES] [MOC] / [MOC] [MOC]\n    return divider.mul(libConfig.mocPrecision).div(dividend);\n  }\n\n  /**\n    @dev Calculates the equivalent in MoC of the reserve token\n    @param resTokensAmount Total ReserveTokens amount\n    @param reservePrice ReserveTokens price\n    @param mocPrice MoC price\n    @return Equivalent MoC amount\n  */\n  function maxMoCWithReserveToken(\n    MocLibConfig storage /*libConfig*/, uint256 resTokensAmount, uint256 reservePrice, uint256 mocPrice\n  ) public pure returns(uint256) {\n    return reservePrice.mul(resTokensAmount).div(mocPrice);\n  }\n\n  /**\n    @dev Calculates the equivalent in reserve token of the MoC amount\n    @param amount MoC amount\n    @param reservePrice ReserveTokens price\n    @param mocPrice MoC price\n    @return Equivalent ReserveToken amount\n  */\n  function mocReserveTokenValue(\n    MocLibConfig storage /*libConfig*/, uint256 amount, uint256 reservePrice, uint256 mocPrice\n  ) public pure returns(uint256) {\n    require(reservePrice > 0,\"ReserveToken price should be more than zero\");\n    require(mocPrice > 0,\"MoC price should be more than zero\");\n\n    uint256 mocReserveTokenTotal = amount.mul(mocPrice).div(reservePrice);\n\n    return mocReserveTokenTotal;\n  }\n\n  /**\n    @dev Rounding product adapted from DSMath but with custom precision\n    @param x Multiplicand\n    @param y Multiplier\n    @return Product\n  */\n  function mulr(uint x, uint y, uint256 precision) internal pure returns (uint z) {\n    return x.mul(y).add(precision.div(2)).div(precision);\n  }\n\n  /**\n    @dev Potentiation by squaring adapted from DSMath but with custom precision\n    @param x Base\n    @param n Exponent\n    @return power\n  */\n  function pow(uint256 x, uint256 n, uint256 precision) internal pure returns (uint z) {\n    uint256 x2 = x;\n    z = n % 2 != 0 ? x : precision;\n\n    for (n /= 2; n != 0; n /= 2) {\n      x2 = mulr(x2, x2, precision);\n\n      if (n % 2 != 0) {\n        z = mulr(z, x2, precision);\n      }\n    }\n  }\n}\n\n\n// Dependency file: contracts/MoCLibConnection.sol\n\n// pragma solidity 0.5.8;\n\n// import \"contracts/MoCHelperLib.sol\";\n\n/**\n  @dev Interface with MocHelperLib\n */\ncontract MoCLibConnection {\n  using MoCHelperLib for MoCHelperLib.MocLibConfig;\n  MoCHelperLib.MocLibConfig internal mocLibConfig;\n\n  /*\n  * Precision getters\n  */\n  function getMocPrecision() public view returns(uint256) {\n    return mocLibConfig.mocPrecision;\n  }\n\n  function getReservePrecision() public view returns(uint256) {\n    return mocLibConfig.reservePrecision;\n  }\n\n  function getDayPrecision() public view returns(uint256) {\n    return mocLibConfig.dayPrecision;\n  }\n\n  function initializePrecisions() internal {\n    mocLibConfig = MoCHelperLib.MocLibConfig({\n      reservePrecision: 10 ** 18,\n      mocPrecision: 10 ** 18,\n      dayPrecision: 1\n    });\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/base/MoCWhitelist.sol\n\n// pragma solidity 0.5.8;\n\n/**\n  @dev Provides access control between all MoC Contracts\n */\ncontract MoCWhitelist {\n  mapping(address => bool) whitelist;\n\n  /**\n   * @dev Check if an account is whitelisted\n   * @return Bool\n   */\n  function isWhitelisted(address account)\n    public\n    view\n    returns (bool)\n  {\n    require(account != address(0), \"Account must not be 0x0\");\n    return whitelist[account];\n  }\n\n  /**\n   * @dev Add account to whitelist\n   */\n  function add(address account) internal {\n    require(account != address(0), \"Account must not be 0x0\");\n    require(!isWhitelisted(account), \"Account not allowed to add accounts into white list\");\n    whitelist[account] = true;\n  }\n\n  /**\n   * @dev Remove account from whitelist\n   */\n  function remove(address account) internal {\n    require(account != address(0), \"Account must not be 0x0\");\n    require(isWhitelisted(account), \"Account is not allowed to remove address from the white list\");\n\n    whitelist[account] = false;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/base/MoCConnector.sol\n\n// pragma solidity 0.5.8;\n\n// import \"zos-lib/contracts/Initializable.sol\";\n\n// import \"contracts/base/MoCWhitelist.sol\";\n\n/**\n  @dev Provides access control between all MoC Contracts\n */\ncontract MoCConnector is MoCWhitelist, Initializable {\n  // References\n  address payable public moc;\n  address public stableToken;\n  address public riskProToken;\n  address public riskProxManager;\n  address public mocState;\n  address public mocConverter;\n  address public mocSettlement;\n  address public mocExchange;\n  address public mocInrate;\n  /** DEPRECATED mocBurnout **/\n  address public mocBurnout;\n  address public reserveToken;\n\n  bool internal initialized;\n\n  /**\n    @dev Initializes the contract\n    @param mocAddress MoC contract address\n    @param stableTokenAddress Stable token contract address\n    @param riskProAddress RiskPro token contract address\n    @param riskProxAddress RiskProxManager contract address\n    @param stateAddress MoCState contract address\n    @param settlementAddress MoCSettlement contract address\n    @param converterAddress MoCConverter contract address\n    @param exchangeAddress MoCExchange contract address\n    @param inrateAddress MoCInrate contract address\n    @param burnoutBookAddress (DEPRECATED) MoCBurnout contract address. DO NOT USE.\n    @param reserveTokenAddress Reserve token contract address\n  */\n  function initialize(\n    address payable mocAddress,\n    address stableTokenAddress,\n    address riskProAddress,\n    address riskProxAddress,\n    address stateAddress,\n    address settlementAddress,\n    address converterAddress,\n    address exchangeAddress,\n    address inrateAddress,\n    address burnoutBookAddress,\n    address reserveTokenAddress\n  ) public initializer {\n    moc = mocAddress;\n    stableToken = stableTokenAddress;\n    riskProToken = riskProAddress;\n    riskProxManager = riskProxAddress;\n    mocState = stateAddress;\n    mocSettlement = settlementAddress;\n    mocConverter = converterAddress;\n    mocExchange = exchangeAddress;\n    mocInrate = inrateAddress;\n    mocBurnout = burnoutBookAddress;\n    reserveToken = reserveTokenAddress;\n\n    // Add to Whitelist\n    add(mocAddress);\n    add(stableTokenAddress);\n    add(riskProAddress);\n    add(riskProxAddress);\n    add(stateAddress);\n    add(settlementAddress);\n    add(converterAddress);\n    add(exchangeAddress);\n    add(inrateAddress);\n    add(burnoutBookAddress);\n    add(reserveTokenAddress);\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/base/MoCConstants.sol\n\n// pragma solidity 0.5.8;\n\n/**\n * @dev Defines special constants to use along all the MoC System\n */\ncontract MoCConstants {\n  bytes32 constant public BUCKET_X2 = \"X2\";\n  bytes32 constant public BUCKET_C0 = \"C0\";\n}\n\n// Dependency file: contracts/base/MoCBase.sol\n\n// pragma solidity 0.5.8;\n\n// import \"zos-lib/contracts/Initializable.sol\";\n\n// import \"contracts/base/MoCConnector.sol\";\n// import \"contracts/base/MoCConstants.sol\";\n\n/**\n  @dev General usefull modifiers and functions\n */\ncontract MoCBase is MoCConstants, Initializable {\n  // Contracts\n  MoCConnector public connector;\n\n  bool internal initialized;\n\n  function initializeBase(address connectorAddress) internal initializer {\n    connector = MoCConnector(connectorAddress);\n  }\n\n  modifier onlyWhitelisted(address account) {\n    require(connector.isWhitelisted(account), \"Address is not whitelisted\");\n    _;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/interface/IMoC.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoC {\n    function sendToAddress(address receiver, uint256 tokenAmount) external returns(bool);\n}\n\n// Dependency file: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n// pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Dependency file: contracts/interface/IMoCExchange.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoCExchange {\n    function getMoCTokenBalance(address owner, address spender) external view\n    returns (uint256 mocBalance, uint256 mocAllowance);\n\n    function mintRiskPro(address account, uint256 reserveAmount, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemRiskPro(address account, uint256 riskProAmount, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function mintStableToken(address account, uint256 reserveToMint, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemRiskProx(address payable account, bytes32 bucket, uint256 riskProxAmount, address vendorAccount)\n    external returns (uint256, uint256, uint256, uint256, uint256);\n\n    function mintRiskProx(address payable account, bytes32 bucket, uint256 reserveToMint, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemFreeStableToken(address account, uint256 stableTokenAmount, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemAllStableToken(address origin, address payable destination) external\n    returns (uint256);\n\n    function convertToMoCPrice(uint256 reserveAmount) external view returns (uint256, uint256, uint256);\n\n    function forceRedeemRiskProx(bytes32 bucket, address payable account, uint256 riskProxAmount, uint256 riskProxPrice)\n    external returns (bool);\n\n    function redeemStableTokenWithPrice(address payable userAddress, uint256 amount, uint256 reservePrice) external\n    returns (bool, uint256);\n}\n\n// Dependency file: contracts/interface/IMoCState.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoCState {\n\n     /******STATE MACHINE*********/\n    enum States {\n        // State 0\n        Liquidated,\n        // State 1\n        RiskProDiscount,\n        // State 2\n        BelowCobj,\n        // State 3\n        AboveCobj\n    }\n\n\n    function addToReserves(uint256 reserveAmount) external;\n\n    function substractFromReserves(uint256 reserveAmount) external;\n\n    function coverage(bytes32 bucket) external view returns(uint256);\n\n    function getReservesRemainder() external view returns(uint256);\n\n    function liq() external view returns(uint256);\n\n    function state() external view returns(States);\n\n    function peg() external view returns(uint256);\n\n    function dayBlockSpan() external view returns(uint256);\n\n    function getReserveTokenPrice() external view returns(uint256);\n\n    function getMoCPrice() external view returns(uint256);\n\n    function getProtected() external view returns(uint256);\n\n    function globalCoverage() external view returns(uint256);\n\n    function getMoCVendors() external view returns(address);\n\n    function getMoCToken() external view returns(address);\n\n    function nextState() external;\n\n    function maxRiskProWithDiscount() external view returns(uint256);\n\n    function absoluteMaxRiskPro() external view returns(uint256);\n\n    function absoluteMaxStableToken() external view returns(uint256);\n\n    function freeStableToken() external view returns(uint256);\n\n    function riskProTecPrice() external view returns(uint256);\n\n    function riskProSpotDiscountRate() external view returns(uint256);\n\n    function riskProDiscountPrice() external view returns(uint256);\n\n    function bucketRiskProTecPrice(bytes32 bucket) external view returns(uint256);\n\n    function currentAbundanceRatio() external view returns(uint256);\n\n    function abundanceRatio(uint256 stableToken0) external view returns(uint256);\n\n    function daysToSettlement() external view returns(uint256);\n\n    function leverage(bytes32 bucket) external view returns(uint256);\n\n    function getBucketNReserve(bytes32 bucket) external view returns(uint256);\n\n    function getLiquidationPrice() external view returns(uint256);\n\n    function maxRiskProxResTokenValue(bytes32 bucket) external view returns(uint256);\n\n    function bucketRiskProTecPriceHelper(bytes32 bucket) external view returns(uint256);\n}\n\n// Dependency file: contracts/interface/IMoCVendors.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoCVendors {\n    function resetTotalPaidInMoC() external;\n\n    function getIsActive(address account) external view\n    returns (bool);\n\n    function getTotalPaidInMoC(address account) external view\n    returns (uint256);\n\n    function getStaking(address account) external view\n    returns (uint256);\n\n    function getMarkup(address account) external view\n    returns (uint256);\n\n    function updatePaidMarkup(address account, uint256 mocAmount, uint256 reserveAmount, uint256 totalMoCAmount) external;\n}\n\n// Root file: contracts/MoCVendors.sol\n\npragma solidity 0.5.8;\n\n// import \"openzeppelin-solidity/contracts/math/Math.sol\";\n// import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n// import \"moc-governance/contracts/Governance/Governed.sol\";\n// import \"contracts/MoCLibConnection.sol\";\n// import \"contracts/base/MoCBase.sol\";\n// import \"contracts/interface/IMoC.sol\";\n// import \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\n// import \"contracts/interface/IMoCExchange.sol\";\n// import \"contracts/interface/IMoCState.sol\";\n// import \"contracts/interface/IMoCVendors.sol\";\n\ncontract MoCVendorsEvents {\n  event VendorRegistered(\n    address account,\n    uint256 markup\n  );\n  event VendorUpdated(\n    address account,\n    uint256 markup\n  );\n  event VendorUnregistered(\n    address account\n  );\n  event VendorStakeAdded(\n    address account,\n    uint256 staking\n  );\n  event VendorStakeRemoved(\n    address account,\n    uint256 staking\n  );\n  event TotalPaidInMoCReset(\n    address account\n  );\n  event VendorGuardianAddressChanged (\n    address vendorGuardianAddress\n  );\n}\n\ncontract MoCVendors is MoCVendorsEvents, MoCBase, MoCLibConnection, Governed, IMoCVendors {\n  using Math for uint256;\n  using SafeMath for uint256;\n\n  // Structs\n  struct VendorDetails {\n    bool isActive;\n    uint256 markup;\n    uint256 totalPaidInMoC;\n    uint256 staking; // temporarily retained\n    uint256 paidMoC;\n    uint256 paidReserveToken;\n  }\n\n  // Contracts\n  IMoC internal moc;\n  IMoCState internal mocState;\n  IMoCExchange internal mocExchange;\n\n  // Constants\n  uint8 public constant VENDORS_LIST_ARRAY_MAX_LENGTH = 100;\n  uint256 public constant VENDOR_MAX_MARKUP = 10000000000000000; // 0.01 = 1%\n\n  // Variables\n  address public vendorGuardianAddress;\n  mapping(address => VendorDetails) public vendors;\n  address[] public vendorsList;\n\n  /**\n    @dev Initializes the contract\n    @param connectorAddress MoCConnector contract address\n    @param _governor Governor contract address\n    @param _vendorGuardianAddress Address which will be authorized to register and unregister vendors.\n  */\n  function initialize(\n    address connectorAddress,\n    address _governor,\n    address _vendorGuardianAddress\n  ) public initializer {\n    initializePrecisions();\n    initializeBase(connectorAddress);\n    initializeContracts();\n    initializeValues(_governor, _vendorGuardianAddress);\n  }\n\n  /**\n    @dev Gets the count of active registered vendors\n    @return Amount of active registered vendors\n  */\n  function getVendorsCount() public view returns(uint vendorsCount) {\n    return vendorsList.length;\n  }\n\n  /**\n    @dev Allows to register a vendor\n    @param account Vendor address\n    @param markup Markup which vendor will perceive from mint/redeem operations\n    @return true if vendor was registered successfully; otherwise false\n  */\n  function registerVendor(address account, uint256 markup) public onlyVendorGuardian() returns (bool isActive) {\n    require(account != address(0), \"Vendor account must not be 0x0\");\n    require(markup <= VENDOR_MAX_MARKUP, \"Vendor markup threshold exceeded\");\n\n    if (vendors[account].isActive == false) {\n      // Change the error message according to the value of the VENDORS_LIST_ARRAY_MAX_LENGTH constant\n      require(vendorsList.length < VENDORS_LIST_ARRAY_MAX_LENGTH, \"vendorsList length out of range\");\n\n      // Map vendor details to vendor address\n      vendors[account].isActive = true;\n      vendors[account].markup = markup;\n\n      vendorsList.push(account);\n\n      emit VendorRegistered(account, markup);\n    } else if (vendors[account].markup != markup) {\n      vendors[account].markup = markup;\n\n      emit VendorUpdated(account, markup);\n    }\n\n    return vendors[account].isActive;\n  }\n\n  /**\n    @dev Allows to unregister a vendor\n    @param account Vendor address\n    @return false if vendor was unregistered successfully; otherwise false\n  */\n  function unregisterVendor(address account) public onlyVendorGuardian() returns (bool isActive) {\n    uint8 i = 0;\n    while (i < vendorsList.length && vendorsList[i] != account) {\n      i++;\n    }\n    // If vendor is found, then unregister it\n    if (i < vendorsList.length) {\n      vendors[account].isActive = false;\n      vendorsList[i] = vendorsList[vendorsList.length - 1];\n      delete vendorsList[vendorsList.length - 1];\n      vendorsList.length--;\n\n      emit VendorUnregistered(account);\n      return false;\n    }\n\n    return vendors[account].isActive;\n  }\n\n  /**\n    @dev Allows an active vendor (msg.sender) to add staking\n    @param staking Staking the vendor wants to add\n  */\n  function addStake(uint256 staking) public onlyActiveVendor() {\n    IERC20 mocToken = IERC20(mocState.getMoCToken());\n    (uint256 mocBalance, uint256 mocAllowance) = mocExchange.getMoCTokenBalance(msg.sender, address(this));\n\n    require(staking > 0, \"Staking should be greater than 0\");\n    require(staking <= mocBalance && staking <= mocAllowance, \"MoC balance or MoC allowance are not enough to add staking\");\n\n    mocToken.transferFrom(msg.sender, address(this), staking);\n    vendors[msg.sender].staking = vendors[msg.sender].staking.add(staking);\n\n    emit VendorStakeAdded(msg.sender, staking);\n  }\n\n  /**\n    @dev Allows an active vendor (msg.sender) to remove staking\n    @param staking Staking the vendor wants to remove\n  */\n  function removeStake(uint256 staking) public onlyActiveVendor() {\n    IERC20 mocToken = IERC20(mocState.getMoCToken());\n\n    require(staking > 0, \"Staking should be greater than 0\");\n    require(staking <= vendors[msg.sender].totalPaidInMoC, \"Vendor total paid is not enough\");\n\n    mocToken.transfer(msg.sender, staking);\n    vendors[msg.sender].staking = vendors[msg.sender].staking.sub(staking);\n\n    emit VendorStakeRemoved(msg.sender, staking);\n  }\n\n  /**\n    @dev Allows to update paid markup to vendor\n    @param account Vendor address\n    @param mocAmount paid markup in MoC\n    @param resTokenAmount paid markup in ReserveToken\n    @param totalMoCAmount total paid in MoC\n  */\n  function updatePaidMarkup(address account, uint256 mocAmount, uint256 resTokenAmount, uint256 totalMoCAmount)\n  public\n  onlyWhitelisted(msg.sender) {\n    vendors[account].totalPaidInMoC = vendors[account].totalPaidInMoC.add(totalMoCAmount);\n    vendors[account].paidMoC = vendors[account].paidMoC.add(mocAmount);\n    vendors[account].paidReserveToken = vendors[account].paidReserveToken.add(resTokenAmount);\n  }\n\n  /**\n    @dev Gets if a vendor is active\n    @param account Vendor address\n    @return true if vendor is active; false otherwise\n  */\n  function getIsActive(address account) public view\n  returns (bool) {\n    return vendors[account].isActive;\n  }\n\n  /**\n    @dev Gets vendor markup\n    @param account Vendor address\n    @return Vendor markup\n  */\n  function getMarkup(address account) public view\n  returns (uint256) {\n    return vendors[account].markup;\n  }\n\n  /**\n    @dev Gets vendor total paid in MoC\n    @param account Vendor address\n    @return Vendor total paid in MoC\n  */\n  function getTotalPaidInMoC(address account) public view\n  returns (uint256) {\n    return vendors[account].totalPaidInMoC;\n  }\n\n  /**\n    @dev Gets vendor staking\n    @param account Vendor address\n    @return Vendor staking\n  */\n  function getStaking(address account) public view\n  returns (uint256) {\n    return vendors[account].staking;\n  }\n\n  /**\n    @dev Gets vendor paid in MoC\n    @param account Vendor address\n    @return Vendor paid in MoC\n  */\n  function getPaidMoC(address account) public view\n  returns (uint256) {\n    return vendors[account].paidMoC;\n  }\n\n  /**\n    @dev Gets vendor paid in ReserveToken\n    @param account Vendor address\n    @return Vendor total paid in ReserveToken\n  */\n  function getPaidReserveToken(address account) public view\n  returns (uint256) {\n    return vendors[account].paidReserveToken;\n  }\n\n  /**\n    @dev Allows to reset all active vendor's total paid in MoC during settlement\n  */\n  function resetTotalPaidInMoC() public onlyWhitelisted(msg.sender) {\n    // Triggered by settlement\n    for (uint8 i = 0; i < vendorsList.length; i++) {\n      address account = vendorsList[i];\n\n      // Reset only if vendor is active\n      if (vendors[account].isActive == true) {\n        vendors[account].totalPaidInMoC = 0;\n\n        emit TotalPaidInMoCReset(account);\n      }\n    }\n  }\n\n  /**\n    @dev Returns the address is authorized to register and unregister vendors.\n  */\n  function getVendorGuardianAddress() public view returns(address) {\n    return vendorGuardianAddress;\n  }\n\n  /**\n    @dev Sets the address which will be authorized to register and unregister vendors.\n    @param _vendorGuardianAddress Address which will be authorized to register and unregister vendors.\n  */\n  function setVendorGuardianAddress(address _vendorGuardianAddress) public onlyAuthorizedChanger() {\n    setVendorGuardianAddressInternal(_vendorGuardianAddress);\n  }\n\n  function initializeContracts() internal {\n    moc = IMoC(connector.moc());\n    mocState = IMoCState(connector.mocState());\n    mocExchange = IMoCExchange(connector.mocExchange());\n  }\n\n  function initializeValues(address _governor, address _vendorGuardianAddress) internal {\n    governor = IGovernor(_governor);\n    setVendorGuardianAddressInternal(_vendorGuardianAddress);\n  }\n\n  /**\n    @dev Sets the address which will be authorized to register and unregister vendors.\n    @param _vendorGuardianAddress Address which will be authorized to register and unregister vendors.\n  */\n  function setVendorGuardianAddressInternal(address _vendorGuardianAddress) internal {\n    require(_vendorGuardianAddress != address(0), \"vendorGuardianAddress must not be 0x0\");\n\n    vendorGuardianAddress = _vendorGuardianAddress;\n\n    emit VendorGuardianAddressChanged(vendorGuardianAddress);\n  }\n\n  /**\n    @dev Checks if vendor (msg.sender) is active\n  */\n  modifier onlyActiveVendor() {\n    require(vendors[msg.sender].isActive == true, \"Vendor is inexistent or inactive\");\n    _;\n  }\n\n  /**\n    @dev Checks if address is allowed to call function\n  */\n  modifier onlyVendorGuardian() {\n    require(msg.sender == vendorGuardianAddress, \"Caller is not vendor guardian address\");\n    _;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n",
    "imports": [
        {
            "name": "MoCVendors.sol",
            "contents": "// Dependency file: openzeppelin-solidity/contracts/math/Math.sol\n\n// pragma solidity ^0.5.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow, so we distribute\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n    }\n}\n\n\n// Dependency file: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n// pragma solidity ^0.5.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n}\n\n\n// Dependency file: moc-governance/contracts/Governance/ChangeContract.sol\n\n// pragma solidity 0.5.8;\n\n/**\n  @title ChangeContract\n  @notice This interface is the one used by the governance system.\n  @dev If you plan to do some changes to a system governed by this project you should write a contract\n  that does those changes, like a recipe. This contract MUST not have ANY kind of public or external function\n  that modifies the state of this ChangeContract, otherwise you could run into front-running issues when the governance\n  system is fully in place.\n */\ninterface ChangeContract {\n\n  /**\n    @notice Override this function with a recipe of the changes to be done when this ChangeContract\n    is executed\n   */\n  function execute() external;\n}\n\n\n// Dependency file: moc-governance/contracts/Governance/IGovernor.sol\n\n// pragma solidity 0.5.8;\n\n// import \"moc-governance/contracts/Governance/ChangeContract.sol\";\n\n/**\n  @title Governor\n  @notice Governor interface. This functions should be overwritten to\n  enable the comunnication with the rest of the system\n  */\ninterface IGovernor{\n\n  /**\n    @notice Function to be called to make the changes in changeContract\n    @dev This function should be protected somehow to only execute changes that\n    benefit the system. This decision process is independent of this architechture\n    therefore is independent of this interface too\n    @param changeContract Address of the contract that will execute the changes\n   */\n  function executeChange(ChangeContract changeContract) external;\n\n  /**\n    @notice Function to be called to make the changes in changeContract\n    @param _changer Address of the contract that will execute the changes\n   */\n  function isAuthorizedChanger(address _changer) external view returns (bool);\n}\n\n\n// Dependency file: zos-lib/contracts/Initializable.sol\n\n// pragma solidity >=0.4.24 <0.6.0;\n\n\n/**\n * @title Initializable\n *\n * @dev Helper contract to support initializer functions. To use it, replace\n * the constructor with a function that has the `initializer` modifier.\n * WARNING: Unlike constructors, initializer functions must be manually\n * invoked. This applies both to deploying an Initializable contract, as well\n * as extending an Initializable contract via inheritance.\n * WARNING: When used with inheritance, manual care must be taken to not invoke\n * a parent initializer twice, or ensure that all initializers are idempotent,\n * because this is not dealt with automatically as with constructors.\n */\ncontract Initializable {\n\n  /**\n   * @dev Indicates that the contract has been initialized.\n   */\n  bool private initialized;\n\n  /**\n   * @dev Indicates that the contract is in the process of being initialized.\n   */\n  bool private initializing;\n\n  /**\n   * @dev Modifier to use in the initializer function of a contract.\n   */\n  modifier initializer() {\n    require(initializing || isConstructor() || !initialized, \"Contract instance has already been initialized\");\n\n    bool isTopLevelCall = !initializing;\n    if (isTopLevelCall) {\n      initializing = true;\n      initialized = true;\n    }\n\n    _;\n\n    if (isTopLevelCall) {\n      initializing = false;\n    }\n  }\n\n  /// @dev Returns true if and only if the function is running in the constructor\n  function isConstructor() private view returns (bool) {\n    // extcodesize checks the size of the code stored in an address, and\n    // address returns the current address. Since the code is still not\n    // deployed when running a constructor, any checks on its code size will\n    // yield zero, making it an effective way to detect if a contract is\n    // under construction or not.\n    uint256 cs;\n    assembly { cs := extcodesize(address) }\n    return cs == 0;\n  }\n\n  // Reserved storage space to allow for layout changes in the future.\n  uint256[50] private ______gap;\n}\n\n\n// Dependency file: moc-governance/contracts/Governance/Governed.sol\n\n// pragma solidity 0.5.8;\n\n// import \"moc-governance/contracts/Governance/IGovernor.sol\";\n// import \"zos-lib/contracts/Initializable.sol\";\n\n/**\n  @title Governed\n  @notice Base contract to be inherited by governed contracts\n  @dev This contract is not usable on its own since it does not have any _productive useful_ behaviour\n  The only purpose of this contract is to define some useful modifiers and functions to be used on the\n  governance aspect of the child contract\n  */\ncontract Governed is Initializable {\n\n  /**\n    @notice The address of the contract which governs this one\n   */\n  IGovernor public governor;\n\n  string constant private NOT_AUTHORIZED_CHANGER = \"not_authorized_changer\";\n\n  /**\n    @notice Modifier that protects the function\n    @dev You should use this modifier in any function that should be called through\n    the governance system\n   */\n  modifier onlyAuthorizedChanger() {\n    require(governor.isAuthorizedChanger(msg.sender), NOT_AUTHORIZED_CHANGER);\n    _;\n  }\n\n  /**\n    @notice Initialize the contract with the basic settings\n    @dev This initialize replaces the constructor but it is not called automatically.\n    It is necessary because of the upgradeability of the contracts\n    @param _governor Governor address\n   */\n  function initialize(IGovernor _governor) public initializer {\n    governor = _governor;\n  }\n\n  /**\n    @notice Change the contract's governor. Should be called through the old governance system\n    @param newIGovernor New governor address\n   */\n  function changeIGovernor(IGovernor newIGovernor) public onlyAuthorizedChanger {\n    governor = newIGovernor;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/MoCHelperLib.sol\n\n// pragma solidity 0.5.8;\n\n// import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\nlibrary MoCHelperLib {\n\n  struct MocLibConfig {\n    uint256 reservePrecision;\n    uint256 dayPrecision;\n    uint256 mocPrecision;\n  }\n\n  using SafeMath for uint256;\n\n  uint256 constant UINT256_MAX = ~uint256(0);\n\n  /**\n    @dev Returns max uint256 value constant.\n    @return max uint256 value constant\n  */\n  function getMaxInt(MocLibConfig storage /*config*/) public pure returns(uint256) {\n    return UINT256_MAX;\n  }\n\n  /**\n    @dev Calculates average interest using integral function: T =  Rate = a * (x ** b) + c\n    @param tMax maxInterestRate [using mocPrecision]\n    @param power factor [using noPrecision]\n    @param tMin minInterestRate C0 stableToken amount [using mocPrecision]\n    @param abRat1 initial abundance ratio [using mocPrecision]\n    @param abRat2 final abundance ratio [using mocPrecision]\n    @return average interest rate [using mocPrecision]\n  */\n  function inrateAvg(MocLibConfig storage config, uint256 tMax, uint256 power, uint256 tMin, uint256 abRat1, uint256 abRat2)\n  public view returns(uint256) {\n    require(tMax > tMin, \"Max inrate should be bigger than Min inrate\");\n    uint256 abRat1Comp = config.mocPrecision.sub(abRat1);\n    uint256 abRat2Comp = config.mocPrecision.sub(abRat2);\n\n    if (abRat1 == abRat2) {\n      return potential(config, tMax, power, tMin, abRat1Comp);\n    }\n    else if (abRat2 < abRat1) {\n      return avgInt(config, tMax, power, tMin, abRat1Comp, abRat2Comp);\n    }\n    else {\n      return avgInt(config, tMax, power, tMin, abRat2Comp, abRat1Comp);\n    }\n  }\n\n  /**\n    @dev Calculates spot interest rate that RiskProx owners should pay to RiskPro owners: Rate = tMax * (abRatio ** power) + tMin\n    @param tMin min interest rate [using mocPrecision]\n    @param power power to use in the formula [using NoPrecision]\n    @param tMax max interest rate [using mocPrecision]\n    @param abRatio bucket C0  abundance Ratio [using mocPrecision]\n\n   */\n  function spotInrate(\n    MocLibConfig storage config, uint256 tMax, uint256 power, uint256 tMin, uint256 abRatio\n  ) public view returns(uint256) {\n    uint256 abRatioComp = config.mocPrecision.sub(abRatio);\n\n    return potential(config, tMax, power, tMin, abRatioComp);\n  }\n\n  /**\n    @dev Calculates potential interests function with given parameters: Rate = a * (x ** b) + c\n    @param a maxInterestRate [using mocPrecision]\n    @param b factor [using NoPrecision]\n    @param c minInterestRate C0 stableToken amount [using mocPrecision]\n    @param value global stableToken amount [using mocPrecision]\n  */\n  function potential(MocLibConfig storage config, uint256 a, uint256 b, uint256 c, uint256 value)\n  public view returns(uint256) {\n    // value ** b\n    // [MOC] ** [] = [MOC]\n    uint256 aux1 = pow(value, b, config.mocPrecision);\n    // (a * aux1) + c\n    // [MOC] [MOC] / [MOC] + [MOC] = [MOC]\n    return a.mul(aux1).div(config.mocPrecision).add(c);\n  }\n\n    /**\n    @dev Calculates average of the integral function:\n     T = (\n              (c * xf + ((a * (xf ** (b + 1))) / (b + 1))) -\n              (c * xi + ((a * (xi ** (b + 1))) / (b + 1)))\n             ) / (xf - xi)\n    @param a maxInterestRate [using mocPrecision]\n    @param b factor [using NoPrecision]\n    @param c minInterestRate C0 stableToken amount [using mocPrecision]\n    @param value1 value to put in the function [using mocPrecision]\n    @param value2 value to put in the function [using mocPrecision]\n    @return average interest rate [using mocPrecision]\n   */\n  function avgInt(MocLibConfig storage config, uint256 a, uint256 b, uint256 c, uint256 value1, uint256 value2)\n  public view returns(uint256) {\n    // value2 - value1\n    // [MOC]\n    uint256 diff = value2.sub(value1);\n    // ((c * (1 - value1) + ((a * ((1 - value1) ** (b + 1))) / (b + 1)))\n    uint256 intV1 = integral(config, a, b, c, value1);\n    // ((c * (1 - value2) + ((a * ((1 - value2) ** (b + 1))) / (b + 1)))\n    uint256 intV2 = integral(config,  a, b, c, value2);\n    // (secOp - first) / diff\n    // ([MOC][MOC] - [MOC][MOC]) / [MOC] = [MOC]\n    return intV2.sub(intV1).div(diff);\n  }\n\n  /**\n    @dev Calculates integral of the exponential function: T = c * (value) + (a * value ** (b + 1)) / (b + 1))\n    @param a maxInterestRate [using mocPrecision]\n    @param b factor [using NoPrecision]\n    @param c minInterestRate C0 stableToken amount [using mocPrecision]\n    @param value value to put in the function [using mocPrecision]\n    @return integration result [using mocPrecision]\n  */\n  function integral(MocLibConfig storage config, uint256 a, uint256 b, uint256 c, uint256 value)\n  public view returns(uint256) {\n    // b + 1\n    // [NONE]\n    uint256 b2 = b.add(1);\n    // c * value\n    // [MOC][MOC]\n    uint256 firstOp = c.mul(value);\n    // [MOC]\n    uint256 pow = pow(value, b2, config.mocPrecision);\n    // (a * value ** b2) / b2)\n    // [MOC][MOC]\n    uint256 secOp = a.mul(pow).div(b2);\n    // (firstOp + secOp)\n    // [MOC][MOC] + [MOC][MOC] = [MOC][MOC]\n    return firstOp.add(secOp);\n  }\n\n  /**\n  * @dev Relation between stableTokens in bucket 0 and StableToken total supply\n  * @param stableToken0 stableToken count in bucket 0 [using mocPrecision]\n  * @param stableTokent total stableToken supply [using mocPrecision]\n  * @return abundance ratio [using mocPrecision]\n  */\n  function abundanceRatio(MocLibConfig storage config, uint256 stableToken0, uint256 stableTokent)\n  public view returns(uint256) {\n    if (stableTokent == 0) {\n      return config.mocPrecision;\n    }\n    // [DOC] [MOC] / [DOC] = [MOC]\n    return stableToken0.mul(config.mocPrecision).div(stableTokent);\n  }\n\n  /**\n    @dev Returns the Ratio to apply to RiskPro Price in discount situations: SpotDiscountRate = TPD * (utpdu - cob) / (uptdu -liq)\n    @param riskProLiqDiscountRate Discount rate applied at Liquidation level coverage [using mocPrecision]\n    @param liq Liquidation coverage threshold [using mocPrecision]\n    @param utpdu Discount coverage threshold [using mocPrecision]\n    @param cov Actual global Coverage threshold [using mocPrecision]\n    @return Spot discount rate [using mocPrecision]\n  */\n  function riskProSpotDiscountRate(\n    MocLibConfig storage libConfig, uint256 riskProLiqDiscountRate,\n    uint256 liq, uint256 utpdu, uint256 cov\n  ) public view returns(uint256) {\n    require(riskProLiqDiscountRate < libConfig.mocPrecision, \"Discount rate should be lower than 1\");\n\n    if (cov >= utpdu) {\n      return 0;\n    }\n\n    // utpdu - liq\n    // [MOC] - [MOC] = [MOC]\n    uint256 utpduLiqDiff = utpdu.sub(liq);\n\n    // utpdu - cov\n    // [MOC] - [MOC] = [MOC]\n    uint256 utpduCovDiff = utpdu.sub(cov);\n\n    // TPD * utpduCovDiff / utpduLiqDiff\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    return riskProLiqDiscountRate.mul(utpduCovDiff).div(utpduLiqDiff);\n  }\n\n  /**\n    @dev Max amount of RiskPro to available with discount: MaxRiskProWithDiscount = (uTPDU * nStableToken * PEG - (nReserve * B)) / (TPusd * TPD)\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param nStableToken StableToken amount [using mocPrecision]\n    @param utpdu Discount coverage threshold [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param riskProUsdPrice riskProUsdPrice [using mocPrecision]\n    @param spotDiscount spot discount [using mocPrecision]\n    @return Total RiskPro amount [using mocPrecision]\n  */\n  function maxRiskProWithDiscount(\n    MocLibConfig storage libConfig, uint256 nReserve, uint256 nStableToken, uint256 utpdu,\n    uint256 peg, uint256 reservePrice, uint256 riskProUsdPrice, uint256 spotDiscount\n  ) public view returns(uint256)  {\n    require(spotDiscount < libConfig.mocPrecision, \"Discount Rate should be lower than 1\");\n\n    if (spotDiscount == 0) {\n      return 0;\n    }\n\n    // nReserve * B\n    // [RES] * [MOC] / [RES] = [MOC]\n    uint256 nbUsdValue = nReserve.mul(reservePrice).div(libConfig.reservePrecision);\n\n    // (TPusd * (1 - TPD))\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 riskProDiscountPrice = riskProUsdPrice.mul(libConfig.mocPrecision.sub(spotDiscount))\n      .div(libConfig.mocPrecision);\n\n    return maxRiskProWithDiscountAux(libConfig, nbUsdValue, nStableToken, utpdu, peg, riskProDiscountPrice);\n  }\n\n  /**\n    @dev Max amount of RiskPro to available with discount: MaxRiskProWithDiscount = (uTPDU * nStableToken * PEG - (nReserve * B)) / (TPusd * TPD)\n    @param nbUsdValue Total amount of ReserveTokens in USD [using mocPrecision]\n    @param nStableToken StableToken amount [using mocPrecision]\n    @param utpdu Discount coverage threshold [using mocPrecision]\n    @param riskProDiscountPrice riskProUsdPrice with discount applied [using mocPrecision]\n    @param peg peg value\n    @return Total RiskPro amount [using reservePrecision]\n  */\n  function maxRiskProWithDiscountAux(\n    MocLibConfig storage libConfig, uint256 nbUsdValue, uint256 nStableToken,\n    uint256 utpdu, uint256 peg, uint256 riskProDiscountPrice\n  ) internal view returns(uint256) {\n\n    // uTPDU * nStableToken * PEG\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 coverageUSDAmount = utpdu.mul(nStableToken).mul(peg).div(libConfig.mocPrecision);\n\n    // This case only occurs with Coverage below 1\n    if (coverageUSDAmount <= nbUsdValue) {\n      return 0;\n    }\n\n    // ([MOC] - [MOC]) * [RES] / [MOC] = [RES]\n    return coverageUSDAmount.sub(nbUsdValue).mul(libConfig.reservePrecision).div(riskProDiscountPrice);\n  }\n\n  /**\n    @dev Calculates Locked ReserveTokens\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param nStableToken StableTokens amount [using mocPrecision]\n    @param peg peg value\n    @return Locked ReserveTokens [using reservePrecision]\n  */\n  function lockedReserveTokens(MocLibConfig storage libConfig, uint256 reservePrice, uint256 nStableToken, uint256 peg)\n    public view returns (uint256)\n  {\n    return nStableToken.mul(peg).mul(libConfig.reservePrecision).div(reservePrice);\n  }\n\n  /**\n    @dev Calculates price at liquidation event as a relation between the stableToken total supply\n    and the amount of ReserveTokens available to distribute\n    @param resTokenAmount ReserveTokens to distribute [using reservePrecision]\n    @param nStableToken StableTokens amount [using mocPrecision]\n    @return Price at liquidation event [using mocPrecision]\n  */\n  function liquidationPrice(MocLibConfig storage libConfig, uint256 resTokenAmount, uint256 nStableToken)\n  public view returns(uint256) {\n    // [MOC] * [RES] / [RES]\n    return nStableToken.mul(libConfig.reservePrecision).div(resTokenAmount);\n  }\n\n  /**\n    @dev Calculates RiskPro ReserveTokens: (nReserve-LB) / nTP\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param lb Locked ReserveTokens amount [using reservePrecision]\n    @param nTP RiskPro amount [using mocPrecision]\n    @return RiskPro ReserveTokens price [using reservePrecision]\n  */\n  function riskProTecPrice(MocLibConfig storage libConfig, uint256 nReserve, uint256 lb, uint256 nTP)\n  public view returns (uint256) {\n    // Liquidation happens before this condition turns true\n    if (nReserve < lb) {\n      return 0;\n    }\n\n    if (nTP == 0) {\n      return libConfig.mocPrecision;\n    }\n    // ([RES] - [RES]) * [MOC] / [MOC]\n    return nReserve.sub(lb).mul(libConfig.mocPrecision).div(nTP);\n  }\n\n  /**\n    @dev Calculates RiskPro ReserveToken price: RiskProxInRiskPro = riskProxTecPrice / riskProPrice\n    @param riskProxTecPrice RiskProx ReserveTokens price [using reservePrecision]\n    @param riskProPrice Trog ReserveTokens price [using reservePrecision]\n    @return RiskProx price in RiskPro [using mocPrecision]\n  */\n  function riskProxRiskProPrice(\n    MocLibConfig storage libConfig, uint256 riskProxTecPrice, uint256 riskProPrice\n  ) public view returns (uint256) {\n    // [RES] * [MOC] / [RES] = [MOC]\n    return riskProxTecPrice.mul(libConfig.mocPrecision).div(riskProPrice);\n  }\n\n  /**\n    @dev Returns a new value with the discountRate applied: (price)* (1 - discountRate)\n    @param price Price [using SomePrecision]\n    @param discountRate Discount rate to apply [using mocPrecision]\n    @return Price with discount applied [using SomePrecision]\n  */\n  function applyDiscountRate(MocLibConfig storage libConfig, uint256 price, uint256 discountRate)\n    public view returns(uint256) {\n\n    uint256 discountCoeff = libConfig.mocPrecision.sub(discountRate);\n\n    return price.mul(discountCoeff).div(libConfig.mocPrecision);\n  }\n\n  /**\n    @dev Returns the amount of interest to pay: = price * interestRate\n    @param value Cost to apply interest [using SomePrecision]\n    @param interestRate Interest rate to apply [using mocPrecision]\n    @return Interest cost based on the value and interestRate [using SomePrecision]\n  */\n  function getInterestCost(MocLibConfig storage libConfig, uint256 value, uint256 interestRate)\n    public view returns(uint256) {\n    // [ORIGIN] * [MOC] / [MOC] = [ORIGIN]\n    return value.mul(interestRate).div(libConfig.mocPrecision);\n  }\n\n  /**\n    @dev Calculates Coverage: nReserve / LB\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param lB Locked ReserveTokens amount [using reservePrecision]\n    @return Coverage [using mocPrecision]\n  */\n  function coverage(MocLibConfig storage libConfig, uint256 nReserve, uint256 lB) public view\n    returns(uint256) {\n    if (lB == 0) {\n      return UINT256_MAX;\n    }\n\n    return nReserve.mul(libConfig.mocPrecision).div(lB);\n  }\n\n /**\n    @dev Calculates Leverage from Coverage: Leverage = C / (C - 1)\n    @param cov Coverage [using mocPrecision]\n    @return Leverage [using mocPrecision]\n  */\n  function leverageFromCoverage(MocLibConfig storage libConfig, uint256 cov)\n  public view returns(uint256) {\n    if (cov == UINT256_MAX) {\n      return libConfig.mocPrecision;\n    }\n\n    if (cov <= libConfig.mocPrecision) {\n      return UINT256_MAX;\n    }\n\n    return cov.mul(libConfig.mocPrecision).div(cov.sub(libConfig.mocPrecision));\n  }\n\n /**\n    @dev Calculates Leverage: Leverage = nReserve / (nReserve - lB)\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param lB Locked ReserveTokens amount [using reservePrecision]\n    @return Leverage [using mocPrecision]\n  */\n  function leverage(MocLibConfig storage libConfig, uint256 nReserve,uint256 lB)\n  public view returns(uint256) {\n    if (lB == 0) {\n      return libConfig.mocPrecision;\n    }\n\n    if (nReserve <= lB) {\n      return UINT256_MAX;\n    }\n\n    return nReserve.mul(libConfig.mocPrecision).div(nReserve.sub(lB));\n  }\n\n  /**\n    @dev Price in ReserveTokens of the amount of StableTokens\n    @param amount Total ReserveTokens amount [using reservePrecision]\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @return Total value [using reservePrecision]\n  */\n  function stableTokensResTokensValue(\n    MocLibConfig storage libConfig, uint256 amount, uint256 peg, uint256 reservePrice\n  ) public view returns (uint256) {\n    require(reservePrice > 0, \"Price should be more than zero\");\n    require(libConfig.reservePrecision > 0, \"Precision should be more than zero\");\n    //Total = amount / satoshi price\n    //Total = amount / (reservePrice / precision)\n    // [RES] * [MOC] / [MOC]\n    uint256 stableTokenResTokenTotal = amount.mul(libConfig.mocPrecision).mul(peg).div(reservePrice);\n\n    return stableTokenResTokenTotal;\n  }\n\n  /**\n    @dev Price in ReserveTokens of the amount of RiskPros\n    @param riskProAmount amount of RiskPro [using mocPrecision]\n    @param riskProResTokenPrice RiskPro price in ReserveTokens [using reservePrecision]\n    @return Total value [using reservePrecision]\n  */\n  function riskProResTokensValuet(MocLibConfig storage libConfig, uint256 riskProAmount, uint256 riskProResTokenPrice)\n    public view returns (uint256) {\n    require(libConfig.reservePrecision > 0, \"Precision should be more than zero\");\n\n    // [MOC] * [RES] / [MOC] =  [RES]\n    uint256 riskProResTokenTotal = riskProAmount.mul(riskProResTokenPrice).div(libConfig.mocPrecision);\n\n    return riskProResTokenTotal;\n  }\n\n  /**\n    @dev Max amount of Docs to issue: MaxStableToken = ((nReserve*B)-(Cobj*B/Bcons*nStableToken*PEG))/(PEG*(Cobj*B/BCons-1))\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param cobj Target Coverage [using mocPrecision]\n    @param nStableToken StableToken amount [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param bCons ReserveTokens conservative price [using mocPrecision]\n    @return Total StableTokens amount [using mocPrecision]\n  */\n  function maxStableToken(\n    MocLibConfig storage libConfig, uint256 nReserve,\n    uint256 cobj, uint256 nStableToken, uint256 peg, uint256 reservePrice, uint256 bCons\n  ) public view returns(uint256) {\n    require(libConfig.reservePrecision > 0, \"Invalid Precision\");\n    require(libConfig.mocPrecision > 0, \"Invalid Precision\");\n\n    // If cobj is less than 1, just return zero\n    if (cobj < libConfig.mocPrecision)\n      return 0;\n\n    // Cobj * B / BCons\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 adjCobj = cobj.mul(reservePrice).div(bCons);\n\n    return maxStableTokenAux(libConfig, nReserve, adjCobj, nStableToken, peg, reservePrice);\n  }\n\n  function maxStableTokenAux(\n    MocLibConfig storage libConfig, uint256 nReserve, uint256 adjCobj, uint256 nStableToken, uint256 peg, uint256 reservePrice\n  ) internal view returns(uint256) {\n    // (nReserve*B)\n    // [RES] [MOC] [MOC] / [RES] = [MOC] [MOC]\n    uint256 firstOperand = nReserve.mul(reservePrice).mul(libConfig.mocPrecision).div(libConfig.reservePrecision);\n    // (adjCobj*nStableToken*PEG)\n    // [MOC] [MOC]\n    uint256 secOperand = adjCobj.mul(nStableToken).mul(peg);\n    // (PEG*(adjCobj-1)\n    // [MOC]\n    uint256 denom = adjCobj.sub(libConfig.mocPrecision).mul(peg);\n\n    if (firstOperand <= secOperand)\n      return 0;\n\n    // ([MOC][MOC] - [MOC][MOC]) / [MOC] = [MOC]\n    return (firstOperand.sub(secOperand)).div(denom);\n  }\n\n  /**\n    @dev Max amount of RiskPro to redeem: MaxRiskPro = ((nReserve*B)-(Cobj*nStableToken*PEG))/TPusd\n    @param nReserve Total ReserveTokens amount [using reservePrecision]\n    @param cobj Target Coverage [using mocPrecision]\n    @param nStableToken Target Coverage [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param bCons ReserveTokens conservative price [using mocPrecision]\n    @param riskProUsdPrice riskProUsdPrice [using mocPrecision]\n    @return Total RiskPro amount [using mocPrecision]\n  */\n  function maxRiskPro(\n    MocLibConfig storage libConfig, uint256 nReserve, uint256 cobj,\n    uint256 nStableToken, uint256 peg, uint256 reservePrice, uint256 bCons, uint256 riskProUsdPrice\n  ) public view returns(uint256) {\n    require(libConfig.reservePrecision > 0, \"Invalid Precision\");\n    require(libConfig.mocPrecision > 0, \"Invalid Precision\");\n\n    // Cobj * reservePrice / BCons\n    // [MOC] * [MOC] / [MOC] = [MOC]\n    uint256 adjCobj = cobj.mul(reservePrice).div(bCons);\n    // (nReserve * reservePrice)\n    // [RES] * [MOC] * [MOC] / [RES] = [MOC] [MOC]\n    uint256 firstOperand = nReserve.mul(reservePrice)\n      .mul(libConfig.mocPrecision)\n      .div(libConfig.reservePrecision);\n    // (adjCobj * nStableToken * PEG)\n    // [MOC] * [MOC]\n    uint256 secOperand = adjCobj.mul(nStableToken).mul(peg);\n\n    if (firstOperand <= secOperand)\n      return 0;\n\n    // ([MOC][MOC] - [MOC][MOC]) / [MOC] = [MOC]\n    return (firstOperand.sub(secOperand)).div(riskProUsdPrice);\n  }\n\n  /**\n    @dev Calculates the total ReserveTokens price of the amount of RiskPros\n    @param amount Amount of RiskPro [using mocPrecision]\n    @param riskProPrice RiskPro ReserveTokens Price [using reservePrecision]\n    @return RiskPro total value in ReserveTokens [using reservePrecision]\n  */\n  function totalRiskProInResTokens(\n    MocLibConfig storage libConfig, uint256 amount, uint256 riskProPrice\n  ) public view returns(uint256) {\n    // [RES] * [MOC] / [MOC] = [RES]\n    return riskProPrice.mul(amount).div(libConfig.mocPrecision);\n  }\n\n  /**\n    @dev Calculates the equivalent in StableTokens of the resTokensAmount\n    @param resTokensAmount ReserveTokens  amount [using reservePrecision]\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @return Equivalent StableToken amount [using mocPrecision]\n  */\n  function maxStableTokensWithResTokens(\n    MocLibConfig storage libConfig, uint256 resTokensAmount, uint256 reservePrice\n  ) public view returns(uint256) {\n    // [RES] * [MOC] / [RES] = [MOC]\n    return resTokensAmount.mul(reservePrice).div(libConfig.reservePrecision);\n  }\n\n  /**\n    @dev Calculates the equivalent in RiskPro of the resTokensAmount\n    @param resTokensAmount ReserveTokens amount [using reservePrecision]\n    @param riskProPrice RiskPro ReserveTokens price [using reservePrecision]\n    @return Equivalent RiskPro amount [using mocPrecision]\n  */\n  function maxRiskProWithResTokens(\n    MocLibConfig storage libConfig, uint256 resTokensAmount, uint256 riskProPrice\n  ) public view returns(uint256) {\n    if (riskProPrice == 0) {\n      return 0;\n    }\n\n    // [RES] * [MOC] / [RES]\n    return resTokensAmount.mul(libConfig.mocPrecision).div(riskProPrice);\n  }\n\n  /**\n    @dev Calculates the ResToken amount to move from C0 bucket to\n    an L bucket when a RiskProx minting occurs: toMove = resTokensAmount * (lev - 1)\n    @param resTokensAmount Total ReserveTokens amount [using reservePrecision]\n    @param lev L bucket leverage [using mocPrecision]\n    @return resTokens to move [using reservePrecision]\n  */\n  function bucketTransferAmount(\n    MocLibConfig storage libConfig, uint256 resTokensAmount, uint256 lev\n  ) public view returns(uint256) {\n    require(lev > libConfig.mocPrecision, \"Leverage should be more than 1\");\n\n    if (lev == UINT256_MAX || resTokensAmount == 0) {\n      return 0;\n    }\n\n    // (lev-1)\n    uint256 levSubOne = lev.sub(libConfig.mocPrecision);\n\n    // Intentionally avaoid SafeMath\n    // [RES] * [MOC]\n    uint256 transferAmount = resTokensAmount * levSubOne;\n    if (transferAmount / resTokensAmount != levSubOne)\n      return 0;\n\n    // [RES] * [MOC] / [MOC] = [RES]\n    return transferAmount.div(libConfig.mocPrecision);\n  }\n\n   /**\n    @dev Max amount of ReserveTokens allowed to be used to mint riskProx: MaxriskProx = nStableToken/ (PEG*B*(lev-1))\n    @param nStableToken number of StableToken [using mocPrecision]\n    @param peg peg value\n    @param reservePrice ReserveTokens price [using mocPrecision]\n    @param lev leverage [using mocPrecision]\n    @return Max riskProx ReserveTokens value [using reservePrecision]\n  */\n  function maxRiskProxResTokenValue(\n    MocLibConfig storage libConfig, uint256 nStableToken, uint256 peg, uint256 reservePrice, uint256 lev\n  ) public view returns(uint256)  {\n    require(libConfig.reservePrecision > 0, \"Invalid Precision\");\n    require(libConfig.mocPrecision > 0, \"Invalid Precision\");\n\n    if (lev <= libConfig.mocPrecision) {\n      return 0;\n    }\n    // (lev-1)\n    // [MOC]\n    uint256 levSubOne = lev.sub(libConfig.mocPrecision);\n\n    // PEG * ResTokenPrice\n    // [MOC]\n    uint256 pegTimesPrice = peg.mul(reservePrice);\n\n    // This intentionally avoid using safeMath to handle overflow case\n    // PEG * ResTokenPrice * (lev - 1)\n    // [MOC] * [MOC]\n    uint256 dividend = pegTimesPrice * levSubOne;\n\n    if (dividend / pegTimesPrice != levSubOne)\n      return 0; // INFINIT dividend means 0\n\n    // nStableToken adjusted with precisions\n    // [MOC] [RES]\n    uint256 divider = nStableToken.mul(libConfig.reservePrecision);\n\n    // [MOC] [RES] [MOC] / [MOC] [MOC]\n    return divider.mul(libConfig.mocPrecision).div(dividend);\n  }\n\n  /**\n    @dev Calculates the equivalent in MoC of the reserve token\n    @param resTokensAmount Total ReserveTokens amount\n    @param reservePrice ReserveTokens price\n    @param mocPrice MoC price\n    @return Equivalent MoC amount\n  */\n  function maxMoCWithReserveToken(\n    MocLibConfig storage /*libConfig*/, uint256 resTokensAmount, uint256 reservePrice, uint256 mocPrice\n  ) public pure returns(uint256) {\n    return reservePrice.mul(resTokensAmount).div(mocPrice);\n  }\n\n  /**\n    @dev Calculates the equivalent in reserve token of the MoC amount\n    @param amount MoC amount\n    @param reservePrice ReserveTokens price\n    @param mocPrice MoC price\n    @return Equivalent ReserveToken amount\n  */\n  function mocReserveTokenValue(\n    MocLibConfig storage /*libConfig*/, uint256 amount, uint256 reservePrice, uint256 mocPrice\n  ) public pure returns(uint256) {\n    require(reservePrice > 0,\"ReserveToken price should be more than zero\");\n    require(mocPrice > 0,\"MoC price should be more than zero\");\n\n    uint256 mocReserveTokenTotal = amount.mul(mocPrice).div(reservePrice);\n\n    return mocReserveTokenTotal;\n  }\n\n  /**\n    @dev Rounding product adapted from DSMath but with custom precision\n    @param x Multiplicand\n    @param y Multiplier\n    @return Product\n  */\n  function mulr(uint x, uint y, uint256 precision) internal pure returns (uint z) {\n    return x.mul(y).add(precision.div(2)).div(precision);\n  }\n\n  /**\n    @dev Potentiation by squaring adapted from DSMath but with custom precision\n    @param x Base\n    @param n Exponent\n    @return power\n  */\n  function pow(uint256 x, uint256 n, uint256 precision) internal pure returns (uint z) {\n    uint256 x2 = x;\n    z = n % 2 != 0 ? x : precision;\n\n    for (n /= 2; n != 0; n /= 2) {\n      x2 = mulr(x2, x2, precision);\n\n      if (n % 2 != 0) {\n        z = mulr(z, x2, precision);\n      }\n    }\n  }\n}\n\n\n// Dependency file: contracts/MoCLibConnection.sol\n\n// pragma solidity 0.5.8;\n\n// import \"contracts/MoCHelperLib.sol\";\n\n/**\n  @dev Interface with MocHelperLib\n */\ncontract MoCLibConnection {\n  using MoCHelperLib for MoCHelperLib.MocLibConfig;\n  MoCHelperLib.MocLibConfig internal mocLibConfig;\n\n  /*\n  * Precision getters\n  */\n  function getMocPrecision() public view returns(uint256) {\n    return mocLibConfig.mocPrecision;\n  }\n\n  function getReservePrecision() public view returns(uint256) {\n    return mocLibConfig.reservePrecision;\n  }\n\n  function getDayPrecision() public view returns(uint256) {\n    return mocLibConfig.dayPrecision;\n  }\n\n  function initializePrecisions() internal {\n    mocLibConfig = MoCHelperLib.MocLibConfig({\n      reservePrecision: 10 ** 18,\n      mocPrecision: 10 ** 18,\n      dayPrecision: 1\n    });\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/base/MoCWhitelist.sol\n\n// pragma solidity 0.5.8;\n\n/**\n  @dev Provides access control between all MoC Contracts\n */\ncontract MoCWhitelist {\n  mapping(address => bool) whitelist;\n\n  /**\n   * @dev Check if an account is whitelisted\n   * @return Bool\n   */\n  function isWhitelisted(address account)\n    public\n    view\n    returns (bool)\n  {\n    require(account != address(0), \"Account must not be 0x0\");\n    return whitelist[account];\n  }\n\n  /**\n   * @dev Add account to whitelist\n   */\n  function add(address account) internal {\n    require(account != address(0), \"Account must not be 0x0\");\n    require(!isWhitelisted(account), \"Account not allowed to add accounts into white list\");\n    whitelist[account] = true;\n  }\n\n  /**\n   * @dev Remove account from whitelist\n   */\n  function remove(address account) internal {\n    require(account != address(0), \"Account must not be 0x0\");\n    require(isWhitelisted(account), \"Account is not allowed to remove address from the white list\");\n\n    whitelist[account] = false;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/base/MoCConnector.sol\n\n// pragma solidity 0.5.8;\n\n// import \"zos-lib/contracts/Initializable.sol\";\n\n// import \"contracts/base/MoCWhitelist.sol\";\n\n/**\n  @dev Provides access control between all MoC Contracts\n */\ncontract MoCConnector is MoCWhitelist, Initializable {\n  // References\n  address payable public moc;\n  address public stableToken;\n  address public riskProToken;\n  address public riskProxManager;\n  address public mocState;\n  address public mocConverter;\n  address public mocSettlement;\n  address public mocExchange;\n  address public mocInrate;\n  /** DEPRECATED mocBurnout **/\n  address public mocBurnout;\n  address public reserveToken;\n\n  bool internal initialized;\n\n  /**\n    @dev Initializes the contract\n    @param mocAddress MoC contract address\n    @param stableTokenAddress Stable token contract address\n    @param riskProAddress RiskPro token contract address\n    @param riskProxAddress RiskProxManager contract address\n    @param stateAddress MoCState contract address\n    @param settlementAddress MoCSettlement contract address\n    @param converterAddress MoCConverter contract address\n    @param exchangeAddress MoCExchange contract address\n    @param inrateAddress MoCInrate contract address\n    @param burnoutBookAddress (DEPRECATED) MoCBurnout contract address. DO NOT USE.\n    @param reserveTokenAddress Reserve token contract address\n  */\n  function initialize(\n    address payable mocAddress,\n    address stableTokenAddress,\n    address riskProAddress,\n    address riskProxAddress,\n    address stateAddress,\n    address settlementAddress,\n    address converterAddress,\n    address exchangeAddress,\n    address inrateAddress,\n    address burnoutBookAddress,\n    address reserveTokenAddress\n  ) public initializer {\n    moc = mocAddress;\n    stableToken = stableTokenAddress;\n    riskProToken = riskProAddress;\n    riskProxManager = riskProxAddress;\n    mocState = stateAddress;\n    mocSettlement = settlementAddress;\n    mocConverter = converterAddress;\n    mocExchange = exchangeAddress;\n    mocInrate = inrateAddress;\n    mocBurnout = burnoutBookAddress;\n    reserveToken = reserveTokenAddress;\n\n    // Add to Whitelist\n    add(mocAddress);\n    add(stableTokenAddress);\n    add(riskProAddress);\n    add(riskProxAddress);\n    add(stateAddress);\n    add(settlementAddress);\n    add(converterAddress);\n    add(exchangeAddress);\n    add(inrateAddress);\n    add(burnoutBookAddress);\n    add(reserveTokenAddress);\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/base/MoCConstants.sol\n\n// pragma solidity 0.5.8;\n\n/**\n * @dev Defines special constants to use along all the MoC System\n */\ncontract MoCConstants {\n  bytes32 constant public BUCKET_X2 = \"X2\";\n  bytes32 constant public BUCKET_C0 = \"C0\";\n}\n\n// Dependency file: contracts/base/MoCBase.sol\n\n// pragma solidity 0.5.8;\n\n// import \"zos-lib/contracts/Initializable.sol\";\n\n// import \"contracts/base/MoCConnector.sol\";\n// import \"contracts/base/MoCConstants.sol\";\n\n/**\n  @dev General usefull modifiers and functions\n */\ncontract MoCBase is MoCConstants, Initializable {\n  // Contracts\n  MoCConnector public connector;\n\n  bool internal initialized;\n\n  function initializeBase(address connectorAddress) internal initializer {\n    connector = MoCConnector(connectorAddress);\n  }\n\n  modifier onlyWhitelisted(address account) {\n    require(connector.isWhitelisted(account), \"Address is not whitelisted\");\n    _;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n\n\n// Dependency file: contracts/interface/IMoC.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoC {\n    function sendToAddress(address receiver, uint256 tokenAmount) external returns(bool);\n}\n\n// Dependency file: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n// pragma solidity ^0.5.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n * the optional functions; to access them see `ERC20Detailed`.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n     * zero by default.\n     *\n     * This value changes when `approve` or `transferFrom` are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * > Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an `Approval` event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a `Transfer` event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to `approve`. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// Dependency file: contracts/interface/IMoCExchange.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoCExchange {\n    function getMoCTokenBalance(address owner, address spender) external view\n    returns (uint256 mocBalance, uint256 mocAllowance);\n\n    function mintRiskPro(address account, uint256 reserveAmount, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemRiskPro(address account, uint256 riskProAmount, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function mintStableToken(address account, uint256 reserveToMint, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemRiskProx(address payable account, bytes32 bucket, uint256 riskProxAmount, address vendorAccount)\n    external returns (uint256, uint256, uint256, uint256, uint256);\n\n    function mintRiskProx(address payable account, bytes32 bucket, uint256 reserveToMint, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemFreeStableToken(address account, uint256 stableTokenAmount, address vendorAccount) external\n    returns (uint256, uint256, uint256, uint256, uint256);\n\n    function redeemAllStableToken(address origin, address payable destination) external\n    returns (uint256);\n\n    function convertToMoCPrice(uint256 reserveAmount) external view returns (uint256, uint256, uint256);\n\n    function forceRedeemRiskProx(bytes32 bucket, address payable account, uint256 riskProxAmount, uint256 riskProxPrice)\n    external returns (bool);\n\n    function redeemStableTokenWithPrice(address payable userAddress, uint256 amount, uint256 reservePrice) external\n    returns (bool, uint256);\n}\n\n// Dependency file: contracts/interface/IMoCState.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoCState {\n\n     /******STATE MACHINE*********/\n    enum States {\n        // State 0\n        Liquidated,\n        // State 1\n        RiskProDiscount,\n        // State 2\n        BelowCobj,\n        // State 3\n        AboveCobj\n    }\n\n\n    function addToReserves(uint256 reserveAmount) external;\n\n    function substractFromReserves(uint256 reserveAmount) external;\n\n    function coverage(bytes32 bucket) external view returns(uint256);\n\n    function getReservesRemainder() external view returns(uint256);\n\n    function liq() external view returns(uint256);\n\n    function state() external view returns(States);\n\n    function peg() external view returns(uint256);\n\n    function dayBlockSpan() external view returns(uint256);\n\n    function getReserveTokenPrice() external view returns(uint256);\n\n    function getMoCPrice() external view returns(uint256);\n\n    function getProtected() external view returns(uint256);\n\n    function globalCoverage() external view returns(uint256);\n\n    function getMoCVendors() external view returns(address);\n\n    function getMoCToken() external view returns(address);\n\n    function nextState() external;\n\n    function maxRiskProWithDiscount() external view returns(uint256);\n\n    function absoluteMaxRiskPro() external view returns(uint256);\n\n    function absoluteMaxStableToken() external view returns(uint256);\n\n    function freeStableToken() external view returns(uint256);\n\n    function riskProTecPrice() external view returns(uint256);\n\n    function riskProSpotDiscountRate() external view returns(uint256);\n\n    function riskProDiscountPrice() external view returns(uint256);\n\n    function bucketRiskProTecPrice(bytes32 bucket) external view returns(uint256);\n\n    function currentAbundanceRatio() external view returns(uint256);\n\n    function abundanceRatio(uint256 stableToken0) external view returns(uint256);\n\n    function daysToSettlement() external view returns(uint256);\n\n    function leverage(bytes32 bucket) external view returns(uint256);\n\n    function getBucketNReserve(bytes32 bucket) external view returns(uint256);\n\n    function getLiquidationPrice() external view returns(uint256);\n\n    function maxRiskProxResTokenValue(bytes32 bucket) external view returns(uint256);\n\n    function bucketRiskProTecPriceHelper(bytes32 bucket) external view returns(uint256);\n}\n\n// Dependency file: contracts/interface/IMoCVendors.sol\n\n// pragma solidity 0.5.8;\n\ninterface IMoCVendors {\n    function resetTotalPaidInMoC() external;\n\n    function getIsActive(address account) external view\n    returns (bool);\n\n    function getTotalPaidInMoC(address account) external view\n    returns (uint256);\n\n    function getStaking(address account) external view\n    returns (uint256);\n\n    function getMarkup(address account) external view\n    returns (uint256);\n\n    function updatePaidMarkup(address account, uint256 mocAmount, uint256 reserveAmount, uint256 totalMoCAmount) external;\n}\n\n// Root file: contracts/MoCVendors.sol\n\npragma solidity 0.5.8;\n\n// import \"openzeppelin-solidity/contracts/math/Math.sol\";\n// import \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n// import \"moc-governance/contracts/Governance/Governed.sol\";\n// import \"contracts/MoCLibConnection.sol\";\n// import \"contracts/base/MoCBase.sol\";\n// import \"contracts/interface/IMoC.sol\";\n// import \"openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\";\n// import \"contracts/interface/IMoCExchange.sol\";\n// import \"contracts/interface/IMoCState.sol\";\n// import \"contracts/interface/IMoCVendors.sol\";\n\ncontract MoCVendorsEvents {\n  event VendorRegistered(\n    address account,\n    uint256 markup\n  );\n  event VendorUpdated(\n    address account,\n    uint256 markup\n  );\n  event VendorUnregistered(\n    address account\n  );\n  event VendorStakeAdded(\n    address account,\n    uint256 staking\n  );\n  event VendorStakeRemoved(\n    address account,\n    uint256 staking\n  );\n  event TotalPaidInMoCReset(\n    address account\n  );\n  event VendorGuardianAddressChanged (\n    address vendorGuardianAddress\n  );\n}\n\ncontract MoCVendors is MoCVendorsEvents, MoCBase, MoCLibConnection, Governed, IMoCVendors {\n  using Math for uint256;\n  using SafeMath for uint256;\n\n  // Structs\n  struct VendorDetails {\n    bool isActive;\n    uint256 markup;\n    uint256 totalPaidInMoC;\n    uint256 staking; // temporarily retained\n    uint256 paidMoC;\n    uint256 paidReserveToken;\n  }\n\n  // Contracts\n  IMoC internal moc;\n  IMoCState internal mocState;\n  IMoCExchange internal mocExchange;\n\n  // Constants\n  uint8 public constant VENDORS_LIST_ARRAY_MAX_LENGTH = 100;\n  uint256 public constant VENDOR_MAX_MARKUP = 10000000000000000; // 0.01 = 1%\n\n  // Variables\n  address public vendorGuardianAddress;\n  mapping(address => VendorDetails) public vendors;\n  address[] public vendorsList;\n\n  /**\n    @dev Initializes the contract\n    @param connectorAddress MoCConnector contract address\n    @param _governor Governor contract address\n    @param _vendorGuardianAddress Address which will be authorized to register and unregister vendors.\n  */\n  function initialize(\n    address connectorAddress,\n    address _governor,\n    address _vendorGuardianAddress\n  ) public initializer {\n    initializePrecisions();\n    initializeBase(connectorAddress);\n    initializeContracts();\n    initializeValues(_governor, _vendorGuardianAddress);\n  }\n\n  /**\n    @dev Gets the count of active registered vendors\n    @return Amount of active registered vendors\n  */\n  function getVendorsCount() public view returns(uint vendorsCount) {\n    return vendorsList.length;\n  }\n\n  /**\n    @dev Allows to register a vendor\n    @param account Vendor address\n    @param markup Markup which vendor will perceive from mint/redeem operations\n    @return true if vendor was registered successfully; otherwise false\n  */\n  function registerVendor(address account, uint256 markup) public onlyVendorGuardian() returns (bool isActive) {\n    require(account != address(0), \"Vendor account must not be 0x0\");\n    require(markup <= VENDOR_MAX_MARKUP, \"Vendor markup threshold exceeded\");\n\n    if (vendors[account].isActive == false) {\n      // Change the error message according to the value of the VENDORS_LIST_ARRAY_MAX_LENGTH constant\n      require(vendorsList.length < VENDORS_LIST_ARRAY_MAX_LENGTH, \"vendorsList length out of range\");\n\n      // Map vendor details to vendor address\n      vendors[account].isActive = true;\n      vendors[account].markup = markup;\n\n      vendorsList.push(account);\n\n      emit VendorRegistered(account, markup);\n    } else if (vendors[account].markup != markup) {\n      vendors[account].markup = markup;\n\n      emit VendorUpdated(account, markup);\n    }\n\n    return vendors[account].isActive;\n  }\n\n  /**\n    @dev Allows to unregister a vendor\n    @param account Vendor address\n    @return false if vendor was unregistered successfully; otherwise false\n  */\n  function unregisterVendor(address account) public onlyVendorGuardian() returns (bool isActive) {\n    uint8 i = 0;\n    while (i < vendorsList.length && vendorsList[i] != account) {\n      i++;\n    }\n    // If vendor is found, then unregister it\n    if (i < vendorsList.length) {\n      vendors[account].isActive = false;\n      vendorsList[i] = vendorsList[vendorsList.length - 1];\n      delete vendorsList[vendorsList.length - 1];\n      vendorsList.length--;\n\n      emit VendorUnregistered(account);\n      return false;\n    }\n\n    return vendors[account].isActive;\n  }\n\n  /**\n    @dev Allows an active vendor (msg.sender) to add staking\n    @param staking Staking the vendor wants to add\n  */\n  function addStake(uint256 staking) public onlyActiveVendor() {\n    IERC20 mocToken = IERC20(mocState.getMoCToken());\n    (uint256 mocBalance, uint256 mocAllowance) = mocExchange.getMoCTokenBalance(msg.sender, address(this));\n\n    require(staking > 0, \"Staking should be greater than 0\");\n    require(staking <= mocBalance && staking <= mocAllowance, \"MoC balance or MoC allowance are not enough to add staking\");\n\n    mocToken.transferFrom(msg.sender, address(this), staking);\n    vendors[msg.sender].staking = vendors[msg.sender].staking.add(staking);\n\n    emit VendorStakeAdded(msg.sender, staking);\n  }\n\n  /**\n    @dev Allows an active vendor (msg.sender) to remove staking\n    @param staking Staking the vendor wants to remove\n  */\n  function removeStake(uint256 staking) public onlyActiveVendor() {\n    IERC20 mocToken = IERC20(mocState.getMoCToken());\n\n    require(staking > 0, \"Staking should be greater than 0\");\n    require(staking <= vendors[msg.sender].totalPaidInMoC, \"Vendor total paid is not enough\");\n\n    mocToken.transfer(msg.sender, staking);\n    vendors[msg.sender].staking = vendors[msg.sender].staking.sub(staking);\n\n    emit VendorStakeRemoved(msg.sender, staking);\n  }\n\n  /**\n    @dev Allows to update paid markup to vendor\n    @param account Vendor address\n    @param mocAmount paid markup in MoC\n    @param resTokenAmount paid markup in ReserveToken\n    @param totalMoCAmount total paid in MoC\n  */\n  function updatePaidMarkup(address account, uint256 mocAmount, uint256 resTokenAmount, uint256 totalMoCAmount)\n  public\n  onlyWhitelisted(msg.sender) {\n    vendors[account].totalPaidInMoC = vendors[account].totalPaidInMoC.add(totalMoCAmount);\n    vendors[account].paidMoC = vendors[account].paidMoC.add(mocAmount);\n    vendors[account].paidReserveToken = vendors[account].paidReserveToken.add(resTokenAmount);\n  }\n\n  /**\n    @dev Gets if a vendor is active\n    @param account Vendor address\n    @return true if vendor is active; false otherwise\n  */\n  function getIsActive(address account) public view\n  returns (bool) {\n    return vendors[account].isActive;\n  }\n\n  /**\n    @dev Gets vendor markup\n    @param account Vendor address\n    @return Vendor markup\n  */\n  function getMarkup(address account) public view\n  returns (uint256) {\n    return vendors[account].markup;\n  }\n\n  /**\n    @dev Gets vendor total paid in MoC\n    @param account Vendor address\n    @return Vendor total paid in MoC\n  */\n  function getTotalPaidInMoC(address account) public view\n  returns (uint256) {\n    return vendors[account].totalPaidInMoC;\n  }\n\n  /**\n    @dev Gets vendor staking\n    @param account Vendor address\n    @return Vendor staking\n  */\n  function getStaking(address account) public view\n  returns (uint256) {\n    return vendors[account].staking;\n  }\n\n  /**\n    @dev Gets vendor paid in MoC\n    @param account Vendor address\n    @return Vendor paid in MoC\n  */\n  function getPaidMoC(address account) public view\n  returns (uint256) {\n    return vendors[account].paidMoC;\n  }\n\n  /**\n    @dev Gets vendor paid in ReserveToken\n    @param account Vendor address\n    @return Vendor total paid in ReserveToken\n  */\n  function getPaidReserveToken(address account) public view\n  returns (uint256) {\n    return vendors[account].paidReserveToken;\n  }\n\n  /**\n    @dev Allows to reset all active vendor's total paid in MoC during settlement\n  */\n  function resetTotalPaidInMoC() public onlyWhitelisted(msg.sender) {\n    // Triggered by settlement\n    for (uint8 i = 0; i < vendorsList.length; i++) {\n      address account = vendorsList[i];\n\n      // Reset only if vendor is active\n      if (vendors[account].isActive == true) {\n        vendors[account].totalPaidInMoC = 0;\n\n        emit TotalPaidInMoCReset(account);\n      }\n    }\n  }\n\n  /**\n    @dev Returns the address is authorized to register and unregister vendors.\n  */\n  function getVendorGuardianAddress() public view returns(address) {\n    return vendorGuardianAddress;\n  }\n\n  /**\n    @dev Sets the address which will be authorized to register and unregister vendors.\n    @param _vendorGuardianAddress Address which will be authorized to register and unregister vendors.\n  */\n  function setVendorGuardianAddress(address _vendorGuardianAddress) public onlyAuthorizedChanger() {\n    setVendorGuardianAddressInternal(_vendorGuardianAddress);\n  }\n\n  function initializeContracts() internal {\n    moc = IMoC(connector.moc());\n    mocState = IMoCState(connector.mocState());\n    mocExchange = IMoCExchange(connector.mocExchange());\n  }\n\n  function initializeValues(address _governor, address _vendorGuardianAddress) internal {\n    governor = IGovernor(_governor);\n    setVendorGuardianAddressInternal(_vendorGuardianAddress);\n  }\n\n  /**\n    @dev Sets the address which will be authorized to register and unregister vendors.\n    @param _vendorGuardianAddress Address which will be authorized to register and unregister vendors.\n  */\n  function setVendorGuardianAddressInternal(address _vendorGuardianAddress) internal {\n    require(_vendorGuardianAddress != address(0), \"vendorGuardianAddress must not be 0x0\");\n\n    vendorGuardianAddress = _vendorGuardianAddress;\n\n    emit VendorGuardianAddressChanged(vendorGuardianAddress);\n  }\n\n  /**\n    @dev Checks if vendor (msg.sender) is active\n  */\n  modifier onlyActiveVendor() {\n    require(vendors[msg.sender].isActive == true, \"Vendor is inexistent or inactive\");\n    _;\n  }\n\n  /**\n    @dev Checks if address is allowed to call function\n  */\n  modifier onlyVendorGuardian() {\n    require(msg.sender == vendorGuardianAddress, \"Caller is not vendor guardian address\");\n    _;\n  }\n\n  // Leave a gap betweeen inherited contracts variables in order to be\n  // able to add more variables in them later\n  uint256[50] private upgradeGap;\n}\n",
            "file": "MoCVendors.sol"
        }
    ],
    "libraries": {},
    "creationData": {
        "blockHash": "0x5d2edd9d4fdea7b3c8a699f46d2cd4468940da20fa1b7fcdfb51d1624a31a3b1",
        "blockNumber": 1838274,
        "transactionHash": "0x577775a5ae95c3936f44bca79e369fc89011c5fae1c6807550af4e25218dc892",
        "timestamp": 1620845893
    }
}